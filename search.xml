<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络编程</title>
      <link href="/blog/2023/04/06/wang-luo-bian-cheng/"/>
      <url>/blog/2023/04/06/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>w</p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1.软件架构"></a>1.软件架构</h2><h3 id="C-x2F-S架构"><a href="#C-x2F-S架构" class="headerlink" title="C&#x2F;S架构"></a>C&#x2F;S架构</h3><p>全称为Client&#x2F;Server结构，是指客户端和服务器结构。常见程序有QQ、美团app、360安全卫士等软件。</p><h3 id="B-x2F-S架构"><a href="#B-x2F-S架构" class="headerlink" title="B&#x2F;S架构"></a>B&#x2F;S架构</h3><p><strong>B&#x2F;S架构</strong> ：全称为Browser&#x2F;Server结构，是指浏览器和服务器结构。常见浏览器有IE、谷歌、火狐等。</p><h1 id="二、网络通信"><a href="#二、网络通信" class="headerlink" title="二、网络通信"></a>二、网络通信</h1><h2 id="1-三大问题"><a href="#1-三大问题" class="headerlink" title="1.三大问题"></a>1.三大问题</h2><p>如何定位网络的主机？</p><p>如何定位为主机的应用？</p><p>如何进行数据传输？</p><h2 id="2-通信要素"><a href="#2-通信要素" class="headerlink" title="2.通信要素"></a>2.通信要素</h2><p>IP地址与域名、端口号、网络协议</p><h3 id="IP地址与域名"><a href="#IP地址与域名" class="headerlink" title="IP地址与域名"></a>IP地址与域名</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给网络中的一台计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p><h5 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h5><h5 id="方式一：IPV4与IPV6"><a href="#方式一：IPV4与IPV6" class="headerlink" title="方式一：IPV4与IPV6"></a>方式一：IPV4与IPV6</h5><p><code>IPv4</code>：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，以点分<code>十进制</code>表示，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数。</p><p> <code>IPv6</code>：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，共16个字节，写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开。比如：<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，按保守方法估算IPv6实际可分配的地址，整个地球的每平方米面积上仍可分配1000多个地址，这样就解决了网络地址资源数量不够的问题。2012年6月6日，国际互联网协会举行了世界IPv6启动纪念日，这一天，全球IPv6网络正式启动。多家知名网站，如Google、Facebook和Yahoo等，于当天全球标准时间0点（北京时间8点整）开始永久性支持IPv6访问。2018年6月，三大运营商联合阿里云宣布，将全面对外提供IPv6服务，并计划在2025年前助推中国互联网真正实现“IPv6 Only”。</p><p>在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还考虑了在IPv4中解决不好的其它问题，主要有端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p><h5 id="方式二：公网（万维网）与私网"><a href="#方式二：公网（万维网）与私网" class="headerlink" title="方式二：公网（万维网）与私网"></a>方式二：公网（万维网）与私网</h5><p>公网地址( 万维网使用）和 私有地址( 局域网使用）。192.168.开头的就是私有地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。</p><p><strong>常用命令：</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查网络是否连通，在控制台输入：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">ping 空格 <span class="token constant">IP</span>地址ping <span class="token number">220.181</span><span class="token number">.57</span><span class="token number">.216</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>特殊的IP地址：</strong></p><ul><li>本地回环地址(hostAddress)：<code>127.0.0.1</code></li><li>主机名(hostName)：<code>localhost</code></li></ul><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名(hostName)：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>IP 地址(hostAddress)：202.108.35.210</li></ul><p><strong>域名解析：</strong>因为IP地址数字不便于记忆，因此出现了域名。域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS，Domain Name System，域名系统)负责将域名转化成IP地址，这样才能和主机建立连接。</p><p>详细过程：</p><ol><li>在浏览器中输入www . qq .com 域名，操作系统会先检查自己本地的<code>hosts文件</code>是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</li><li>如果hosts里没有这个域名的映射，则查找<code>本地DNS解析器缓存</code>，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP&#x2F;IP参数中设置的首选DNS服务器，在此我们叫它<code>本地DNS服务器</code>，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已<code>缓存</code>了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</li><li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="http://qq.com/">http://qq.com</a>)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找（<a href="http://qq.com/">http://qq.com</a>)域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com主机./">www.qq.com主机。</a></li><li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li></ol><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p><strong>端口号</strong>：可以唯一标识设备中的进程（应用程序）。</p><p>不同的进程，设置不同的端口号。</p><ul><li>端口号：用两个字节表示的整数，它的取值范围是0~65535<ul><li>公认端口：0~1023。被预先定义的服务通信占用，如：HTTP（80），FTP（21），Telnet（23）</li><li>注册端口：1024~49151。分配给用户进程或应用程序。如：Tomcat（8080），MySQL（3306），Oracle（1521）。</li><li>动态&#x2F; 私有端口：49152~65535。</li></ul></li></ul><p><strong>端口号被占用，程序将启动失败</strong></p><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p><code>网络通信协议</code>：在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤、出错控制等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p><h4 id="两套参考模型"><a href="#两套参考模型" class="headerlink" title="两套参考模型"></a>两套参考模型</h4><ul><li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。</li><li>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。</li></ul><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220514172130459.png"></p><p>上图中，OSI参考模型：模型<code>过于理想化</code>，未能在因特网上进行广泛推广。 TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的<code>国际标准</code>。</p><p><strong>TCP&#x2F;IP协议：</strong> 传输控制协议&#x2F;因特网互联协议( Transmission Control Protocol&#x2F;Internet Protocol)，TCP&#x2F;IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。是Internet最基本、最广泛的协议。</p><h4 id="TCP四层模型介绍"><a href="#TCP四层模型介绍" class="headerlink" title="TCP四层模型介绍"></a>TCP四层模型介绍</h4><p><strong>应用层：</strong> 提供服务</p><p>基于网络构建应用服务。     （服务与应用程序）</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>HTTP协议</td><td>超文本传输协议</td></tr><tr><td>FTF 协议</td><td>文件传输协议</td></tr><tr><td>SMTP协议</td><td>简单邮件传输协议</td></tr><tr><td>NNTP协议</td><td>网上新闻传输协议</td></tr><tr><td>DNS</td><td>域名服务</td></tr><tr><td>Telnet协议</td><td>虚拟终端协议</td></tr></tbody></table><p><strong>传输层：</strong>主机之间建立、管理、维护连接</p><p>使网络程序进行通信。 （定义了数据协议和端口号，确认数据传输及错误处理）</p><table><thead><tr><th>协议</th><th>作用</th><th></th></tr></thead><tbody><tr><td>TCP</td><td>传输控制协议</td><td>面向连接，基于字节流、可靠</td></tr><tr><td>UDP</td><td>用户数据报协议</td><td>无连接，面向事务的简单不可靠的信息传送服务</td></tr></tbody></table><p><strong>网络层</strong>     数据的封装处理以及传输的地址处理</p><p>TCP&#x2F;IP的核心。    （对数据包的IP地址进行封装和解析，数据传输、路由、地址的选择）</p><p>它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>IP</td><td>把数据从源传送到目的地。数据包：对数据大小的重新组装功能，以适应不同网络对包大小的要求。</td></tr></tbody></table><p><strong>网络接口层（物理+数据链路层）</strong> 物理上如何传输</p><p>用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>ATM</td><td></td></tr><tr><td>RARP</td><td></td></tr><tr><td>FDDI</td><td></td></tr></tbody></table><h2 id="3-再谈TCP与UDP协议"><a href="#3-再谈TCP与UDP协议" class="headerlink" title="3.再谈TCP与UDP协议"></a>3.再谈TCP与UDP协议</h2><h3 id="TCP协议特点："><a href="#TCP协议特点：" class="headerlink" title="TCP协议特点："></a>TCP协议特点：</h3><ol><li>通信的应用 ： <code>客户端、服务端</code>。</li><li>传输开始前，须先<code>建立TCP连接</code>,形成基于字节流的传输数据通道</li><li>三次握手。<code>可靠的</code></li><li>可<code>大数据量的传输</code></li><li>传输完毕，释放连接。<code>效率低</code></li></ol><h3 id="UDP协议特点："><a href="#UDP协议特点：" class="headerlink" title="UDP协议特点："></a>UDP协议特点：</h3><ol><li>通信的应用： <code>发送端、接收端</code>。</li><li>将数据、源、目的封装为数据包（基本单位），<code>不需要建立连接</code></li><li>只管发送，<code>不可靠</code></li><li>数据包大小<code>限制64KB</code></li><li>无需释放资源，<code>效率高</code></li></ol><h2 id="TCP的三次握手与四次挥手"><a href="#TCP的三次握手与四次挥手" class="headerlink" title="TCP的三次握手与四次挥手"></a>TCP的三次握手与四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li>第一次握手，客户端向服务器端发起TCP连接的请求 （客户端：同步已发送）</li><li>第二次握手，服务器端发送针对客户端TCP连接请求的确认 （服务端：同步已接收）</li><li>第三次握手，客户端发送确认的确认 （建立连接）</li></ul><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220415010105484.png" alt="image-20220415010105484"></p><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ul><li>第一次挥手：<strong>客户端向服务器端提出结束连接</strong>，<code>让服务器做最后的准备工作</code>。此时，<strong>客户端处于半关闭状态</strong>，即表示不再向服务器发送数据了，但是还可以接受数据。</li><li>第二次挥手：<strong>服务器接收到客户端释放连接的请</strong>求后，<code>会将最后的数据发给客户端</code>。并告知上层的应用进程不再接收数据。</li><li>第三次挥手：<strong>服务器发送完数据后</strong>，会给客户端<code>发送一个释放连接的报文</code>。那么客户端接收后就知道可以正式释放连接了。</li><li>第四次挥手：客户端接收到服务器最后的释放连接报文后，要<code>回复一个彻底断开的报文</code>。这样服务器收到后才会彻底释放连接。这里客户端，发送完最后的报文后，会等待2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待2MSL后，没有收到，那么彻底断开。</li></ul><h1 id="三、Java的网络编程API"><a href="#三、Java的网络编程API" class="headerlink" title="三、Java的网络编程API"></a>三、Java的网络编程API</h1><h2 id="1-InetAddress类"><a href="#1-InetAddress类" class="headerlink" title="1. InetAddress类"></a>1. InetAddress类</h2><p>netAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p><p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress 实例</p><ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li><li>public static InetAddress getByAddress(byte[] addr)</li></ul><p>InetAddress 提供了如下几个常用的方法</p><ul><li>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）</li><li>public String getHostName() ：获取此 IP 地址的主机名</li><li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li></ul><h2 id="2-Socket类"><a href="#2-Socket类" class="headerlink" title="2.Socket类"></a>2.Socket类</h2><ul><li>网络上具有唯一标识的IP地址和端口号组合在一起构成唯一能识别的标识符套接字（Socket）。</li><li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。网络通信其实就是Socket间的通信。</li><li>通信的两端都要有Socket，是两台机器间通信的端点。</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</li><li>Socket分类：<ul><li>流套接字（stream socket）：使用TCP提供可依赖的字节流服务<ul><li>ServerSocket：此类实现TCP服务器套接字。服务器套接字等待请求通过网络传入。</li><li>Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</li></ul></li><li>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务<ul><li>DatagramSocket：此类表示用来发送和接收UDP数据报包的套接字。</li></ul></li></ul></li></ul><h3 id="2-1-ServerSocket"><a href="#2-1-ServerSocket" class="headerlink" title="2.1 ServerSocket"></a>2.1 ServerSocket</h3><p><strong>ServerSocket类的构造方法：</strong></p><ul><li>ServerSocket(int port) ：创建绑定到特定端口的服务器套接字。</li></ul><p><strong>ServerSocket类的常用方法：</strong></p><ul><li>Socket accept()：侦听并接受到此套接字的连接。</li></ul><h3 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h3><p><strong>Socket类的常用构造方法</strong>：</p><ul><li>public Socket(InetAddress address,int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li><li>public Socket(String host,int port)：创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><strong>Socket类的常用方法</strong>：</p><ul><li>public InputStream getInputStream()：返回此套接字的输入流，可以用于接收消息</li><li>public OutputStream getOutputStream()：返回此套接字的输出流，可以用于发送消息</li><li>public InetAddress getInetAddress()：此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li>public InetAddress getLocalAddress()：获取套接字绑定的本地地址。</li><li>public int getPort()：此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li><li>public int getLocalPort()：返回此套接字绑定到的本地端口。如果尚未绑定套接字，则返回 -1。</li><li>public void close()：关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。</li><li>public void shutdownInput()：如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li><li>public void shutdownOutput()：禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul><p><strong>注意：</strong>先后调用Socket的shutdownInput()和shutdownOutput()方法，仅仅关闭了输入流和输出流，并不等于调用Socket的close()方法。在通信结束后，仍然要调用Scoket的close()方法，因为只有该方法才会释放Socket占用的资源，比如占用的本地端口号等。</p><h3 id="2-3-DatagramPacket类"><a href="#2-3-DatagramPacket类" class="headerlink" title="2.3 DatagramPacket类"></a>2.3 DatagramPacket类</h3><p><strong>DatagramPacket类的常用方法：</strong></p><ul><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length 参数必须小于等于 buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li><code>public byte[] getData()</code>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li><code>public int getLength()</code>返回将要发送或接收到的数据的长度。</li></ul><h1 id="四、TCP网络编程"><a href="#四、TCP网络编程" class="headerlink" title="四、TCP网络编程"></a>四、TCP网络编程</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220514172833216.png" alt="image-20220514172833216"></p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p><strong>客户端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket 的输入&#x2F; 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读&#x2F; 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线路。</li><li>关闭 Socket ：断开客户端到服务器的连接，释放线路</li></ul><p><strong>服务器端程序包含以下四个基本的 步骤：</strong></p><ul><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li><li>调用 accept() ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用 该Socket 类对象的 getOutputStream() 和 getInputStream () ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭Socket 对象：客户端访问结束，关闭通信套接字。</li></ul><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><strong>客户端发送内容给服务端，服务端将内容打印到控制台上。</strong></p><p><strong>1、服务器端示例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>one</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、准备一个ServerSocket对象，并绑定8888端口</span>        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待连接...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、在8888端口监听客户端的连接，该方法是个阻塞的方法，如果没有客户端连接，将一直等待</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InetAddress</span> inetAddress <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"客户端连接成功！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、获取输入流，用来接收该客户端发送给服务器的数据</span>        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"客户端发送的消息是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、获取输出流，用来发送数据给该客户端</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送数据</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"欢迎登录"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5、关闭socket，不再与该客户端通信</span>        <span class="token comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6、如果不再接收任何客户端通信，可以关闭ServerSocket</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、客户端示例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>one</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、获取输出流，用来发送数据给服务器</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送数据</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"lalala"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//会在流末尾写入一个“流的末尾”标记，对方才能读到-1，否则对方的读取方法会一致阻塞</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、获取输入流，用来接收服务器发送给该客户端的数据</span>        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器返回的消息是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、关闭socket，不再与服务器通信，即断开与服务器的连接</span>        <span class="token comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、UDP网络编程"><a href="#五、UDP网络编程" class="headerlink" title="五、UDP网络编程"></a>五、UDP网络编程</h1><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><p><strong>发送端程序包含以下四个基本的步骤：</strong></p><ul><li>创建DatagramSocket ：默认使用系统随机分配端口号。</li><li>创建DatagramPacket：将要发送的数据用字节数组表示，并指定要发送的数据长度，接收方的IP地址和端口号。</li><li>调用 该DatagramSocket 类对象的 send方法 ：发送数据报DatagramPacket对象。</li><li>关闭DatagramSocket 对象：发送端程序结束，关闭通信套接字。</li></ul><p><strong>接收端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建DatagramSocket ：指定监听的端口号。</li><li>创建DatagramPacket：指定接收数据用的字节数组，起到临时数据缓冲区的效果，并指定最大可以接收的数据长度。</li><li>调用 该DatagramSocket 类对象的receive方法 ：接收数据报DatagramPacket对象。。</li><li>关闭DatagramSocket ：接收端程序结束，关闭通信套接字。</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>发送端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by <span class="token operator">=</span> <span class="token string">"hello,com"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> by<span class="token punctuation">.</span>length<span class="token punctuation">,</span>     <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span> by<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、URL编程"><a href="#六、URL编程" class="headerlink" title="六、URL编程"></a>六、URL编程</h1><ul><li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。</li><li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li><li>URL的基本结构由5部分组成：</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http">&lt;传输协议>://&lt;主机名>:&lt;端口号>/&lt;文件名>#片段名?参数列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ul><li><p>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL url = new URL("http://www.baidu.com/"); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL downloadUrl = new URL(url, “download.html")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>public URL(String protocol, String host, String file); 例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL url = new URL("http", "www.baidu.com", “download. html");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>public URL(String protocol, String host, int port, String file); 例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">URL</span> gamelan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> “download<span class="token punctuation">.</span>html"<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</p></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>public String getProtocol( ) 获取该URL的协议名</li><li>public String getHost( ) 获取该URL的主机名</li><li>public String getPort( ) 获取该URL的端口号</li><li>public String getPath( ) 获取该URL的文件路径</li><li>public String getFile( ) 获取该URL的文件名</li><li>public String getQuery( ) 获取该URL的查询名</li></ul><h2 id="针对HTTP协议的URLConnection类"><a href="#针对HTTP协议的URLConnection类" class="headerlink" title="针对HTTP协议的URLConnection类"></a>针对HTTP协议的URLConnection类</h2><ul><li>URL的方法 openStream()：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li><li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException.<ul><li>URL netchinaren &#x3D; new URL (“<a href="http://www.atguigu.com/index.shtml%E2%80%9D">http://www.atguigu.com/index.shtml”</a>);</li><li>URLConnectonn u &#x3D; netchinaren.openConnection( );</li></ul></li><li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。<ul><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li><strong>public InputStream getInputStream ( ) throws IOException</strong></li><li>public OutputSteram getOutputStream( )throws IOException</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/blog/2023/04/06/java-ji-chu/"/>
      <url>/blog/2023/04/06/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/JVM%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><p>字节（Byte）: 存储容量的基本单位，1字节 &#x3D; 8bit</p><p>位（bit） : 数据存储的最小单位，在二进制系统中，0或1就是一位，叫做bit（比特）</p><table><thead><tr><th>编码</th><th>一个汉字占据字节</th><th></th></tr></thead><tbody><tr><td>iso-8859-1</td><td>一个字节</td><td>英文操作系统：ANSI</td></tr><tr><td>GBK</td><td>两个字节</td><td>中文操作系统：ANSI</td></tr><tr><td>UTF-8</td><td>通常三个字节</td><td></td></tr></tbody></table><p><strong>单位换算：</strong></p><p>8 bit &#x3D; 1 Byte</p><p>1024 Byte &#x3D; 1 KB</p><p>1024 KB &#x3D; 1 MB</p><p>1024 MB &#x3D; 1 GB</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/1.png"></p><table><thead><tr><th>类型</th><th>占用空间</th><th>表示范围</th><th>备注</th><th>默认值</th></tr></thead><tbody><tr><td>整数类型</td><td></td><td></td><td></td><td></td></tr><tr><td>byte</td><td>1字节</td><td>-128~127</td><td></td><td>0</td></tr><tr><td>short</td><td>2字节</td><td>-2 15次方</td><td></td><td>0</td></tr><tr><td>int</td><td>4字节</td><td>31次方</td><td></td><td>0</td></tr><tr><td>long</td><td>8字节</td><td>63次方</td><td>L或l后缀</td><td>0L</td></tr><tr><td>浮点类型</td><td></td><td></td><td></td><td></td></tr><tr><td>float(单精度)</td><td>4字节</td><td>-3.4 E+38 ~ 3.4 E+38</td><td>f或F后缀，精度7位有效数字</td><td>0.0F</td></tr><tr><td>double（双精度）</td><td>8字节</td><td></td><td>精度14位有效数字</td><td>0.0</td></tr><tr><td>字符类型</td><td></td><td></td><td></td><td></td></tr><tr><td>char（字符）</td><td>2字节</td><td></td><td>一个字母，一个汉字</td><td>0或 <code>\u0000</code></td></tr><tr><td>布尔类型</td><td></td><td></td><td></td><td></td></tr><tr><td>boolean</td><td>不确定，在 JVM 中编译为int，4字节</td><td></td><td>true 1，false 0</td><td>false</td></tr></tbody></table><h4 id="char类型的转义符"><a href="#char类型的转义符" class="headerlink" title="char类型的转义符"></a>char类型的转义符</h4><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>制表符</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\</code></td><td>反斜线</td></tr><tr><td><code>\b</code></td><td>退格符</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr></tbody></table><p>自动类型提升</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220311002543688.png"></p><ul><li><p>小范围值赋值大范围</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//char提升为int类型</span><span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>  <span class="token comment">//int提升为double</span><span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">123467</span><span class="token punctuation">;</span>  <span class="token comment">//123467在double范围中</span><span class="token keyword">byte</span> <span class="token operator">=</span>  <span class="token number">130</span><span class="token punctuation">;</span> <span class="token comment">//错误，byte最大为127</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">12345678912L</span><span class="token punctuation">;</span> <span class="token comment">//正确，表示标识L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据类型混合运算（byte，short，char数据类型计算按照int处理）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>doule  s <span class="token operator">=</span> i<span class="token operator">+</span>b<span class="token operator">+</span>d<span class="token punctuation">;</span> <span class="token comment">//混合运算，升级double</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span> <span class="token comment">//错误，b3无法接收int类型</span><span class="token keyword">int</span> i <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span> <span class="token comment">//正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>强制类型转换</p><ul><li>大转小：丢失精度或溢出（超越范围）</li><li>String无法强转！！！！（使用Integer.parstInt()）</li></ul></li></ul><p>”<strong>注意</strong>“</p><ol><li>浮点类型<strong>不适用于不容舍入误差计算的金融领域</strong>，可以用 <em>BigDecimal</em> 类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">eg ：<span class="token number">1.</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">=</span><span class="token number">0.30000000000000004</span>  因为计算机是二进制计算，可能导致精度丢失，<span class="token comment">//解决方法： 转化整数计算</span>    <span class="token number">2.</span> <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">123123123f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>byte、short、char类型之间的变量计算，结果为int类型（接收类型为int类型）</p><p>byte - short -char   ——&gt; int  ——&gt; long ——&gt; float ——&gt; double</p></li></ol><h3 id="2-进制"><a href="#2-进制" class="headerlink" title="2.进制"></a>2.进制</h3><table><thead><tr><th>进制</th><th>组成</th><th>开头</th></tr></thead><tbody><tr><td>十进制</td><td>0-9</td><td></td></tr><tr><td>二进制</td><td>0-1</td><td>ob || 0B</td></tr><tr><td>八进制</td><td>0-7</td><td>0</td></tr><tr><td>十六进制</td><td>0-9,a-f （不分大小写）</td><td>0x || 0X</td></tr></tbody></table><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><ol><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code></p><ul><li><p>正数：<code>最高位是0</code> ，补码与反码、原码一样，称为<code>三码合一</code></p></li><li><p>负数：<code>最高位是1</code></p><ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li><li><p>二进制转十进制</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220523114701881.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（反码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（补码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">10000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100110</span>（反码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100111</span>（补码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>十进制转二进制</p><p>除2取余的逆</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312000042595.png"></p></li></ol><h3 id="3-算数运算符"><a href="#3-算数运算符" class="headerlink" title="3.算数运算符"></a>3.算数运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312000848332.png"></p><h3 id="4-关系（比较）运算符"><a href="#4-关系（比较）运算符" class="headerlink" title="4.关系（比较）运算符"></a>4.关系（比较）运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312001742263.png"></p><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312001943403.png"></p><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li>相同点：如果符号左边是true，则二者都执行符号右边的操作</li><li>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</li></ul><h3 id="6-位运算"><a href="#6-位运算" class="headerlink" title="6.位运算"></a>6.位运算</h3><p>暂略</p><h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><h3 id="1-switch"><a href="#1-switch" class="headerlink" title="1.switch"></a>1.switch</h3><p> <strong>switch穿透</strong>：在case分支中没有break语句，则会继续运行；</p><h3 id="2-for，while"><a href="#2-for，while" class="headerlink" title="2.for，while"></a>2.for，while</h3><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>引用数据类型</li><li>创建数组会在内存中开辟连续存储空间，占据空间大小取决于数组长度和元素的数据类型</li><li>元素在内存中<strong>有序且连续</strong></li><li>无法改变长度</li><li>有索引（数组下标）</li><li>数组名引用连续空间的首地址</li><li>length：为属性</li></ul><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><table><thead><tr><th>JVM区域名称</th><th>作用</th></tr></thead><tbody><tr><td>虚拟机栈</td><td>存储方法的局部变量表等。局部变量表存储：基本数据类型、对象引用。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象）,new 创建的</td></tr><tr><td>方法区</td><td>存储被虚拟机加载的类信息、常量、（静态变量）、即时编译后的代码</td></tr></tbody></table><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE1.jpg"></p><h3 id="下标为什么从0开始？"><a href="#下标为什么从0开始？" class="headerlink" title="下标为什么从0开始？"></a>下标为什么从0开始？</h3><p>因为数组的第一个元素距离首地址间隔0个单元格。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>本质上还是一维数组（内存中）</p><h3 id="二分算法"><a href="#二分算法" class="headerlink" title="二分算法"></a>二分算法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//仅适用于有序</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//mid = (r - l) /2 +l;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230306153027456.png"></p><h3 id="选择排序-O-n-n"><a href="#选择排序-O-n-n" class="headerlink" title="选择排序(O(n*n))"></a>选择排序(O(n*n))</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//每个元素和后面的所有元素比较，若小，则放到前面</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">chooseSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arrays<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序-O-n-n"><a href="#冒泡排序-O-n-n" class="headerlink" title="冒泡排序(O(n*n))"></a>冒泡排序(O(n*n))</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//相邻两个元素比较大小，大于则交换位置</span><span class="token comment">// 外层控制循环次数，内层控制比较</span>   <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maoPao</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">int</span> temp <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                   arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> arrays<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序-O-n-log2-n"><a href="#快速排序-O-n-log2-n" class="headerlink" title="快速排序(O(n*log2 n))"></a>快速排序(O(n*log2 n))</h3><p>思想：</p><p>​         快速排序首先选取一个关键字为标志位（关键字的选取影响排序效率），然后将序列中小于标志位的关键字移动至标志位左侧，大于标志位的关键字移动至右侧。一趟比较完成后，整个序列以选取的标志位为界，左侧均小于标志位，右侧均大于关键字。但左右两侧内部并不是有序的(左右两侧关键字个数也不一定相同)。进而继续将左右两侧分别再以这种方式进行排序，直到将序列拆分的剩余一个关键字为止，整个序列即变成有序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> high<span class="token punctuation">;</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//不断循环，直到 基准值 左边 &lt; 基准值，右边 > 基准值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从后往前找第一个小于基准值的，交换位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">>=</span> key<span class="token punctuation">)</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从前往后找第一个大于基准值的，交换位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归左边的列，直到start == low</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">></span> low<span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归右边的列，直到end == high</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Arrays常用工具类"><a href="#Arrays常用工具类" class="headerlink" title="Arrays常用工具类"></a>Arrays常用工具类</h3><table><thead><tr><th>静态方法</th><th>作用</th></tr></thead><tbody><tr><td>Arrays.toString(Object[] arr)</td><td>数组元素的字符串标识</td></tr><tr><td>Arrays.sort(Object[] arr)</td><td>自然排序（升序）</td></tr><tr><td>Arrays.sort(Object[] arr，Comparator&lt;? super T&gt;  c)</td><td>自定义比较器排序</td></tr><tr><td>Arrays.binarySearch(Object[] a, int key)</td><td>二分法查找元素（有序数组使用）</td></tr><tr><td>Arrays.copyOf(Object[] a, int newLength)</td><td>复制并返回指定长度的数组</td></tr><tr><td>Arrays.copyOfRange(Object[] a, int from, int to)</td><td>复制指定位置的数组</td></tr><tr><td>Arrays.fill(Object[] a,Object o)</td><td>使用o填充数组</td></tr><tr><td>Arrays. equals(Object[] a,Object[] a2)</td><td>比较数组长度、元素是否一致</td></tr></tbody></table><ol><li>Arrays.sort(Object[] arr ,Comparator&lt;? super T&gt; c)  :  自定义比较器（o1 -o2 为升序，o2-o1为降序）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token operator">-</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//Lambda表达式</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><ol><li>ArrayIndexOutOfBoundsException ： 数组下标越界 （arr[]定义长度是10 ，arr[10] 超越下标）</li><li>NullPointerException ： 空指针异常。 （基本类型自动赋默认值，引用类型默认赋值null，获取数组元素报此异常）</li></ol><h2 id="四、面向对象编程"><a href="#四、面向对象编程" class="headerlink" title="四、面向对象编程"></a>四、面向对象编程</h2><h3 id="学习面向对象内容的三条主线"><a href="#学习面向对象内容的三条主线" class="headerlink" title="学习面向对象内容的三条主线"></a><strong>学习面向对象内容的三条主线</strong></h3><ul><li>Java类及类的成员：（重点）属性、方法、构造器；代码块、内部类</li><li>面向对象的特征：封装、继承、多态、（抽象）</li><li>其他关键字的使用：this、super、package、import、static、final、interface、abstract等</li></ul><h3 id="面向过程编程（POP）与面向对象编程-OOP"><a href="#面向过程编程（POP）与面向对象编程-OOP" class="headerlink" title="面向过程编程（POP）与面向对象编程(OOP)"></a>面向过程编程（POP）与面向对象编程(OOP)</h3><table><thead><tr><th></th><th>面向对象</th><th>面向过程</th></tr></thead><tbody><tr><td>关注焦点</td><td>类</td><td>过程（函数）：抽取相同代码</td></tr><tr><td>代码结构</td><td>类</td><td>函数</td></tr><tr><td>思维方式</td><td>设计者思维（容易理解）</td><td>执行者思维</td></tr><tr><td>人把大象关入冰箱</td><td>人（开关门、放大象的方法）、大象（可以进冰箱）、冰箱（开关门的属性）</td><td>开门、放进去、关门</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">人<span class="token punctuation">&#123;</span>    打开（冰箱）<span class="token punctuation">&#123;</span>冰箱<span class="token punctuation">.</span>开门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    操作<span class="token punctuation">(</span>大象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             大象<span class="token punctuation">.</span>进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    关闭<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             冰箱<span class="token punctuation">.</span>关门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>冰箱<span class="token punctuation">&#123;</span>     开门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>       关门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>大象<span class="token punctuation">&#123;</span>     进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><ol><li><p>定义： 不定义对象的句柄，而直接调用这个对象的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><table><thead><tr><th>JVM区域名称</th><th>作用</th></tr></thead><tbody><tr><td>虚拟机栈</td><td>存储方法的局部变量表等。局部变量表存储：基本数据类型、对象引用。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象）,new 创建的</td></tr><tr><td>方法区</td><td>存储被虚拟机加载的类信息、常量、静态变量、即时编译后的代码、常量池</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><table><thead><tr><th></th><th>实例变量</th><th>局部变量</th></tr></thead><tbody><tr><td>存储位置</td><td>存储在堆中</td><td>在栈中</td></tr><tr><td>消亡时间</td><td>GC回收</td><td>方法结束</td></tr><tr><td>作用域</td><td>通过对象使用</td><td>方法内</td></tr><tr><td>修饰符</td><td>public,protected,private,final,volatile,transient等</td><td>final</td></tr><tr><td>默认值</td><td>有</td><td>没有，必须初始化</td></tr></tbody></table><h3 id="类中方法的调用内存分析"><a href="#类中方法的调用内存分析" class="headerlink" title="类中方法的调用内存分析"></a>类中方法的调用内存分析</h3><pre class="line-numbers language-none"><code class="language-none">方法没有被调用的时候，都在方法区中的字节码文件(.class)中存储。方法被调用的时候，需要进入到栈内存中运行。方法每调用一次就会在栈中有一个入栈动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。栈结构：先进后出，后进先出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法参数的传递–值传递"><a href="#方法参数的传递–值传递" class="headerlink" title="方法参数的传递–值传递"></a>方法参数的传递–值传递</h3><h4 id="什么是值传递？"><a href="#什么是值传递？" class="headerlink" title="什么是值传递？"></a>什么是值传递？</h4><p>将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><ul><li>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</li><li>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</li></ul><h4 id="为什么只有值传递？"><a href="#为什么只有值传递？" class="headerlink" title="为什么只有值传递？"></a>为什么只有值传递？</h4><p>安全，避免其他程序修改对象。</p><h4 id="案例1：传递基本类型参数"><a href="#案例1：传递基本类型参数" class="headerlink" title="案例1：传递基本类型参数"></a>案例1：传递基本类型参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num1 = "</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num2 = "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">10</span>num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基本类型传递的是拷贝的值</strong></p><h4 id="案例2：传递引用类型参数1"><a href="#案例2：传递引用类型参数1" class="headerlink" title="案例2：传递引用类型参数1"></a>案例2：传递引用类型参数1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将数组的第一个元素变为0</span>      array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>引用类型拷贝的是内存地址，所以修改有改变</strong></p><h4 id="案例3-：传递引用类型参数2"><a href="#案例3-：传递引用类型参数2" class="headerlink" title="案例3 ：传递引用类型参数2"></a>案例3 ：传递引用类型参数2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">// 省略构造函数、Getter&amp;Setter方法</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> xiaoZhang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> xiaoLi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>xiaoZhang<span class="token punctuation">,</span> xiaoLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoZhang:"</span> <span class="token operator">+</span> xiaoZhang<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoLi:"</span> <span class="token operator">+</span> xiaoLi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person1<span class="token punctuation">,</span> <span class="token class-name">Person</span> person2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> temp <span class="token operator">=</span> person1<span class="token punctuation">;</span>    person1 <span class="token operator">=</span> person2<span class="token punctuation">;</span>    person2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1:"</span> <span class="token operator">+</span> person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person2:"</span> <span class="token operator">+</span> person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">person1<span class="token operator">:</span>小李person2<span class="token operator">:</span>小张xiaoZhang<span class="token operator">:</span>小张xiaoLi<span class="token operator">:</span>小李<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用类型拷贝的是内存地址，所以修改无改变</strong></p><h3 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h3><ol><li><p>把客观事物封装成抽象概念的类，并且类可以把自己的数据和方法只向可信的类或者对象开放，向没必要开放的类或者对象隐藏信息。</p></li><li><p>体现 ： 成员变量&#x2F;属性私有化，成员方法私有化。（单例模式（构造方法私有化））</p></li></ol><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><p>属性封装为private，通过set（）修改值。</p><p><strong>属性赋值顺序</strong>： 初始化—-构造方法—–set() </p><h3 id="4-this关键字："><a href="#4-this关键字：" class="headerlink" title="4.this关键字："></a>4.this关键字：</h3><ol><li><p>作用:</p><ol><li><strong>指定当前属性</strong>，在set（）和get（），新参和属性名称一致，用 eg：this.age &#x3D; age ；</li><li><strong>调用当前的构造器、成员变量、方法</strong>                                eg： 无参： this();    有参 ：this(参数)；       方法：this.method();</li></ol></li><li><p>使用：<strong>只能在构造器首行调用</strong>，<strong>且在构造器中只能声明一个</strong></p></li><li><p>作用域：非静态方法和非静态代码块</p></li><li><p>this：当前对象</p><ol><li>在构造器和非静态代码块中，表示正在new的对象</li><li>在实例方法中，表示调用当前方法的对象</li></ol></li></ol><h3 id="5-继承-extends"><a href="#5-继承-extends" class="headerlink" title="5.继承 extends"></a>5.继承 extends</h3><ol><li>重点：<ol><li><strong>子类会继承父类所有的实例变量和实例方法</strong>，<strong>还有静态方法</strong></li><li>子类不能直接访问父类中私有的(private)的成员变量和方法，只能通过get() &#x2F; set()访问。</li><li><strong>JAVA支持多层继承</strong>，一个父类可以有多个子类，<strong>但是不支持多重继承（单继承）</strong></li><li>Object是所有类的父类</li></ol></li><li>方法重写（override，overwrite）<ol><li>子类重写的方法返回类型不能大于父类被重写方法的返回类型</li><li>子类的私有方法不能重写，挎包的父类缺省的方法也不能重写</li></ol></li></ol><h3 id="方法重载与重写"><a href="#方法重载与重写" class="headerlink" title="方法重载与重写"></a>方法重载与重写</h3><table><thead><tr><th></th><th>方法重载</th><th>方法重写</th></tr></thead><tbody><tr><td>访问权限</td><td>不限</td><td>大于等于父类</td></tr><tr><td>方法名称</td><td>相同</td><td>相同</td></tr><tr><td>返回类型</td><td>不限</td><td>小于等于父类（基本类型相同）</td></tr><tr><td>参数</td><td>不同</td><td>相同</td></tr><tr><td>抛出异常</td><td>不限</td><td>编译时异常：小于等于父类，运行时异常无要求</td></tr><tr><td>静态</td><td>可以</td><td>不可以重写父类静态方法</td></tr></tbody></table><h3 id="再谈修饰符"><a href="#再谈修饰符" class="headerlink" title="再谈修饰符"></a>再谈修饰符</h3><table><thead><tr><th></th><th>本类</th><th>本包</th><th>其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>1</td><td></td><td></td><td></td></tr><tr><td>缺省（default）</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>protected</td><td>1</td><td>1</td><td>1</td><td></td></tr><tr><td>public</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><h3 id="6-super"><a href="#6-super" class="headerlink" title="6.super()"></a>6.super()</h3><ol><li>子类重写了父类的方法，在子类中需要通过super.才能调用父类被重写的方法。</li><li>子父类成员变量名一致，可以用this和super区别（<strong>阿里巴巴开发规范规定避免子父类重名的成员变量</strong>）</li><li>构造器：<ol><li>子类默认调用父类的无参构造器</li><li>当父类写了有参构造，无显式的无参构造，默认的无参构造会失效，子类无法调用父类的无参构造（编译出错）</li></ol></li></ol><h3 id="总结：this与super"><a href="#总结：this与super" class="headerlink" title="总结：this与super"></a>总结：this与super</h3><ul><li><strong>方法前面没有super.和this.</strong><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><strong>方法前面有this.</strong><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><strong>方法前面有super.</strong><ul><li>从当前子类的直接父类找，如果没有，继续往上追溯</li></ul></li></ul><h3 id="7-多态性-运行时多态"><a href="#7-多态性-运行时多态" class="headerlink" title="7.多态性(运行时多态)"></a>7.多态性(运行时多态)</h3><ol><li><p>概念：</p><p> 父类的引用指向子类的对象（<strong>编译时类型和运行时类型不一致，就出现了对象的多态性</strong>） <strong>eg： Father f &#x3D; new Son();</strong></p></li><li><p>使用： 多态的使用前提：① 类的继承关系 ② 方法的重写</p></li><li><p>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</p></li><li><p>多态情况下，</p><p> “看左边”：看的是父类的引用（父类中不具备子类特有的方法）<br> “看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</p></li><li><p>应用： <strong>虚方法调用</strong>，子类重写父类方法，Father f &#x3D; new Son();   son.eat(); <strong>编译时，认为是父类的方法</strong>，<strong>执行时，执行子类的重写方法</strong>，<strong>屏蔽了子类的特有属性和方法。</strong>（<strong>使用构造器注入子类特有属性</strong>）</p></li></ol><h4 id="5-易错"><a href="#5-易错" class="headerlink" title="5.易错"></a>5.<strong>易错</strong></h4><ol><li><strong>属性没有多态性</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestVariable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Base</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldMethodTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//20</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10，变量无多态性</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20，方法有多态性</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Object类"><a href="#8-Object类" class="headerlink" title="8.Object类"></a>8.Object类</h3><p>所有类的根父类；</p><h4 id="重点（equals与toString）"><a href="#重点（equals与toString）" class="headerlink" title="重点（equals与toString）"></a>重点（equals与toString）</h4><ol><li><p>equals（）与 &#x3D;&#x3D;</p><p><strong>&#x3D;&#x3D;</strong>  可以比较基本类型，也可以比较引用类型，基本类型比较值，引用类型比较内存地址。<strong>两边的数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错</strong></p><p><strong>equals()</strong> 属于Object类中的方法，默认是 &#x3D;&#x3D;，但是我们一般都会重写（比较属性值是否相等）</p></li><li><p>toString()</p><p>默认，toString() 返回  “ 对象的运行时类型 @ 对象的hashCode值的十六进制形式”。<strong>需要重写。</strong></p></li></ol><h3 id="9-static关键字"><a href="#9-static关键字" class="headerlink" title="9.static关键字"></a>9.static关键字</h3><p>可修饰<strong>属性，方法、代码块、内部类</strong></p><ol><li>静态变量VS实例变量</li></ol><table><thead><tr><th>属性</th><th>加载时机</th><th>内存位置</th><th>能否共享</th><th>调用者</th><th>消亡时机</th></tr></thead><tbody><tr><td>静态变量</td><td>类加载时实例化，实例化一次</td><td>jdk6及之前存放在方法区，jdk7以后存放在<strong>堆空间</strong></td><td>被多个对象共享</td><td>类、对象</td><td>随类的卸载死亡</td></tr><tr><td>实例变量</td><td>对象创建时加载</td><td>堆空间的对象实体中</td><td>否</td><td>对象</td><td>随对象的死亡</td></tr></tbody></table><ol start="2"><li><p>静态方法</p><table><thead><tr><th>方法</th><th>加载时机</th><th>内部属性、方法调用</th><th>调用</th><th>继承与重写</th><th>this&#x2F;super</th></tr></thead><tbody><tr><td>静态方法</td><td>类加载时</td><td>调用静态方法、属性</td><td>类.静态方法（）</td><td>可被继承，无法重写</td><td>无法使用</td></tr><tr><td>非静态方法</td><td></td><td>可调用静态与非静态属性方法</td><td></td><td></td><td></td></tr></tbody></table></li><li><p><strong>main方法(程序入口)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] = "</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​       与控制台交互的方法：<strong>1.Scanner类           2. mian方法形参传值</strong></p><ol start="4"><li><p>代码块</p><p>作用： <strong>初始化类或对象</strong></p></li></ol><table><thead><tr><th>代码块</th><th>执行时机</th><th>作用</th><th>内部属性、方法调用</th><th>this&#x2F;super</th></tr></thead><tbody><tr><td>静态代码块</td><td>随类的加载执行</td><td>初始化类信息</td><td>调用静态方法、属性</td><td>无法使用</td></tr><tr><td>非静态代码块</td><td>随对象的创建执行</td><td>初始化对象信息</td><td>可调用静态与非静态属性方法</td><td>可以使用</td></tr></tbody></table><p><strong>静态变量执行顺序：</strong> 初始化赋值 、代码块赋值（按照代码顺序执行）–（若有构造器里面修改了静态属性，即创建了对象之后获取值）构造器赋值</p><p><strong>实例变量执行顺序</strong>：初始化赋值、代码块赋值（按照代码顺序执行）– 构造器赋值 —-set（）赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//不会报错</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-final关键字"><a href="#10-final关键字" class="headerlink" title="10.final关键字"></a>10.final关键字</h3><table><thead><tr><th>修饰</th><th></th></tr></thead><tbody><tr><td>变量（常量，建议使用大写字母）</td><td>赋值后，不能修改值（引用对象的属性值可以改变）</td></tr><tr><td>方法</td><td>不能被重写</td></tr><tr><td>类</td><td>不能被继承</td></tr></tbody></table><h3 id="11-抽象类（abstract）"><a href="#11-抽象类（abstract）" class="headerlink" title="11.抽象类（abstract）"></a>11.抽象类（abstract）</h3><table><thead><tr><th></th><th>实例化</th><th>构造方法</th><th>抽象方法</th><th>子类的抽象方法</th></tr></thead><tbody><tr><td>抽象类</td><td>不可以</td><td>有（用于初始化父类成员变量）</td><td>可以没有</td><td>必须重写（编译无法通过）</td></tr></tbody></table><p>一般用于<strong>模板方法模式</strong></p><h3 id="12-接口-interface-接口可以继承接口（extends），支持多继承"><a href="#12-接口-interface-接口可以继承接口（extends），支持多继承" class="headerlink" title="12.接口(interface)    接口可以继承接口（extends），支持多继承"></a>12.接口(interface)    接口可以继承接口（extends），支持多继承</h3><table><thead><tr><th>成员</th><th>修饰符</th><th>时间</th><th>作用</th></tr></thead><tbody><tr><td>公共的静态常量</td><td>public static final可以省略</td><td>jdk8之前</td><td>接口是一个规范，规范中需要声明一些边界值</td></tr><tr><td>公共的抽象方法</td><td>public abstract可以省略</td><td>jdk8之前</td><td></td></tr><tr><td>公共的默认的方法</td><td>public 可以省略，建议保留，但是default不能省略</td><td>jdk8</td><td>1.接口中的某个抽象方法，在实现类中有多行共同代码                     2.修改旧接口提供新方法会有兼容性问题</td></tr><tr><td>公共的静态的方法</td><td>public 可以省略，建议保留，但是static不能省略</td><td>jdk8</td><td>某些接口的实现类中有一些静态方法，这些方法为接口服务，直接定义到接口中更加方便</td></tr><tr><td>私有方法</td><td></td><td>jdk9</td><td>默认方法和静态方法这样具有具体实现的方法，可能有公共代码，所以设置为私有方法，供接口内部使用</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态常量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//int i  = 10;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// void get1();</span><span class="token comment">//默认方法</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//public default voud get2()&#123;&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//public static void get3()&#123;&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//私有方法</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">get4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>接口与抽象类</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB.png"></p></li></ol><h3 id="13-内部类"><a href="#13-内部类" class="headerlink" title="13.内部类"></a>13.内部类</h3><ol><li><p>分类</p><p><strong>成员内部类：                                                                   静态成员内部类</strong></p><p>（声明在外部类内）                                                       <strong>非静态成员内部类</strong></p></li></ol><p>​       <strong>局部内部类：                                                                   非匿名局部内部类</strong></p><p>​        （声明在方法、构造器、代码块内）                            <strong>匿名局部内部类</strong></p><h4 id="2-成员内部类"><a href="#2-成员内部类" class="headerlink" title="2.成员内部类"></a>2.成员内部类</h4><ol><li>声明为abstract类，可以被继承</li></ol><p>​           2.声明为final，表示不能被继承</p><p>​           3. 可以使用外部类的私有属性</p><h4 id="3-局部内部类（不能有权限修饰符）"><a href="#3-局部内部类（不能有权限修饰符）" class="headerlink" title="3.局部内部类（不能有权限修饰符）"></a>3.局部内部类（不能有权限修饰符）</h4><p><strong>非匿名内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 外部类<span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型  方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">[</span><span class="token keyword">final</span><span class="token operator">/</span><span class="token keyword">abstract</span><span class="token punctuation">]</span> <span class="token keyword">class</span> 内部类<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​      <strong>匿名内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 父接口<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    重写方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 父类<span class="token punctuation">(</span><span class="token punctuation">[</span>实参列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    重写方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="14-枚举类（私有化构造器）"><a href="#14-枚举类（私有化构造器）" class="headerlink" title="14.枚举类（私有化构造器）"></a>14.枚举类（<strong>私有化构造器</strong>）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开发中，当需要定义一组常量时，强烈建议使用枚举类。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>概念</p><p>枚举类型本质上也是一种类，只不过是这个类的对象是有限的、固定的几个，不能让用户随意创建。</p></li><li><p>实现</p><p>在JDK5.0 之前，需要程序员自定义枚举类型。<br>在JDK5.0 之后，Java支持enum关键字来快速定义枚举类型。</p></li><li><p>实现步骤（5.0之前）</p><ol><li><strong>私有化构造器</strong></li><li>创建实例：public static final</li><li>对象如果有实例变量，应该声明为private final（建议，不是必须），并在构造器中初始化</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span><span class="token comment">//季节的名称</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span><span class="token comment">//季节的描述</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONNAME</span> <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONDESC</span> <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"白雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"SEASONNAME='"</span> <span class="token operator">+</span> <span class="token constant">SEASONNAME</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", SEASONDESC='"</span> <span class="token operator">+</span> <span class="token constant">SEASONDESC</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.0之后</strong>（enum）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用逗号隔开</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token constant">AUTUMN</span> <span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"白雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span><span class="token comment">//季节的名称</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span><span class="token comment">//季节的描述</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONNAME</span> <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONDESC</span> <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSEASONNAME</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSEASONDESC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"SEASONNAME='"</span> <span class="token operator">+</span> <span class="token constant">SEASONNAME</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", SEASONDESC='"</span> <span class="token operator">+</span> <span class="token constant">SEASONDESC</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>默认父类 ：java.lang.Enum</p></li><li><p>常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 默认返回的是常量名（对象名），可以继续手动重写该方法！    <span class="token keyword">static</span> 枚举类型<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值，是一个静态方法<span class="token comment">//Season[] values = Season.values();</span>  <span class="token comment">//      for (Season s: values) &#123;</span>  <span class="token comment">//          System.out.println(s);</span>  <span class="token comment">//      &#125;</span>    <span class="token keyword">static</span> 枚举类型 <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：<span class="token class-name">IllegalArgumentException</span>。   <span class="token comment">// Season spring = Season.valueOf("SPRING");</span><span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>得到当前枚举常量的名称。建议优先使用<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。    <span class="token keyword">int</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回当前枚举常量的次序号，默认从<span class="token number">0</span>开始  <span class="token comment">//  System.out.println(spring.ordinal());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、枚举类可以像普通的类一样，实现接口，并且可以多个，但要求必须实现里面所有的抽象方法！</span><span class="token keyword">enum</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> 接口<span class="token number">1</span>，接口<span class="token number">2</span><span class="token punctuation">&#123;</span><span class="token comment">//抽象方法的实现</span><span class="token punctuation">&#125;</span><span class="token comment">//2、如果枚举类的常量可以继续重写抽象方法!</span><span class="token keyword">enum</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> 接口<span class="token number">1</span>，接口<span class="token number">2</span><span class="token punctuation">&#123;</span>    常量名<span class="token function">1</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//抽象方法的实现或重写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    常量名<span class="token function">2</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//抽象方法的实现或重写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="15-注解（Annotation）"><a href="#15-注解（Annotation）" class="headerlink" title="15.注解（Annotation）"></a>15.注解（Annotation）</h3><ol><li><p>基本注解</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Override</td><td>标记为重写方法，（不是编译错误）</td></tr><tr><td>@Deprecated</td><td>标记为过时方法、属性、构造、类、包、参数</td></tr><tr><td>@SuppressWarnings</td><td>抑制编译警告。属性、构造、类、包、参数</td></tr></tbody></table></li><li><p><strong>元注解</strong></p></li></ol><table><thead><tr><th>注解</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td>@Target</td><td>描述注解使用范围</td><td>枚举类型ElementType的10个常量对象{TYPE，METHOD，CONSTRUCTOR，PACKAGE…}</td></tr><tr><td>@Retention</td><td>描述注解生命周期</td><td>枚举类型RetentionPolicy的3个常量对象{SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）}</td></tr><tr><td>@Document</td><td>应该被javadoc记录</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="16-包装类（默认：null）"><a href="#16-包装类（默认：null）" class="headerlink" title="16.包装类（默认：null）"></a>16.包装类（默认：null）</h3><ol><li>原因： 泛型的使用及API的使用</li></ol><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%8C%85%E8%A3%85%E7%B1%BB.png"></p><ol start="2"><li><p>包装类的缓存对象（在包装类中有对应数组，若赋值小于此范围则从数组中取），（在静态代码块实现）（常量池：存储在方法区）</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1.png"></p></li><li><pre><code class="java">Integer i = 128;Integer j = 128;System.out.println(i == j);//falseInteger m = new Integer(1);//新new的在堆中Integer n = 1;//这个用的是缓冲的常量对象，在方法区System.out.println(m == n);//falseInteger x = new Integer(1);//新new的在堆中Integer y = new Integer(1);//另一个新new的在堆中System.out.println(x == y);//falseInteger i = 1;Double d = 1;//错误的，1是int类型double d = 1; //正确Object o1 = true ? new Integer(1) : new Double(2.0);        //默认调用toString方法        System.out.println(o1);//1.0 三目运算符比较基本数据类型，所以在编译阶段自动拆箱为 int 和 double 类型，由于三目运算符要求 表达式2 和 表                                  达式3 类型一致，所以在编译阶段自动类型提升（即 int 自动类型转换为 double 类型），再自动装箱为Object，输出时使                                 用多态调用重写的toString();即Double包装类的toString();<pre class="line-numbers language-none"><code class="language-none">   ## 五、异常![](https:&#x2F;&#x2F;gitee.com&#x2F;mr-poke&#x2F;picture&#x2F;raw&#x2F;master&#x2F;img&#x2F;%E5%BC%82%E5%B8%B8.png)### 1.Error（java.lang.Error）JVM无法处理的严重问题，一般不编写针对性的代码处理。- StackOverflowError（栈内存溢出）和OutOfMemoryError（堆内存溢出，简称OOM）。### 2.Exception（java.lang.Exception）因编程错误或偶然的外在因素导致的问题。 需要是有针对性的代码处理。分类：**编译时异常（受检）、运行时异常（非受检）**#### 1. 编译时异常：（一定处理，否则编译不通过）ClassNotFoundException（找不到指定类）FileNotFoundException（文件找不到）IOException（IO流异常）#### 2. 运行时异常（根据异常修改代码，捕捉后可以正常运行，但是会报错）ArrayIndexOutBoundsException (数组下标越界)NullPointerException（空指针异常）ClassCastException（强制类型转换异常）NumberFormatException（数字格式异常）InputMistchException（输入错误异常）ArithmeticException（算数异常）### 3.异常处理#### 1. try-catch-finally（进行异常处理，调用者处理捕捉，出现异常，正常运行）一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为**捕获(catch)异常**。**一个异常回到main()方法，并且main()也不处理，则程序运行终止。**##### 重点：**finally一定会执行。在catch中有return，finally也会执行（finally中有return，则catch中的return不执行）**&#96;&#96;&#96;java public static void main(String[] args) &#123;        System.out.println(test());     &#x2F;&#x2F;2    &#125;    public static int test()&#123;        int i&#x3D;0;        try&#123;            return i++;             &#x2F;&#x2F;i++，先使用后自增，所以此时i &#x3D; 0 ，返回时进行了finally        &#125;finally&#123;            &#x2F;&#x2F;两种情况分析（有无return）           &#x2F;&#x2F; return ++i;            &#x2F;&#x2F; ++i，先自增后使用，所有此时i &#x3D; i+1(1+1) &#x3D; 2 ，返回 2                      &#x2F;&#x2F; ++i;                    &#x2F;&#x2F;没有return，此时i&#x3D; i+1(1+1)&#x3D;2。但是finally中我们只是对i++进行了自增。try中的return 还是得返回0        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h4 id="2-throws-异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）"><a href="#2-throws-异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）" class="headerlink" title="2.throws + 异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）"></a>2.throws + 异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）</h4><h5 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h5><ul><li>如果<strong>父类被重写方法的方法签名后面没有 “throws 编译时异常类</strong>型”，<strong>那么重写方法时，</strong>方法签名后面也<strong>不能出现“throws 编译时异常类型”。</strong></li><li>如果<strong>父类被重写方法的方法签名后面有 ，那么重写方法时，throws的编译时异常类型必须 &lt;&#x3D; 被重写方法throws的编译时异常类型，或者不throws编译时异常。</strong></li><li>方法重写，对于“<strong>throws 运行时异常类型</strong>”没有要求。</li></ul><h4 id="3-两种异常处理方式的选择"><a href="#3-两种异常处理方式的选择" class="headerlink" title="3.两种异常处理方式的选择"></a>3.两种异常处理方式的选择</h4><ol><li>涉及资源调用，使用try-catch</li><li>父类被重写方法无throws，子类使用try-catch</li><li>方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。</li></ol><h3 id="4-throw（抛出异常，代码不执行）"><a href="#4-throw（抛出异常，代码不执行）" class="headerlink" title="4.throw（抛出异常，代码不执行）"></a>4.throw（抛出异常，代码不执行）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用场景：</p><p>在java中，我们需要自定义的场景下（如：输入不能为负数）使用。</p><h3 id="5-三者区别"><a href="#5-三者区别" class="headerlink" title="5.三者区别"></a>5.三者区别</h3><table><thead><tr><th></th><th>作用</th><th>如何处理</th><th></th><th>位置</th><th>重写方法的异常问题</th></tr></thead><tbody><tr><td>try-catch</td><td>捕捉异常</td><td>catch处理</td><td>在try中的异常（包括方法中的throw和throws），代码正常执行</td><td>代码中</td><td></td></tr><tr><td>throws</td><td>捕捉异常</td><td>抛出（不处理，交由调用者处理）</td><td>不执行</td><td>方法上声明</td><td>父类未写throws编译时异常，子类无法写，父类写了编译时异常，子类的编译时异常不能大于父类（也可不写）</td></tr><tr><td>throw</td><td>抛出异常</td><td>手动抛出</td><td>不执行(后续代码编译不通过)</td><td>代码中</td><td></td></tr></tbody></table><h3 id="6-自定义异常（只能throw抛出）"><a href="#6-自定义异常（只能throw抛出）" class="headerlink" title="6. 自定义异常（只能throw抛出）"></a>6. 自定义异常（只能throw抛出）</h3><h4 id="1-自定义一个编译时异常类型：自定义类继承java-lang-Exception。"><a href="#1-自定义一个编译时异常类型：自定义类继承java-lang-Exception。" class="headerlink" title="1.自定义一个编译时异常类型：自定义类继承java.lang.Exception。"></a>1.自定义一个编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</h4><h4 id="2-自定义一个运行时异常类型：自定义类继承java-lang-RuntimeException。"><a href="#2-自定义一个运行时异常类型：自定义类继承java-lang-RuntimeException。" class="headerlink" title="2.自定义一个运行时异常类型：自定义类继承java.lang.RuntimeException。"></a>2.自定义一个运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code>。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">23423423435L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> idnumber<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idnumber <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> idnumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a>六、多线程</h3><h4 id="1-程序、进程与线程"><a href="#1-程序、进程与线程" class="headerlink" title="1.程序、进程与线程"></a>1.程序、进程与线程</h4><p><strong>程序</strong>：用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><p><strong>进程</strong>：程序的一次执行过程，或是正在内存中运行的应用程序</p><p>​           <strong>操作系统调度和分配资源的最小单位</strong></p><p><strong>线程 ：</strong>一个进程同一时间若并行执行多个线程，就是支持多线程的。 <strong>CPU调度和执行的最小单位。</strong></p><h4 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2.线程调度"></a>2.线程调度</h4><ol><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，并且平均分配每个线程占用 CPU 的时间</p></li><li><p>抢占式调度</p><p>让优先级高的线程以较大的概率优先使用 CPU。如果线程的优先级相同，那么会随机选择一个(线程随机性)，J<strong>ava使用的为抢占式调度。</strong></p></li></ol><h4 id="3-多线程程序优点："><a href="#3-多线程程序优点：" class="headerlink" title="3.多线程程序优点："></a>3.多线程程序优点：</h4><ol><li><p>提高程序响应。</p></li><li><p>提高CPU利用率</p></li><li><p>改善程序结构，将长又复杂的进程分为多个线程，独立运行。便于理解和修改</p></li></ol><h4 id="4-并行与并发"><a href="#4-并行与并发" class="headerlink" title="4.并行与并发"></a>4.并行与并发</h4><p><strong>并行：</strong> 两个或多个时间<strong>同一时刻</strong>发生。（同一时刻，多条指令在多个CPU上同时执行）</p><p><strong>并发</strong>： 两个或多个时间在<strong>同一时间段</strong>发生，在一段时间内。多条指令在单个CPU上快速轮换、交替执行，在宏观上有多个线程同时执行的效果。</p><h4 id="5-创建线程"><a href="#5-创建线程" class="headerlink" title="5.创建线程"></a>5.创建线程</h4><p>1.run()为线程执行体，start（）方法启动线程</p><h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式:"></a>创建线程的方式:</h4><ol><li><p><strong>继承Thread类</strong></p><p>run()方法只是普通方法（可多次调用），start（）是线程启动方法（只能调用一次）。</p></li><li><p><strong>实现Runnable接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> i  <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token keyword">null</span>，“线程<span class="token number">1</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实现Callable接口</strong>（call方法）</p><p>相比Runnable接口<strong>优点</strong>：有返回值，可以抛出异常，支持泛型返回值（借助FutureTask类）</p><p><strong>缺点</strong>： 效率较低</p></li><li><p><strong>线程池</strong></p></li></ol><h4 id="6-线程常用方法："><a href="#6-线程常用方法：" class="headerlink" title="*6.线程常用方法："></a>*6.线程常用方法：</h4><ol><li><p>start():  <strong>线程启动方法（只能用一次），JVM调用run（）</strong></p></li><li><p>run() ：<strong>线程执行体，普通方法，start()时调用</strong></p></li><li><p>getName()：<strong>获取当前线程名字</strong></p></li><li><p>setName()：<strong>设置线程名字</strong></p></li><li><p>join()：<strong>在线程a中b.join()，a进入阻塞状态，直到b执行完毕，a继续执行。</strong></p></li><li><p>join（long millis）: <strong>等待该线程终止的时间最长为 millis 毫秒。如果millis时间到，将不再等待。</strong></p></li><li><p>isAlive()：<strong>判断线程是否存活</strong></p></li><li><p>stop() ： <strong>结束线程执行，进入死亡状态</strong></p></li><li><p>suspend() : <strong>暂停线程，不释放锁资源 （过时）</strong></p></li><li><p>resume（）：<strong>继续线程执行，8、9一块使用（过时）</strong></p></li></ol><p>   <strong>线程优先级：</strong></p><table><thead><tr><th>常量</th><th>数值</th><th>优先级</th></tr></thead><tbody><tr><td>MAX_PRIORITY</td><td>10</td><td>最高</td></tr><tr><td>MIN_PRIORITY</td><td>1</td><td>最低</td></tr><tr><td>NORM_PRIORITY</td><td>5</td><td>普通，mian默认具有普通优先级</td></tr></tbody></table><ol><li>getPriority() : 获取线程优先级</li><li>setPriority()：修改线程优先级</li></ol><p><strong>静态方法</strong>：</p><ol><li><p>currentThread()：<strong>获取当前执行代码对应的线程对象</strong></p></li><li><p>sleep(参数)：<strong>休眠当前线程</strong>，使当前执行的线程以<strong>指定毫秒数</strong>暂停。<strong>不会释放锁</strong></p></li><li><p>yield()（读：”又的“）：<strong>暂停当前线程，回到就绪状态</strong>，使线程调度器重新调度，让当前优先级的多个线程抢占执行。</p></li></ol><h4 id="7-用到的设计模式"><a href="#7-用到的设计模式" class="headerlink" title="7.用到的设计模式"></a>7.用到的设计模式</h4><p><strong>代理模式</strong>：</p><p>Thread类内部使用了代理模式，将Runnable接口作为属性封装到类中，在run()中，判断Runnable接口是否赋值，若为空，则使用默认的，不为空，则使用属性值</p><h4 id="8-守护线程"><a href="#8-守护线程" class="headerlink" title="8.守护线程"></a>8.守护线程</h4><p>为其他线程提供服务，如JVM的垃圾回收线程。</p><p><strong>特点：</strong>若所有非守护线程死亡，则守护线程也死亡</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>方法可将指定线程设置为守护线程<span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以判断线程是否是守护线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="9-线程生命周期"><a href="#9-线程生命周期" class="headerlink" title="*9.线程生命周期"></a>*9.线程生命周期</h4><ol><li><p><strong>jdk1.5之前</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1.5%E4%B9%8B%E5%89%8D.png"></p></li><li><p><strong>JDK1.6及以后</strong></p></li></ol><p>在Thread类中有一个枚举类state</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>       <span class="token constant">NEW</span><span class="token punctuation">,</span>     <span class="token comment">//就绪 new </span>        <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>    <span class="token comment">//锁阻塞 blocked</span>    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>   <span class="token comment">//可运行(就绪，运行)</span>    <span class="token constant">WAITING</span><span class="token punctuation">,</span>     <span class="token comment">//无限等待   waiting</span>    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>  <span class="token comment">//计时等待 timed_waiting</span>        <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>    <span class="token comment">//死亡 terminated</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%AE%8C%E6%95%B4.png"></p><h4 id="10-线程安全"><a href="#10-线程安全" class="headerlink" title="*10.线程安全"></a>*10.线程安全</h4><h5 id="1-synchronized"><a href="#1-synchronized" class="headerlink" title="1.synchronized"></a>1.synchronized</h5><ol><li><p>同步代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//同步监视器也叫锁</span>    <span class="token comment">//需要同步的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>同步方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//可能会产生线程安全问题的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.synchronnized锁原理</p><p>​    <strong>静态方法</strong>：当前类的Class对象（类.class）</p></li></ol><p>​           <strong>非静态方法</strong>：this，当前对象</p><h5 id="2-Lock锁"><a href="#2-Lock锁" class="headerlink" title="2.Lock锁"></a>2.Lock锁</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//2. 调动lock()，实现需共享的代码的锁定</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//保证线程安全的代码;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token comment">//3. 调用unlock()，释放共享代码的锁定</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-Lock与synchronized的区别"><a href="#3-Lock与synchronized的区别" class="headerlink" title="3.Lock与synchronized的区别"></a>3.Lock与synchronized的区别</h5><table><thead><tr><th></th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>来源</td><td>JDK</td><td>代码实现（JDK1.5），使用场景更多</td></tr><tr><td>使用</td><td>代码块，方法</td><td>a &#x3D; new ();     try{a.lock()}finally{a.unlock();}</td></tr><tr><td>获取锁</td><td>synchronized一直获取锁</td><td>选择性的获取锁，如果一段时间获取不到，可以放弃</td></tr><tr><td>锁状态</td><td>不可查看</td><td>可判断是否获取到</td></tr><tr><td>释放</td><td>自动</td><td>手动（unlock）</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="11-死锁"><a href="#11-死锁" class="headerlink" title="*11.死锁"></a>*11.死锁</h4><ol><li><p><strong>不同的线程分别占用对方需要的同步资源</strong>不放弃，都在<strong>等待对方放弃自己需要的同步资源</strong>，就形成了线程的死锁。</p></li><li><p><strong>死锁的四个条件：</strong></p><ol><li><p><strong>互斥条件</strong></p></li><li><p><strong>占用且等待</strong></p></li><li><p><strong>不可抢夺（或不可抢占）</strong></p></li><li><p><strong>循环等待</strong></p></li></ol></li></ol><table><thead><tr><th>条件</th><th>概念</th><th>解决方法</th></tr></thead><tbody><tr><td>互斥条件</td><td>两个线程无法同时占用一个对象</td><td>无</td></tr><tr><td>占用且等待</td><td>a线程占用一定资源，等待b的资源，而b等待a线程资源的释放</td><td>一次性申请所需资源</td></tr><tr><td>不可抢夺（或不可抢占）</td><td>a线程无法抢夺b线程占有的资源</td><td>a线程释放现有资源</td></tr><tr><td>循环等待</td><td>a等待b，b等待a</td><td>为资源排序，申请资源时，先申请序号较小的</td></tr></tbody></table><h4 id="12-线程通信"><a href="#12-线程通信" class="headerlink" title="12.线程通信"></a>12.线程通信</h4><p><strong>需要多个线程有顺序的共同完成一个任务</strong></p><p>通信方法（<strong>只能使用于synchronized的同步代码块和同步方法</strong>）：</p><table><thead><tr><th>方法</th><th>作用</th><th>是否释放锁</th><th>备注</th></tr></thead><tbody><tr><td>wait(),wait(long time)</td><td>线程进入等待状态</td><td>释放锁</td><td>1. 可以有参数 2. Object类中定义</td></tr><tr><td>notify()</td><td>选取一个高优先级的wait线程唤醒（等优先级随机唤醒）</td><td></td><td>Object类中定义</td></tr><tr><td>notifyAll()</td><td>唤醒所有wait线程</td><td></td><td></td></tr></tbody></table><h5 id="区分sleep-和wait"><a href="#区分sleep-和wait" class="headerlink" title="区分sleep()和wait():"></a>区分sleep()和wait():</h5><p>相同点：一旦执行，都会使得当前线程结束执行状态，进入阻塞状态。</p><p>不同点：</p><p> ① 定义方法所属的类：sleep():Thread中定义。 wait():Object中定义</p><p> ② 使用范围的不同：sleep()可以在任何需要使用的位置被调用； <strong>wait():必须使用在同步代码块或同步方法中</strong></p><p> ③ 都在同步结构中使用的时候，是否释放同步监视器的操作不同：sleep():不会释放同步监视器 ;wait():会释放同步监视器</p><p> ④ 结束等待的方式不同：sleep()：指定时间一到就结束阻塞。 wait():可以指定时间 也可以无限等待直到notify或notifyAll。</p><p><strong>生产者消费者问题：</strong></p><p>多线程：生产者，消费者</p><h2 id="六、常用API"><a href="#六、常用API" class="headerlink" title="六、常用API"></a>六、常用API</h2><h3 id="1-String类（final修饰的类）"><a href="#1-String类（final修饰的类）" class="headerlink" title="1.String类（final修饰的类）"></a>1.String类（final修饰的类）</h3><h4 id="1-底层"><a href="#1-底层" class="headerlink" title="1.底层"></a>1.底层</h4><p>jdk9及以后，<strong>底层是字节数组</strong>（byte[] value）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//final修饰，不可变</span>    <span class="token annotation punctuation">@Stable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字符串常量池"><a href="#2-字符串常量池" class="headerlink" title="2.字符串常量池"></a>2.字符串常量池</h4><p><strong>字符串常量存储位置</strong></p><p>不允许存放相同的字符串常量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>                                  <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>                                 <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//new String(a),new String(b);</span>                                                <span class="token comment">// new StringBuilder().append("a").append("b").toString()</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>                                <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span><span class="token string">"b"</span><span class="token punctuation">;</span>                            <span class="token comment">//在javac 编译优化</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>                               <span class="token comment">//new StringBuilder().append("a").append("b").toString()</span><span class="token class-name">String</span> s7 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//尝试将字符串加入常量池，若有则不加，若无则加入，并将池中的对象返回</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false                     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>存储位置</strong></p><table><thead><tr><th>jdk版本</th><th>存放位置</th><th>原因</th></tr></thead><tbody><tr><td>jdk7之前</td><td>方法区（永久代）(元空间)</td><td>GC考虑</td></tr><tr><td>jdk7之后</td><td>堆空间</td><td></td></tr></tbody></table><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a><strong>重点</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">（<span class="token number">1</span>）常量<span class="token operator">+</span>常量：结果是常量池。且常量池中不会存在相同内容的常量。（<span class="token number">2</span>）常量与变量 或 变量与变量：结果在堆中（<span class="token number">3</span>）拼接后调用intern方法：返回值在常量池中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-String-s-x3D-“abc”-与String-s-x3D-new-String-“abc”-区别？"><a href="#3-String-s-x3D-“abc”-与String-s-x3D-new-String-“abc”-区别？" class="headerlink" title="3.String s &#x3D; “abc” 与String s &#x3D; new String(“abc”)区别？"></a>3.String s &#x3D; “abc” 与String s &#x3D; new String(“abc”)区别？</h4><p>String s &#x3D;”abc”,存放在字符串常量池中（1.6在方法区，1.8之后在本地内存中）</p><p>String s &#x3D; new String（”abc”）在堆中创建String对象，然后指向了字符串常量池中的“abc”，最后返回了s的内存地址</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/String%E4%BE%8B%E5%AD%90.png"></p><h4 id="4-易错例子"><a href="#4-易错例子" class="headerlink" title="4. 易错例子"></a>4. 易错例子</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//不会改变，因为是形参修改了</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringTest</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str <span class="token operator">+</span> <span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-常用API"><a href="#5-常用API" class="headerlink" title="5.常用API"></a>5.常用API</h4><table><thead><tr><th>构造器方法</th><th>作用</th></tr></thead><tbody><tr><td>String（）</td><td></td></tr><tr><td>String(String s)</td><td></td></tr><tr><td>String(char[] value)</td><td></td></tr><tr><td>String(char[] value,int offset,int count)</td><td>选择一部分转换String</td></tr><tr><td>String(byte[] byte)</td><td>使用默认字符集解码</td></tr><tr><td>String（byte[] byte,String charsetName）</td><td>使用指定字符集解码</td></tr></tbody></table><h5 id="5-1-类型转换"><a href="#5-1-类型转换" class="headerlink" title="5.1 类型转换"></a>5.1 类型转换</h5><ol><li><p>int —&gt; String :    String.valueOf(i)</p><p>​                             Integer.toString(i);</p></li><li><p>String —&gt; int:    String.valueOf(i)</p><p>​                            Integer.parseInt(Stirng s)</p></li><li><p>字符数组 —&gt; 字符串：  构造器</p><p>​                                        Arrays.toString(ch)</p></li><li><p>字符串 —&gt; 字符数组：s.toCharArray()</p></li></ol><p>​                                               getChars(int Begin,End,char[],数组中的偏移量)                                   </p><ol start="5"><li><p>字节数组 —&gt; 字符串： s.getBytes(); 可选新参，表示字符集</p></li><li><p>字符串 —&gt; 字节数组： 构造器</p><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>空？</td><td></td></tr><tr><td>int length()</td><td>长度</td><td></td></tr><tr><td>String concat(xx)</td><td>连接字符串</td><td></td></tr><tr><td>boolean equals(Object obj)</td><td>区分大小写</td><td></td></tr><tr><td>boolean equalsIgnoreCase(Object obj)</td><td>不区分大小写</td><td></td></tr><tr><td>int compareTo(String other)</td><td>比较大小，按照Unicode</td><td></td></tr><tr><td>StringtoLowerCase()</td><td>转换小写</td><td></td></tr><tr><td>String toUpperCase()</td><td>转换大写</td><td></td></tr><tr><td>String trim()</td><td>去掉首尾空白字符</td><td></td></tr><tr><td>String intern()</td><td>将字符串放到常量池中</td><td></td></tr></tbody></table></li></ol><h5 id="5-2查找"><a href="#5-2查找" class="headerlink" title="5.2查找"></a>5.2<strong>查找</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean contains（xx）</td><td>是否包含</td><td></td></tr><tr><td>int indexOf(xx)</td><td>返回字符串xx第一次出现的位置</td><td></td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>返回字符串第一次出现的索引，从指定索引开始</td><td></td></tr><tr><td>int lastIndexOf(xx)</td><td>返回最后一次出现的位置</td><td></td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>返回字符串最后以次出现的索引，从指定索引开始</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="5-3截取："><a href="#5-3截取：" class="headerlink" title="5.3截取："></a>5.3<strong>截取：</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>String substring(int beginIndex)</td><td>返回从索引到最后的字符串</td><td></td></tr><tr><td>String substring(int beginIndex, int endIndex)</td><td>返回指定区间的（前包，后不包）</td><td></td></tr></tbody></table><h5 id="5-4判断开头结尾"><a href="#5-4判断开头结尾" class="headerlink" title="5.4判断开头结尾"></a>5.4<strong>判断开头结尾</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean startsWith(xx)</td><td>是否以指定字符串开头</td><td></td></tr><tr><td>boolean startsWith(String prefix, int toffset)</td><td>指定索引开始的字符是否以指定前缀开始</td><td></td></tr><tr><td>boolean endsWith(xx)</td><td>是否以指定字符串结尾</td><td></td></tr></tbody></table><h5 id="5-5替换"><a href="#5-5替换" class="headerlink" title="5.5替换"></a>5.5<strong>替换</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>String replace(char oldChar, char newChar)</td><td>替换</td><td></td></tr><tr><td>tring replaceAll(String regex, String replacement)</td><td>替换所有</td><td></td></tr><tr><td>String replaceFirst(String regex, String replacement)：</td><td>替换第一个</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="2-StringBuffer与StringBuilder"><a href="#2-StringBuffer与StringBuilder" class="headerlink" title="2.StringBuffer与StringBuilder"></a>2.StringBuffer与StringBuilder</h3><table><thead><tr><th></th><th>不可变</th><th>继承性</th><th>线程安全</th><th>效率</th><th>底层</th><th>父类</th></tr></thead><tbody><tr><td>String</td><td>final修饰的数组，不可变</td><td>final修饰类，不可被继承</td><td>fina修饰的数组，视为常量，线程安全</td><td></td><td>JDK8及之前，char[], JDK9以后byte[]</td><td></td></tr><tr><td>StringBuffer</td><td>无final修饰的数组，可变</td><td>一致</td><td>线程安全，</td><td>较低</td><td>一致</td><td>AbstractStringBuilder抽象类，声明数组</td></tr><tr><td>StringBuilder</td><td>无final修饰的数组，可变</td><td>一致</td><td>线程不安全</td><td>较高</td><td>一致</td><td>AbstractStringBuilder抽象类，声明数组</td></tr></tbody></table><h5 id="1-String与Stringbuffer和StringBuilder创建对象的区别"><a href="#1-String与Stringbuffer和StringBuilder创建对象的区别" class="headerlink" title="1.String与Stringbuffer和StringBuilder创建对象的区别"></a>1.String与Stringbuffer和StringBuilder创建对象的区别</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char[] c = new char[3]&#123;'a','b','c'&#125;;（jdk8及以前）</span><span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  默认创建长度为16的数组，若有参数，则“abc”.length() +16</span>s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//长度超过最初定义的长度，默认扩容，扩容一倍+2， 如果还不够，扩容需要的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-StringBuffer与StringBuilder继承关系"><a href="#2-StringBuffer与StringBuilder继承关系" class="headerlink" title="2.StringBuffer与StringBuilder继承关系"></a>2.StringBuffer与StringBuilder继承关系</h5><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/String%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h5 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h5><pre class="line-numbers language-none"><code class="language-none">常用API（1）StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加的方式拼接（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符（4）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str（5）void setCharAt(int index, char c)：替换[index]位置字符（6）char charAt(int index)：查找指定index位置上的字符（7）StringBuffer insert(int index, xx)：在[index]位置插入xx（8）int length()：返回存储的字符数据的长度（9）StringBuffer reverse()：反转其他：（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标（5）String substring(int start)：截取当前字符序列[start,最后]（6）String substring(int start, int end)：截取当前字符序列[start,end)（7）String toString()：返回此序列中数据的字符串表示形式（8）void setLength(int newLength) ：设置当前字符序列长度为newLength<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-日期API"><a href="#3-日期API" class="headerlink" title="3.日期API"></a>3.日期API</h3><p><strong>LocalDate,LocalTime,LocalDateTime</strong></p><pre class="line-numbers language-none"><code class="language-none">now()&#x2F; now(ZoneId zone)静态方法，根据当前时间创建对象&#x2F;指定时区的对象of(xx,xx,xx,xx,xx,xxx)静态方法，根据指定日期&#x2F;时间创建对象getDayOfMonth()&#x2F;getDayOfYear()获得月份天数(1-31) &#x2F;获得年份天数(1-366)getDayOfWeek()获得星期几(返回一个 DayOfWeek 枚举值)getMonth()获得月份, 返回一个 Month 枚举值getMonthValue() &#x2F; getYear()获得月份(1-12) &#x2F;获得年份getHours()&#x2F;getMinute()&#x2F;getSecond()获得当前对象对应的小时、分钟、秒withDayOfMonth()&#x2F;withDayOfYear()&#x2F;withMonth()&#x2F;withYear()将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象with(TemporalAdjuster t)将当前日期时间设置为校对器指定的日期时间plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()向当前对象添加几天、几周、几个月、几年、几小时minusMonths() &#x2F; minusWeeks()&#x2F;minusDays()&#x2F;minusYears()&#x2F;minusHours()从当前对象减去几月、几周、几天、几年、几小时plus(TemporalAmount t)&#x2F;minus(TemporalAmount t)添加或减少一个 Duration 或 PeriodisBefore()&#x2F;isAfter()比较两个 LocalDateisLeapYear()判断是否是闰年（在LocalDate类中声明）format(DateTimeFormatter t)格式化本地日期、时间，返回一个字符串parse(Charsequence text)将指定格式的字符串解析为日期、时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Comparable与Comparator比较器"><a href="#4-Comparable与Comparator比较器" class="headerlink" title="4.Comparable与Comparator比较器"></a>4.Comparable与Comparator比较器</h3><table><thead><tr><th></th><th>排序规则</th><th>方法</th><th>用法</th><th></th></tr></thead><tbody><tr><td>Comparable</td><td>自然排序：java.lang.Comparable</td><td>int compareTo(Object obj)</td><td>在实体类中重写比较方法</td><td></td></tr><tr><td>Comparator</td><td>定制排序：java.util.Comparator</td><td>int compare(Object o1,Object o2)</td><td>重新定义比较器</td><td>（o1 -o2 为升序，o2-o1为降序）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//数组中的索引为1的比较其他，然后2比较。。。。。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Lambda</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>     <span class="token comment">//this与o比，若>0,则位置不变，若&lt;0则不位置交换</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-BigDecimal"><a href="#5-BigDecimal" class="headerlink" title="5.BigDecimal"></a>5.BigDecimal</h3><ul><li>构造器<ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val) –&gt; 推荐</li></ul></li><li>常用方法<ul><li>public BigDecimal <code>add</code>(BigDecimal augend)</li><li>public BigDecimal <code>subtract</code>(BigDecimal subtrahend)</li><li>public BigDecimal <code>multiply</code>(BigDecimal multiplicand)</li><li>public BigDecimal <code>divide</code>(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP :向上加1、ROUND_DOWN :直接舍去、ROUND_HALF_UP:四舍五入）</li></ul></li></ul><h2 id="七、集合框架（Collenction和Map接口）"><a href="#七、集合框架（Collenction和Map接口）" class="headerlink" title="七、集合框架（Collenction和Map接口）"></a>七、集合框架（Collenction和Map接口）</h2><p><strong>Collection接口结构图：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Collection.png"></p><p><strong>Map接口结构图：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Map%E6%8E%A5%E5%8F%A3.png"></p><h3 id="一、Collection接口"><a href="#一、Collection接口" class="headerlink" title="一、Collection接口"></a>一、Collection接口</h3><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><h5 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h5><table><thead><tr><th></th><th>作用</th><th>区别</th></tr></thead><tbody><tr><td>add(E obj)</td><td>添加元素对象到当前集合中</td><td>此方法在添加别的集合会直接将<strong>集合添加</strong></td></tr><tr><td>addAll(Collection other)</td><td>添加other集合中的所有元素对象到当前集合中，即this &#x3D; this ∪ other</td><td>此方法在添加别的集合会将<strong>此集合元素添加</strong></td></tr></tbody></table><h5 id="2-判断"><a href="#2-判断" class="headerlink" title="2.判断"></a>2.判断</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>int size()</td><td>元素个数</td><td></td></tr><tr><td>boolean isEmpty()</td><td>是否为空</td><td></td></tr><tr><td>boolean contains(Object obj)</td><td>是否存在元素obj</td><td></td></tr><tr><td>boolean containsAll(Collection coll)</td><td>coll集合中元素是否在此集合中存在</td><td></td></tr><tr><td>boolean equals(Object obj)</td><td>判断当前集合与obj是否相等</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>void clear()</td><td>清空元素</td><td></td></tr><tr><td>boolean remove(Object obj)</td><td>删除集合中第一个找到的obj对象</td><td></td></tr><tr><td>boolean removeAll(Collection coll)</td><td>删除所有与集合相同的对象</td><td></td></tr><tr><td>boolean retainAll(Collection coll)</td><td>删除两集合不同的元素</td><td></td></tr></tbody></table><h5 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>Object[] toArray()</td><td>返回包含当前集合中所有元素的数组</td><td></td></tr><tr><td>hashCode()</td><td>返回对象hash值</td><td></td></tr><tr><td>iterator()</td><td>返回迭代器对象</td><td></td></tr></tbody></table><h4 id="2-List接口（存取有序）"><a href="#2-List接口（存取有序）" class="headerlink" title="2.List接口（存取有序）"></a>2.List接口（存取有序）</h4><h5 id="1-插入元素"><a href="#1-插入元素" class="headerlink" title="1.插入元素"></a>1.插入元素</h5><p>void add(int index, Object ele):在index位置插入ele元素<br>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</p><h5 id="2-获取元素"><a href="#2-获取元素" class="headerlink" title="2.获取元素"></a>2.获取元素</h5><p>Object get(int index):获取指定index位置的元素<br>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</p><h5 id="3-获取元素索引"><a href="#3-获取元素索引" class="headerlink" title="3.获取元素索引"></a>3.获取元素索引</h5><p>int indexOf(Object obj):返回obj在集合中首次出现的位置<br>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p><h5 id="4-删除和替换元素"><a href="#4-删除和替换元素" class="headerlink" title="4.删除和替换元素"></a>4.删除和替换元素</h5><p>Object remove(int index):移除指定index位置的元素，并返回此元素</p><p>Object set(int index, Object ele):设置指定index位置的元素为ele</p><h5 id="5-ArrayList与LinkedList"><a href="#5-ArrayList与LinkedList" class="headerlink" title="5.ArrayList与LinkedList"></a>5.ArrayList与LinkedList</h5><table><thead><tr><th></th><th>底层</th><th>优点</th><th>线程安全</th><th>可否存放null</th><th>扩容机制</th><th></th><th>适用范围</th></tr></thead><tbody><tr><td>ArrayList</td><td>动态数组，创建对象未定义长度，首次添加元素，定义长度10</td><td>有索引，定位快，查找和添加快  时间复杂度O（1）</td><td>不安全</td><td>多个null</td><td>扩容1.5倍，复制数组元素到新数组</td><td>若知道长度，建议使用定义长度的构造器</td><td>查询操作</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>插入、删除快 时间复杂度 O（1）</td><td>不安全</td><td>多个null</td><td></td><td></td><td>插入、删除操作</td></tr></tbody></table><h4 id="3-Set接口（存取无序、不可重复）"><a href="#3-Set接口（存取无序、不可重复）" class="headerlink" title="3.Set接口（存取无序、不可重复）"></a>3.Set接口（存取无序、不可重复）</h4><table><thead><tr><th></th><th>底层</th><th>线程安全</th><th>可否存放null</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>HashSet</td><td>HashMap，存在key中（数组+链表+红红黑树+）</td><td>不安全</td><td>一个null</td><td></td><td></td><td></td></tr><tr><td>LinkedHashSet（存取有序）</td><td>（数组+链表+红黑树）+双向链表</td><td></td><td>一个null</td><td></td><td></td><td></td></tr><tr><td>TreeSet</td><td>TreeMap（红黑树）</td><td></td><td>不可存放</td><td></td><td></td><td></td></tr></tbody></table><h3 id="二、Map接口"><a href="#二、Map接口" class="headerlink" title="二、Map接口"></a>二、Map接口</h3><h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><h5 id="1、添加、修改操作："><a href="#1、添加、修改操作：" class="headerlink" title="1、添加、修改操作："></a>1、添加、修改操作：</h5><p>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中<br>void putAll(Map m):将m中的所有key-value对存放到当前map中</p><h5 id="2、删除操作："><a href="#2、删除操作：" class="headerlink" title="2、删除操作："></a>2、删除操作：</h5><p>Object remove(Object key)：移除指定key的key-value对，并返回value<br>void clear()：清空当前map中的所有数据</p><h5 id="3-元素查询的操作："><a href="#3-元素查询的操作：" class="headerlink" title="3.元素查询的操作："></a>3.元素查询的操作：</h5><p>Object get(Object key)：获取指定key对应的value<br>boolean containsKey(Object key)：是否包含指定的key<br>boolean containsValue(Object value)：是否包含指定的value<br>int size()：返回map中key-value对的个数<br>boolean isEmpty()：判断当前map是否为空<br>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p><h5 id="4-元视图操作的方法："><a href="#4-元视图操作的方法：" class="headerlink" title="4.元视图操作的方法："></a>4.元视图操作的方法：</h5><p>Set keySet()：返回所有key构成的Set集合<br>Collection values()：返回所有value构成的Collection集合<br>Set entrySet()：返回所有key-value对构成的Set集合</p><h4 id="2-实现类HashMap"><a href="#2-实现类HashMap" class="headerlink" title="2.实现类HashMap"></a>2.实现类HashMap</h4><table><thead><tr><th></th><th>底层</th><th>线程安全</th><th>存放null</th><th>链表变为红黑树的时机</th><th></th><th></th></tr></thead><tbody><tr><td>HashMap</td><td>一维数组+单向链表+红黑树</td><td>不安全</td><td>一个null，（再加会替换）</td><td>链表长度大于8且数组长度大于64</td><td></td><td></td></tr><tr><td>HashTable</td><td></td><td>安全</td><td></td><td></td><td></td><td></td></tr><tr><td>TreeMap</td><td>红黑树</td><td></td><td>不可存放</td><td></td><td></td><td></td></tr></tbody></table><p><strong>hashMap</strong></p><h5 id="JDK8的HashMap底层"><a href="#JDK8的HashMap底层" class="headerlink" title="JDK8的HashMap底层"></a>JDK8的HashMap底层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*分析过程如下：将(key1,value1)添加到当前hashmap的对象中。首先会调用key1所在类的hashCode()方法，计算key1的哈希值1，此哈希值1再经过某种运算(hash())，得到哈希值2。此哈希值2再经过某种运算(indexFor())，确定在底层table数组中的索引位置i。   （1）如果数组索引为i上的数据为空，则(key1,value1)直接添加成功   ------位置1   （2）如果数组索引为i上的数据不为空，有(key2,value2)，则需要进一步判断：       判断key1的哈希值2与key2的哈希值是否相同：         （3） 如果哈希值不同，则(key1,value1)直接添加成功   ------位置2              如果哈希值相同，则需要继续调用key1所在类的equals()方法，将key2放入equals()形参进行判断                （4） equals方法返回false : 则(key1,value1)直接添加成功   ------位置3                      equals方法返回true : 默认情况下，value1会覆盖value2。位置1：直接将(key1,value1)以Node对象的方式存放到table数组索引i的位置。位置2、位置3：(key1,value1) 与现有的元素以链表的方式存储在table数组索引i的位置，新添加的元素指向旧添加的元素。...//扩容机制在不断的添加的情况下，满足如下条件的情况下，会进行扩容:if ((size >= threshold) &amp;&amp; (null != table[bucketIndex])) :默认情况下，当要添加的元素个数超过12(即：数组的长度（默认16） * loadFactor（加载因子0.75）得到的结果)时，就要考虑扩容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*①使用HashMap()的构造器创建对象时，并没有在底层初始化长度为16的table数组。②jdk8中添加的key,value封装到了HashMap.Node类的对象中。而非jdk7中的HashMap.Entry。③jdk8中新增的元素所在的索引位置如果有其他元素。在经过一系列判断后，如果能添加，则是旧的元素指向新的元素。而非jdk7中的新的元素指向旧的元素。“七上八下”④jdk7时底层的数据结构是：数组+单向链表。 而jdk8时，底层的数据结构是：数组+单向链表+红黑树。红黑树出现的时机：当某个索引位置i上的链表的长度达到8，且数组的长度超过64时，此索引位置上的元素要从单向链表改为红黑树。如果索引i位置是红黑树的结构，当不断删除元素的情况下，当前索引i位置上的元素的个数低于6时，要从红黑树改为单向链表。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//未初始化数组</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment">//第一次添加，初始化数组，长度16</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment">//（默认加载因子0.75）当插入元素达到12时（16*0.75），扩容两倍，若当前计算出的数组下标的元素不为null时，用equals（）比较，若不一样，则存入，形成链表（新元素在老元素下面）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220524142524796-1661448231966.png" alt="image-20220524142524796-1661448231966"></p><h3 id="三、Collections工具类"><a href="#三、Collections工具类" class="headerlink" title="三、Collections工具类"></a>三、Collections工具类</h3><h4 id="1-排序操作："><a href="#1-排序操作：" class="headerlink" title="1.排序操作："></a>1.排序操作：</h4><p>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p><h4 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h4><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素<br>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object min(Collection)：根据元素的自然顺序，返回给定集合中的最小元素<br>Object min(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br>int binarySearch(List list,T key)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br>int binarySearch(List list,T key,Comparator c)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br>int frequency(Collection c，Object o)：返回指定集合中指定元素的出现次数</p><h4 id="3-复制、替换"><a href="#3-复制、替换" class="headerlink" title="3.复制、替换"></a>3.复制、替换</h4><p>void copy(List dest,List src)：将src中的内容复制到dest中<br>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。</p><h4 id="4-添加"><a href="#4-添加" class="headerlink" title="4.添加"></a>4.添加</h4><p>boolean addAll(Collection c,T… elements)将所有指定元素添加到指定 collection 中。</p><h4 id="5-同步"><a href="#5-同步" class="headerlink" title="5.同步"></a>5.同步</h4><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：</p><h2 id="八、泛型"><a href="#八、泛型" class="headerlink" title="八、泛型"></a>八、泛型</h2><h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h3><p><strong>JAVA在之前使用Object接收，在具体使用方法时，需要强转，可能报错</strong>。Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<strong>ClassCastException异常</strong>。即，把不安全的因素在编译期间就排除了，而不是运行期；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换。</p><p><strong>把一个集合中的内容限制为一个特定的数据类型，这就是generic背后的核心思想</strong></p><h3 id="2-自定义泛型类、接口（无法自定义泛型异常）"><a href="#2-自定义泛型类、接口（无法自定义泛型异常）" class="headerlink" title="2.自定义泛型类、接口（无法自定义泛型异常）"></a>2.自定义泛型类、接口（无法自定义泛型异常）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用T类型定义变量</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> info<span class="token punctuation">;</span>    <span class="token comment">// 使用T类型定义一般方法</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">T</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用T类型定义构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">T</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// static的方法中不能声明泛型</span>    <span class="token comment">//public static void show(T t) &#123;</span>    <span class="token comment">//</span>    <span class="token comment">//&#125;</span>    <span class="token comment">// 不能在try-catch中使用泛型定义</span>    <span class="token comment">//public void test() &#123;</span>        <span class="token comment">//try &#123;</span>        <span class="token comment">//</span>        <span class="token comment">//&#125; catch (MyException&lt;T> ex) &#123;</span>        <span class="token comment">//</span>        <span class="token comment">//&#125;</span>    <span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义泛型方法"><a href="#4-自定义泛型方法" class="headerlink" title="4.自定义泛型方法"></a>4.自定义泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>访问权限<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>泛型<span class="token operator">></span>  返回值类型  方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>泛型标识 参数名称<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span>抛出的异常<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、IO流与File类"><a href="#九、IO流与File类" class="headerlink" title="九、IO流与File类"></a>九、IO流与File类</h2><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>File(String pathname)</td><td>若pathname是相对路径，则默认的当前路径在系统属性user.dir中存储</td><td></td></tr><tr><td>File(String parent, String child)</td><td>以parent为父路径，child为子路径</td><td></td></tr><tr><td>public File(File parent, String child)</td><td>根据一个父File对象和子文件路径创建File对象</td><td></td></tr></tbody></table><h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h4><h5 id="1-获取文件和目录信息"><a href="#1-获取文件和目录信息" class="headerlink" title="1.获取文件和目录信息"></a>1.获取文件和目录信息</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>String getName()</td><td>获取名称</td><td></td></tr><tr><td>String getPath()</td><td>获取路径</td><td></td></tr><tr><td>String getAbsolutePath()</td><td>获取绝对路径</td><td></td></tr><tr><td>File getAbsoluteFile()</td><td>获取绝对路径表示的文件</td><td></td></tr><tr><td>String getParent()</td><td>获取上层目录，若无，返回空</td><td></td></tr><tr><td>long length()</td><td>获取文件长度</td><td></td></tr><tr><td>long lastModified()</td><td>获取最后修改时间，ms单位</td><td></td></tr></tbody></table><h5 id="2-列出目录的下一级"><a href="#2-列出目录的下一级" class="headerlink" title="2.列出目录的下一级"></a>2.列出目录的下一级</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>String[] list()</td><td>返回String数组，表示File目录中的所有子文件或目录</td><td></td></tr><tr><td>File[] listFiles()</td><td>返回File数组，表示该File目录中的所有的子文件或目录。</td><td></td></tr></tbody></table><h5 id="3-重命名"><a href="#3-重命名" class="headerlink" title="3.重命名"></a>3.重命名</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean renameTo(File dest)</td><td>将文件重命名为指定的文件目录</td><td></td></tr></tbody></table><h5 id="4-判断功能"><a href="#4-判断功能" class="headerlink" title="4.判断功能"></a>4.判断功能</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean exists()</td><td>文件&#x2F;目录是否存在</td><td></td></tr><tr><td>boolean isDirectory()</td><td>是否为目录</td><td></td></tr><tr><td>boolean isFile()</td><td>是否是文件</td><td></td></tr><tr><td>boolean canRead()</td><td>是否可读</td><td></td></tr><tr><td>boolean canWrite()</td><td>是否可写</td><td></td></tr><tr><td>boolean isHidden()</td><td>是否隐藏</td><td></td></tr></tbody></table><h5 id="5-创建、删除功能"><a href="#5-创建、删除功能" class="headerlink" title="5.创建、删除功能"></a>5.创建、删除功能</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean createNewFile()</td><td>创建文件，若存在，返回false</td><td></td></tr><tr><td>boolean mkdir()</td><td>创建文件目录，若此文件的上层目录不存在，不创建</td><td></td></tr><tr><td>boolean mkdirs()</td><td>创建文件目录。如果上层文件目录不存在，一并创建。</td><td></td></tr><tr><td>boolean delete()</td><td>删除文件或文件夹</td><td>文件目录中不能包含文件或文件目录</td></tr></tbody></table><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据流向</td><td>输入、输出流</td><td>InputStream、Reader、OutputStream、Writer</td></tr><tr><td>数据单位</td><td>字节流（8bit）、字符流（16bit）</td><td>InputStream、OutputStream  、Reader、Writer</td></tr><tr><td>角色</td><td>节点流、处理流</td><td>不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="2-常用的节点流："><a href="#2-常用的节点流：" class="headerlink" title="2.常用的节点流："></a>2.常用的节点流：</h4><p><strong>文件流</strong>： FileInputStream、FileOutputStrean、FileReader、FileWriter<br><strong>字节&#x2F;字符数组流</strong>： ByteArrayInputStream、ByteArrayOutputStream、CharArrayReader、CharArrayWriter<br>对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。</p><h4 id="常用处理流："><a href="#常用处理流：" class="headerlink" title="常用处理流："></a>常用处理流：</h4><p><strong>缓冲流（需流）</strong>：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter<br>作用：增加缓冲功能，避免频繁读写硬盘，进而提升读写效率。<br><strong>转换流（需流</strong>）：InputStreamReader、OutputStreamReader<br>作用：实现字节流和字符流之间的转换。<br><strong>对象流（需流）</strong>：ObjectInputStream、ObjectOutputStream<br>作用：提供直接读写Java对象功能</p><h3 id="FileReader、FileWriter"><a href="#FileReader、FileWriter" class="headerlink" title="FileReader、FileWriter"></a>FileReader、FileWriter</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a><strong>FileReader</strong></h4><h5 id="1-常用方法-2"><a href="#1-常用方法-2" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>int read()</td><td>读取一个字符。自动提升int类型，若读完，返回-1</td><td></td></tr><tr><td>int read(char[]  cbuf)</td><td>从输入流中读取一些字符，并将它们存储到字符数组中 。每次最多读取cbuf.length个字符。返回实际读取的字符个数。没有数据可读，则返回-1。</td><td></td></tr><tr><td>int read(char[] cbuf,int off,int len)</td><td>从输入流中读取一些字符，并将它们存储到字符数组中，从cbuf[off]开始的位置存储。每次最多读取len个字符。返回实际读取的字符个数。没有数据可读，则返回-1</td><td></td></tr><tr><td>void close()</td><td>关闭流，释放资源。</td><td></td></tr></tbody></table><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>FileWriter(File file)</td><td>给定要读取的File对象</td><td></td></tr><tr><td>FileWriter(String fileName)</td><td>给定要读取的文件的名称</td><td></td></tr><tr><td>FileWriter(File file,boolean append)</td><td>指明是否在现有文件末尾追加内容。</td><td></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>void write(int c)</td><td>写出单个字符</td><td></td></tr><tr><td>void write(char[] cbuf)</td><td>写出字符数组</td><td></td></tr><tr><td>write(char[] cbuf, int off, int len)</td><td>出字符数组的某一部分。off：数组的开始索引；len：写出的字符个数。</td><td></td></tr><tr><td>void write(String str)</td><td>写出字符串</td><td></td></tr><tr><td>write(String str, int off, int len)</td><td>写出字符串的一部分，off开始索引，length：写出字符个数</td><td></td></tr><tr><td>void flush()</td><td>刷新该流的缓冲</td><td></td></tr><tr><td>void close()</td><td>关闭流</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>flush()作用：</strong></p><p>   把缓冲区的数据强行输出, 主要用在IO中，即清空缓冲区数据，一般在读写流(stream)的时候，数据是先被读到了内存中，再把数据写到文件中，当你数据读完的时候不代表你的数据已经写完了，因为还有一部分有可能会留在内存这个缓冲区中。这时候如果你调用了close()方法关闭了读写流，那么这部分数据就会丢失，所以应该在关闭读写流之前先flush()。</p><h3 id="FileInputStream、FileOutputStream"><a href="#FileInputStream、FileOutputStream" class="headerlink" title="FileInputStream、FileOutputStream"></a>FileInputStream、FileOutputStream</h3><p>方法与上述一致。。。</p><h3 id="缓冲流（作用在节点流基础上）"><a href="#缓冲流（作用在节点流基础上）" class="headerlink" title="缓冲流（作用在节点流基础上）"></a>缓冲流（作用在节点流基础上）</h3><table><thead><tr><th>节点流</th><th>缓冲流</th><th>特有方法</th></tr></thead><tbody><tr><td>FileInputStream</td><td>BufferInputStream</td><td></td></tr><tr><td>FileOutputStream</td><td>BufferOutputStream</td><td></td></tr><tr><td>FileReader</td><td>BufferReader</td><td>String readLine()  读一行</td></tr><tr><td>FileWriter</td><td>BufferWriter</td><td>void newLine()      写一行行分隔符,由系统属性定义符号</td></tr></tbody></table><h4 id="作用：减少磁盘IO次数"><a href="#作用：减少磁盘IO次数" class="headerlink" title="作用：减少磁盘IO次数"></a>作用：减少磁盘IO次数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">File</span> f1<span class="token punctuation">,</span><span class="token class-name">File</span> f2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\谷歌浏览器\\下载\\wallhaven-1k292g_1920x1080.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\谷歌浏览器\\下载\\wallhaven-1k292g_1920x1080.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\paper.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换流（处理读取文本文件乱码）"><a href="#转换流（处理读取文本文件乱码）" class="headerlink" title="转换流（处理读取文本文件乱码）"></a>转换流（处理读取文本文件乱码）</h3><h5 id="InputStreamReader（输入型的字节流-—-gt-输入型的字符流）"><a href="#InputStreamReader（输入型的字节流-—-gt-输入型的字符流）" class="headerlink" title="InputStreamReader（输入型的字节流 —&gt;输入型的字符流）"></a>InputStreamReader（输入型的字节流 —&gt;输入型的字符流）</h5><table><thead><tr><th>构造方法</th><th></th><th></th></tr></thead><tbody><tr><td>InputStreamReader(InputStream in)</td><td>创建一个使用默认字符集的字符流。</td><td></td></tr><tr><td>InputStreamReader(InputStream in, String charsetName)</td><td>创建一个指定字符集的字符流。</td><td></td></tr></tbody></table><h5 id="OutputStreamWriter（输出型的字符流—-gt-输出型的字节流）"><a href="#OutputStreamWriter（输出型的字符流—-gt-输出型的字节流）" class="headerlink" title="OutputStreamWriter（输出型的字符流—&gt;输出型的字节流）"></a>OutputStreamWriter（输出型的字符流—&gt;输出型的字节流）</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>OutputStreamWriter(OutputStream in)</td><td>创建一个使用默认字符集的字符流</td><td></td></tr><tr><td>OutputStreamWriter(OutputStream in,String charsetName)</td><td>创建一个指定字符集的字符流。</td><td></td></tr></tbody></table><h5 id="ObjectInputStream（序列化）"><a href="#ObjectInputStream（序列化）" class="headerlink" title="ObjectInputStream（序列化）"></a>ObjectInputStream（序列化）</h5><p><strong>什么是序列化？</strong></p><p>​     允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。&#x2F;&#x2F;当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</p><p><strong>如何实现序列化？</strong></p><p>为了让某个类是可序列化的，该类必须实现java.io.Serializable 接口。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/blog/2023/04/06/fan-she/"/>
      <url>/blog/2023/04/06/fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-为什么要有反射？"><a href="#1-为什么要有反射？" class="headerlink" title="1. 为什么要有反射？"></a>1. 为什么要有反射？</h2><p>java程序中，所有的对象都有两种类型：<code>编译时类型</code>和<code>运行时类型</code>，而很多时候对象的编译时类型和运行时类型<code>不一致</code>。 Object obj &#x3D; new String(“hello”); obj.getClass()</p><p>例如：某些变量或形参的声明类型是Object类型，但是程序却需要调用该对象运行时类型的方法，该方法不是Object中的方法，那么如何解决呢？</p><p>解决这个问题，有两种方案：</p><p>方案1：在编译和运行时都完全知道类型的具体信息，在这种情况下，我们可以直接先使用<code>instanceof</code>运算符进行判断，再利用强制类型转换符将其转换成运行时类型的变量即可。</p><p>方案2：编译时根本无法预知该对象和类的真实信息，程序只能依靠<code>运行时信息</code>来发现该对象和类的真实信息，这就必须使用反射。</p><h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h2><p>Reflection（反射）是被视为<code>动态语言</code>的关键，反射机制允许程序在<code>运行期间</code>借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。<code>这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</code></p><h2 id="3-反射的优缺点"><a href="#3-反射的优缺点" class="headerlink" title="3.反射的优缺点"></a>3.反射的优缺点</h2><p><strong>优点：</strong></p><ul><li>提高了Java程序的灵活性和扩展性，<code>降低了耦合性</code>，提高<code>自适应</code>能力</li><li>允许程序创建和控制任何类的对象，无需提前<code>硬编码</code>目标类</li></ul><p><strong>缺点：</strong></p><ul><li>反射的<code>性能较低</code>。<ul><li>反射机制主要应用在对灵活性和扩展性要求很高的系统框架上</li></ul></li><li>反射会<code>模糊</code>程序内部逻辑，<code>可读性较差</code>。</li></ul><h1 id="二、Class类"><a href="#二、Class类" class="headerlink" title="二、Class类"></a>二、Class类</h1><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><strong>在JVM中存储在方法区</strong></p><h2 id="2-获取Class实例"><a href="#2-获取Class实例" class="headerlink" title="2.获取Class实例"></a>2.获取Class实例</h2><ol><li><p>调用对象的class()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Son</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用类的class属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span><span class="token punctuation">></span></span> mainClass <span class="token operator">=</span> <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用Class.forName(“”) ,可能抛出ClassNotFoundException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h2><table><thead><tr><th><strong>方法名</strong></th><th align="center"><strong>功能说明</strong></th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td align="center">返回指定类名 name 的 Class 对象</td></tr><tr><td>Object newInstance()</td><td align="center">返回对象实例</td></tr><tr><td>getName()</td><td align="center">返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td></tr><tr><td>Class getSuperClass()</td><td align="center">返回当前Class对象的父类的Class对象</td></tr><tr><td>Class [] getInterfaces()</td><td align="center">获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td align="center">返回该类的类加载器</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getConstructors()</td><td align="center">返回所有的构造方法</td></tr><tr><td>getDeclaredConstructors（）</td><td align="center">返回所有的public构造方法</td></tr><tr><td>getDeclaredConstructor（Class c…)</td><td align="center">获取指定参数的构造方法</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredFields()</td><td align="center">返回所有成员的属性</td></tr><tr><td>getFields()</td><td align="center">返回所有的public属性</td></tr><tr><td>getDeclaredField(“id”);</td><td align="center">获取指定的属性</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredMethods()</td><td align="center">返回所有方法</td></tr><tr><td>getMethods()</td><td align="center">返回所有的public方法</td></tr><tr><td>getMethod(String name,Class c)</td><td align="center">返回一个指定方法名和返回值的方法</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredAnnotations()</td><td align="center">返回所有注解</td></tr><tr><td>get Annotation(Class<T> c)</td><td align="center">返回指定注解</td></tr></tbody></table><h2 id="4-创建对象"><a href="#4-创建对象" class="headerlink" title="4.创建对象"></a>4.创建对象</h2><ol><li><p>使用空参构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被弃用</span>        <span class="token comment">//main.newInstance();</span>  <span class="token class-name">Main</span> m1 <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用有参构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Main</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">)</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="5-调用方法"><a href="#5-调用方法" class="headerlink" title="5.调用方法"></a>5.调用方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Class对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span> <span class="token class-name">Main</span>  m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">)</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取方法    方法名，参数类型</span><span class="token class-name">Method</span> method <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用方法     方法的对象，参数</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、反射的强大"><a href="#三、反射的强大" class="headerlink" title="三、反射的强大"></a>三、反射的强大</h1><p><strong>关于setAccessible方法的使用：</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible<strong>启动和禁用访问安全检查的开关</strong>。</li><li>参数值为<strong>true则指示反射的对象在使用时应该取消Java语言访问检查</strong>。<ul><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原<strong>本无法访问的私有成员也可以访问</strong></li></ul></li><li>参数值为<strong>false则指示反射的对象应该实施Java语言访问检查</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo创建博客</title>
      <link href="/blog/2023/04/05/bo-ke-she-zhi/"/>
      <url>/blog/2023/04/05/bo-ke-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h1><h2 id="Gitee-Pages-简介"><a href="#Gitee-Pages-简介" class="headerlink" title="Gitee Pages 简介"></a>Gitee Pages 简介</h2><p>上篇说了，GitHub 设计 Pages 功能是为了让用户能设计一个图文并茂的网页作为项目首页，提升新手友好度。那么Gitee为什么要提供网页托管服务呢？应该是同样的原因，或者说是因为 GitHub 有这个功能？( ╯▽╰)</p><p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo编译静态资源。</p><h2 id="一、创建仓库"><a href="#一、创建仓库" class="headerlink" title="一、创建仓库"></a>一、创建仓库</h2><p>此处略过。。。。。</p><h2 id="二、开启GitPage"><a href="#二、开启GitPage" class="headerlink" title="二、开启GitPage"></a>二、开启GitPage</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/bolg.png"></p><p>勾选<code>强制使用HTTPS</code>，点击启动。</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%BC%80%E5%90%AFgitpage.png"></p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><h3 id="1-在仓库中创建一个HTML并保存。"><a href="#1-在仓库中创建一个HTML并保存。" class="headerlink" title="1.在仓库中创建一个HTML并保存。"></a>1.在仓库中创建一个HTML并保存。</h3><h3 id="2-Gitee-Pages更新"><a href="#2-Gitee-Pages更新" class="headerlink" title="2.Gitee Pages更新"></a>2.Gitee Pages更新</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/page%E6%9B%B4%E6%96%B0.png"></p><h3 id="3-访问-查看HTML访问是否成功"><a href="#3-访问-查看HTML访问是否成功" class="headerlink" title="3.访问-查看HTML访问是否成功"></a>3.访问-查看HTML访问是否成功</h3><h2 id="四、手动部署"><a href="#四、手动部署" class="headerlink" title="四、手动部署"></a>四、手动部署</h2><h3 id="1-设置Git"><a href="#1-设置Git" class="headerlink" title="1.设置Git"></a>1.设置Git</h3><p>右键打开Git Bash Here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@XXX.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中 username@XXX.com 同上，是你的注册邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@XXX.com&quot;</span></span><br><span class="line"><span class="comment">#一直按回车，直到结束。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看公钥，在命令行会输出一个路径 XXX为用户名</span></span><br><span class="line"><span class="built_in">cat</span> /c/Users/XXX/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">#复制</span></span><br></pre></td></tr></table></figure><h3 id="2-设置公钥"><a href="#2-设置公钥" class="headerlink" title="2.设置公钥"></a>2.设置公钥</h3><p>在Gitee中粘贴复制的密钥，并保存</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面的命令什么都不用改 输出Successfully表示成功</span></span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><h1 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h1><h2 id="一、安装依赖项"><a href="#一、安装依赖项" class="headerlink" title="一、安装依赖项"></a>一、安装依赖项</h2><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><p>Node.js 中文官网：<a href="https://nodejs.org/zh-cn/">nodejs.org</a></p><p>（进入网站，左侧为稳定版（建议），右侧为体验版）</p><h3 id="2-测试安装是否成功"><a href="#2-测试安装是否成功" class="headerlink" title="2.测试安装是否成功"></a>2.测试安装是否成功</h3><p> Win+R 打开运行框，输出cmd后，在命令行窗口输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><h3 id="1、修改npm源"><a href="#1、修改npm源" class="headerlink" title="1、修改npm源"></a>1、修改npm源</h3><p>默认npm源速度过慢，修改为淘宝源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"><span class="comment"># 或者永久修改 npm 源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ol><li><p>创建博客位置（空文件夹），路径尽量全英文（避免不必要的问题）</p></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架 安装 hexo 模块，-g表示安装全局模块</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 初始化文件夹  hexo 初始化，会用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>生成静态网站并启动服务器</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><ol start="4"><li><p>访问本服务器<a href="http://localhost:4000/%EF%BC%8C">http://localhost:4000/，</a></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E9%BB%98%E8%AE%A4.png"></p></li></ol><h2 id="三、提交到服务器"><a href="#三、提交到服务器" class="headerlink" title="三、提交到服务器"></a>三、提交到服务器</h2><h3 id="1-安装插件-hexo-deployer-git"><a href="#1-安装插件-hexo-deployer-git" class="headerlink" title="1.安装插件 hexo-deployer-git"></a>1.安装插件 hexo-deployer-git</h3><p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。（npm报错，请参照上方修改npm源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-发布"><a href="#2-发布" class="headerlink" title="2.发布"></a>2.发布</h3><p>在你博客的根目录下，有_config.yml，修改数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名，注意是master分支</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你的项目的SSH克隆地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部分主题可能显示异常，请配置_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#你的项目代码的地址（资源的根目录） ***为用户名</span></span><br><span class="line">url: https://gitee.com/***/blog/</span><br><span class="line"><span class="comment">#根目录</span></span><br><span class="line">root: /blog/</span><br></pre></td></tr></table></figure><p>发布到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>！！！不要忘了Git Page手动更新资源哦！！！</strong></p><h3 id="3-查看成功？"><a href="#3-查看成功？" class="headerlink" title="3.查看成功？"></a>3.查看成功？</h3><p>在更新资源页有网站提示，打开访问是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/blog/2023/03/30/jdbc/"/>
      <url>/blog/2023/03/30/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h1 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h1><h2 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h2><h3 id="1-注册驱动（registerDriver（））"><a href="#1-注册驱动（registerDriver（））" class="headerlink" title="1.注册驱动（registerDriver（））"></a>1.注册驱动（registerDriver（））</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可省略，在jar包中有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态代码块注册驱动，Driver</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Driver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取连接（Connection）"><a href="#2-获取连接（Connection）" class="headerlink" title="2.获取连接（Connection）"></a>2.获取连接（Connection）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接本机，简化书写：jdbc:mysql:///数据库名</span><span class="token comment">//后面可添加useSSL=false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-Connection（接口）"><a href="#2-Connection（接口）" class="headerlink" title="2.Connection（接口）"></a>2.Connection（接口）</h2><h3 id="1-获取执行SQL对象"><a href="#1-获取执行SQL对象" class="headerlink" title="1.获取执行SQL对象"></a>1.获取执行SQL对象</h3><h4 id="1-Statement-普通执行sql对象"><a href="#1-Statement-普通执行sql对象" class="headerlink" title="1.Statement 普通执行sql对象"></a>1.Statement 普通执行sql对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>方法</th><th>返回值</th><th>操作语句</th></tr></thead><tbody><tr><td>executeUpdate()</td><td>int</td><td>DML,DDL</td></tr><tr><td>executeQuery()</td><td>ResultSet</td><td>DQL</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//DML,DDL，返回值为1，表示执行成功 ，DDL成功也可能为0</span><span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    num <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从1开始</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-PreparedStatement-预编译sql的执行sql对象"><a href="#2-PreparedStatement-预编译sql的执行sql对象" class="headerlink" title="2.PreparedStatement 预编译sql的执行sql对象"></a>2.PreparedStatement 预编译sql的执行sql对象</h4><p><strong>防止SQL注入</strong>（字符串拼接，登录验证的sql问题；<strong>将字符转义</strong>）、<strong>性能快（预编译）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> c <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 根据sql语句创建PreparedStatement</span>             <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 设置参数</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">313.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//executeQuery() executeUpdate();</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-CallableStatement-执行存储过程的对象"><a href="#3-CallableStatement-执行存储过程的对象" class="headerlink" title="3.CallableStatement 执行存储过程的对象"></a>3.CallableStatement 执行存储过程的对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-管理事务"><a href="#2-管理事务" class="headerlink" title="2.管理事务"></a>2.管理事务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开启事务   true :自动  false:手动</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autCommit<span class="token punctuation">)</span>     <span class="token comment">//提交</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///test?serverTimezone=UTC"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//开启事务</span>               connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"update student set name = '修改sql' where id = 1"</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"update student set name = '修改sql' where id = 2"</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> i1 <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//提交事务</span>               connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接</span>      <span class="token comment">//Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?serverTimezone=UTC", "root", "admin");</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select count(*) from couse"</span><span class="token punctuation">;</span>        <span class="token comment">//获取执行的对象</span>       <span class="token comment">// Statement statement = connection.createStatement();</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3.数据库连接池"></a>3.数据库连接池</h1><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><p>1.容器。负责分配、管理数据库连接（Connection）</p><p>2.允许程序重复使用一个现有的数据库连接，而不是重新建立</p><p>3.释放空闲时间超过最大空闲事件的数据库连接，避免没有释放数据库连接而引起的数据库连接遗漏</p><h2 id="2-常见的连接池"><a href="#2-常见的连接池" class="headerlink" title="2.常见的连接池"></a>2.常见的连接池</h2><table><thead><tr><th>数据库连接池</th></tr></thead><tbody><tr><td>DBCP</td></tr><tr><td>C3PO</td></tr><tr><td>Druid</td></tr></tbody></table><h2 id="3-Druid连接池"><a href="#3-Druid连接池" class="headerlink" title="3.Druid连接池"></a>3.Druid连接池</h2><h3 id="1-常见配置"><a href="#1-常见配置" class="headerlink" title="1.常见配置"></a>1.常见配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">driverClassName</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">url</span> <span class="token punctuation">=</span>  <span class="token value attr-value">jdbc:mysql:///test?serverTimezone=UTC</span><span class="token key attr-name">username</span> <span class="token punctuation">=</span> <span class="token value attr-value">username</span><span class="token key attr-name">password</span> <span class="token punctuation">=</span> <span class="token value attr-value">password</span><span class="token comment">#初始化连接数量</span><span class="token key attr-name">initialSize</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span><span class="token comment">#最大连接数量</span><span class="token key attr-name">maxActive</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token comment">#最大等待时间</span><span class="token key attr-name">maxWait</span> <span class="token punctuation">=</span> <span class="token value attr-value">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="/blog/2023/03/30/spring/"/>
      <url>/blog/2023/03/30/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>此为Spring框架总结，若要具体了解底层实现，请配合黑马的spring高级49讲食用（QaQ）。在BeanDefinition阶段，我自己也写了相关的简单实现（<a href="https://gitee.com/mr-poke/demo_-she-ji">Demo_SheJi: 设计模式入门 (gitee.com)</a>），其中包括PropertyValues、MutablePropertyValues、BeanDefinition、BeanFactory、BeanDefinitionReader、BeanDefinitionRegistry 、ApplicationContext等类。</p><p>在项目中，Spring_Defined模块中打包。并在Spring_Demo中导入测试。</p><h1 id="一、BeanFactory-与-ApplicationContext"><a href="#一、BeanFactory-与-ApplicationContext" class="headerlink" title="一、BeanFactory 与 ApplicationContext"></a>一、BeanFactory 与 ApplicationContext</h1><table><thead><tr><th></th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>默认实现</td><td>DefaultListableBeanFactory</td><td>四种分别对应                                                                                                                                                                                          xml（ClassPathXmlApplicationContext），                      配置类（AnnotationConfigApplicationContext），磁盘下的配置类，web容器。</td></tr><tr><td>加载方式</td><td>延迟加载（首次调用getBean（）加载），因为beanFactory不会自动注册BeanFactory后处理器和Bean后处理器</td><td>立即加载（耗时，耗资源）饿汉式</td></tr><tr><td>关系</td><td>AOP的核心</td><td>继承并引用BeanFactory</td></tr><tr><td>功能</td><td>控制反转、基本的依赖注入、声明周期的功能</td><td>多语言处理、资源匹配、事件发布、环境信息处理</td></tr></tbody></table><h1 id="二、-Bean"><a href="#二、-Bean" class="headerlink" title="二、 Bean"></a>二、 Bean</h1><h2 id="1-Bean注入"><a href="#1-Bean注入" class="headerlink" title="1.Bean注入"></a>1.Bean注入</h2><table><thead><tr><th>Bean注入方式</th><th></th></tr></thead><tbody><tr><td>xml</td><td></td></tr><tr><td>配置类（注解）</td><td></td></tr></tbody></table><h3 id="1-xml-配置Bean"><a href="#1-xml-配置Bean" class="headerlink" title="1. xml 配置Bean"></a>1. xml 配置Bean</h3><table><thead><tr><th>属性</th><th>功能</th></tr></thead><tbody><tr><td>id &#x3D; class&#x3D;</td><td>bean的id和全限定类名</td></tr><tr><td>name</td><td>bean的别名</td></tr><tr><td>scope</td><td>bean的作用域</td></tr><tr><td>lazy-int</td><td>加载时机（beanFactory容器无效）</td></tr><tr><td>init-method</td><td>初始化方法</td></tr><tr><td>destroy-method</td><td>销毁方法，（需要显式关闭容器才会执行）</td></tr><tr><td>autowire</td><td>自动注入方式，byType || byName</td></tr><tr><td>factory-bean&#x3D;  factory-method</td><td>指定工厂bean的方法完成bean的创建</td></tr></tbody></table><h2 id="2-Bean的实例化"><a href="#2-Bean的实例化" class="headerlink" title="2.Bean的实例化"></a>2.Bean的实例化</h2><table><thead><tr><th>方式</th><th></th></tr></thead><tbody><tr><td>构造方法（默认无参，使用构造方法注入属性时，变为有参）</td><td></td></tr><tr><td>工厂方法实例化Bean</td><td></td></tr></tbody></table><h3 id="2-1工厂实例化Bean"><a href="#2-1工厂实例化Bean" class="headerlink" title="2.1工厂实例化Bean"></a>2.1工厂实例化Bean</h3><table><thead><tr><th>工厂实例化Bean</th></tr></thead><tbody><tr><td>静态工厂实例化</td></tr><tr><td>实例工厂实例化</td></tr><tr><td>FactoryBean 延迟实例化</td></tr></tbody></table><p><strong>静态工厂</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserService</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//在xml中配置： &lt;bean id="userService" class="factory.MyFactory1" factory-method="userService"/></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例工厂</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">UserMapper</span> <span class="token function">userMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// &lt;bean id="myFactory2" class="factory.MyFactory2"/></span> <span class="token comment">//   &lt;bean id="mapper" factory-bean="myFactory2" factory-method="userMapper"/></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现FactoryBean接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FactoryBean接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token constant">OBJECT_TYPE_ATTRIBUTE</span> <span class="token operator">=</span> <span class="token string">"factoryBeanObjectType"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现---------------</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory3</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserMapper</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FactoryBean与普通Bean的区别？"><a href="#FactoryBean与普通Bean的区别？" class="headerlink" title="FactoryBean与普通Bean的区别？"></a>FactoryBean与普通Bean的区别？</h3><table><thead><tr><th></th><th>普通Bean</th><th>FactoryBean</th></tr></thead><tbody><tr><td>实现</td><td></td><td>实现FactoryBean接口</td></tr><tr><td>存放位置</td><td>SingletonObjects池中</td><td>factoryBeanObjectCache池中</td></tr><tr><td>加载</td><td>ApplicationContext中默认立即加载</td><td>延迟加载</td></tr></tbody></table><h2 id="3-Bean的依赖注入方式"><a href="#3-Bean的依赖注入方式" class="headerlink" title="3.Bean的依赖注入方式"></a>3.Bean的依赖注入方式</h2><table><thead><tr><th>方式</th><th></th></tr></thead><tbody><tr><td>set</td><td>&lt;property name&#x3D;”userMapper” ref&#x3D;”userMapper” || value &#x3D;””&#x2F;&gt;</td></tr><tr><td>构造方法</td><td>&lt;constructor-arg name&#x3D;”” ref&#x3D;”” ||value&gt;</td></tr></tbody></table><h2 id="4-Bean作用域"><a href="#4-Bean作用域" class="headerlink" title="4.Bean作用域"></a>4.Bean作用域</h2><table><thead><tr><th>作用域</th><th></th><th></th></tr></thead><tbody><tr><td>Single -单例</td><td>创建一个</td><td>在singleObjects（单例池）</td></tr><tr><td>prototype -多例（原型）</td><td>每次获取均创建一个(延迟加载)</td><td>俺也不清楚QAQ</td></tr><tr><td><strong>Web中</strong></td><td></td><td></td></tr><tr><td>request-一次请求</td><td>一次请求创建一个</td><td></td></tr><tr><td>session-会话</td><td>每次会话创建一个</td><td></td></tr><tr><td>global session-全局</td><td>全局</td><td></td></tr></tbody></table><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><table><thead><tr><th>配置</th><th></th></tr></thead><tbody><tr><td>xml</td><td>bean  id &#x3D; “”  scope&#x3D;””</td></tr><tr><td>注解（@Scope）</td><td>value &#x3D; “”</td></tr></tbody></table><h2 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="*5.生命周期"></a>*5.生命周期</h2><p>简单的：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR创建 <span class="token arrow operator">--></span> 依赖注入依赖注入 <span class="token arrow operator">--></span> 初始化初始化 <span class="token arrow operator">--></span> 可用可用 <span class="token arrow operator">--></span> 销毁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单的大概流程</strong>：</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%AE%80%E5%8D%95%E7%9A%84bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><p><strong>加入BeanFactoryPostProcesssor与BeanPostProcessor的流程：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Spring%E5%AE%8C%E6%95%B4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><h3 id="1-创建（实例化）"><a href="#1-创建（实例化）" class="headerlink" title="1.创建（实例化）"></a>1.创建（实例化）</h3><p>取出BeanDefinition，并进行判断：<strong>是否为单例、是否延迟加载、是否FactoryBean等</strong>，最终将普通的单例Bean通过反射实例化。</p><h3 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2.依赖注入"></a>2.依赖注入</h3><p>属性在BeanDefinition中封装在PropertyValue中。</p><h4 id="2-1注入普通属性"><a href="#2-1注入普通属性" class="headerlink" title="2.1注入普通属性"></a>2.1注入普通属性</h4><p>set()方法注入</p><h4 id="2-2注入单向引用对象"><a href="#2-2注入单向引用对象" class="headerlink" title="2.2注入单向引用对象"></a>2.2注入单向引用对象</h4><p>从容器中通过getBean()获取，然后set()注入，若容器中没有，先创建，在注入</p><h4 id="2-3注入双向引用对象（循环依赖）"><a href="#2-3注入双向引用对象（循环依赖）" class="headerlink" title="2.3注入双向引用对象（循环依赖）"></a>2.3注入双向引用对象（循环依赖）</h4><p><strong>问题概述</strong>：对象A有属性B，对象B有属性A。</p><p><strong>解决方法</strong>：三级缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一级缓存  存储单例Bean成品，实例化与初始化完成</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二级缓存  缓存半成品对象且被引用</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三级缓存  缓存半成品对象且未被引用，</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt=" "></p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>半成品，进行<strong>属性注入、Aware接口方法、Bean后处理器的before（）、InitializingBean接口的初始化方法、自定义的初始化方法init（），Bean后处理器的aftrer（）等</strong></p><table><thead><tr><th>方法</th><th>优先级</th></tr></thead><tbody><tr><td>bean标签中 init -method （或@Bean中的init-method属性）</td><td>3</td></tr><tr><td>@PreConstruct注解</td><td>1</td></tr><tr><td>InitializingBean接口重写afterPropertiesSet（）</td><td>2</td></tr></tbody></table><h3 id="4-销毁"><a href="#4-销毁" class="headerlink" title="4.销毁"></a>4.销毁</h3><table><thead><tr><th>方法</th><th>优先级</th></tr></thead><tbody><tr><td>bean标签中的（或@Bean中的destroy-method）</td><td>3</td></tr><tr><td>@PreDestory</td><td>1</td></tr><tr><td>实现DesposableBean接口，重写destroy（）</td><td>2</td></tr></tbody></table><h1 id="三、BeanFactoryPostProcessor（需要注入容器）"><a href="#三、BeanFactoryPostProcessor（需要注入容器）" class="headerlink" title="三、BeanFactoryPostProcessor（需要注入容器）"></a>三、BeanFactoryPostProcessor（需要注入容器）</h1><table><thead><tr><th>常见的bean工厂后处理器</th><th>区别</th><th>继承关系</th><th>作用</th><th>执行顺序</th></tr></thead><tbody><tr><td>BeanFactoryPostProcessor（接口）</td><td>不带注册功能</td><td>顶级接口</td><td>补充beanDefinition</td><td>2</td></tr><tr><td>BeanDefinitionRegistryPostProcessor（接口）</td><td>带注册功能</td><td>继承BeanFactoryPostProcessor（次顶级接口）</td><td>添加beanDefinition</td><td>1（带注册的方法、然后执行不带注册的方法）</td></tr></tbody></table><h2 id="1-两者源码"><a href="#1-两者源码" class="headerlink" title="1.两者源码"></a>1.两者源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//===========================</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Comment</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanDefinitionRegistryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lifeCycleBean"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"BeanDefinitionRegistryPostProcessor-->bean工厂后置处理器>>>>>>> bean定义之后，实例化之前执行,对bean做一些改变"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lifeCycleBean"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"BeanDefinitionRegistryPostProcessor-->bean工厂后置处理器>>>>>>> bean定义之后，实例化之前执行，注册更多的bean到容器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-常见的工厂后处理器"><a href="#2-常见的工厂后处理器" class="headerlink" title="2.常见的工厂后处理器"></a>2.常见的工厂后处理器</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR创建 <span class="token arrow operator">--></span> 依赖注入依赖注入 <span class="token arrow operator">--></span> 初始化初始化 <span class="token arrow operator">--></span> 可用可用 <span class="token arrow operator">--></span> 销毁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ConfigurationClassPostProcessor 可以解析<ul><li>@ComponentScan</li><li>@Bean</li><li>@Import</li><li>@ImportResource</li></ul></li><li>MapperScannerConfigurer 可以解析<ul><li>Mapper 接口</li></ul></li></ul><h1 id="四、BeanPostProcessor（需要注入容器）"><a href="#四、BeanPostProcessor（需要注入容器）" class="headerlink" title="四、BeanPostProcessor（需要注入容器）"></a>四、BeanPostProcessor（需要注入容器）</h1><h2 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先执行，在bean实例化后，属性注入前</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后执行，在bean初始化后</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-常见的Bean后处理器"><a href="#2-常见的Bean后处理器" class="headerlink" title="2.常见的Bean后处理器"></a>2.常见的Bean后处理器</h2><p>* </p><ul><li>AutowiredAnnotationBeanPostProcessor     解析 @Autowired 与 @Value</li><li>CommonAnnotationBeanPostProcessor         解析 @Resource、@PostConstruct、@PreDestroy</li><li>ConfigurationPropertiesBindingPostProcessor     解析 @ConfigurationProperties</li></ul><h1 id="五、Aware接口"><a href="#五、Aware接口" class="headerlink" title="五、Aware接口"></a>五、Aware接口</h1><table><thead><tr><th>常见的Aware接口</th><th>作用</th></tr></thead><tbody><tr><td>BeanNameAware</td><td>注入Bean名</td></tr><tr><td>BeanFactoryAware</td><td>注入BeanFactory容器</td></tr><tr><td>ApplicationContextAware</td><td>注入ApplicationContext容器</td></tr><tr><td>EmbeddedValueResolverAware</td><td>注入${}解析器</td></tr></tbody></table><h1 id="六、注解"><a href="#六、注解" class="headerlink" title="六、注解"></a>六、注解</h1><h2 id="Comment"><a href="#Comment" class="headerlink" title="@Comment"></a>@Comment</h2><table><thead><tr><th>注解</th><th>作用域</th><th></th></tr></thead><tbody><tr><td>@Comment</td><td></td><td></td></tr><tr><td><strong>衍生注解</strong></td><td></td><td></td></tr><tr><td>@Service</td><td>Service</td><td></td></tr><tr><td>@Mapper</td><td>Dao</td><td></td></tr><tr><td>@Controller</td><td>Controller</td><td></td></tr></tbody></table><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--注解需配合配置使用--</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poke<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 或者@CommentScan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h2><h3 id="CommpentScan"><a href="#CommpentScan" class="headerlink" title="@CommpentScan"></a>@CommpentScan</h3><p>ConfigurationClassPostProcessor：继承BeanDefinitionRegistryPostProcessor</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>作用：声明Bean作用范围</p><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h2><p>作用：是否延迟加载</p><p>参数：true 延时加载</p><p>​           false 立即加载</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>作用：声明初始化方法</p><h2 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h2><p>作用：声明销毁方法</p><h2 id="依赖注入注解"><a href="#依赖注入注解" class="headerlink" title="依赖注入注解"></a>依赖注入注解</h2><table><thead><tr><th>注解</th><th>作用</th><th></th><th>写在哪里</th><th></th><th></th></tr></thead><tbody><tr><td>@Value</td><td>注入普通数据</td><td></td><td>属性、方法、参数</td><td>在给静态变量注入会失败，需要在set（）上写才会成功</td><td>@Value（”${jdbc.driver}”）</td></tr><tr><td>@Autowired</td><td>类型-名称（添加@Qualifier）-报错</td><td>spring</td><td>属性和方法、参数</td><td></td><td></td></tr><tr><td>@Qualifier</td><td>指定名称</td><td></td><td></td><td></td><td></td></tr><tr><td>@Resource</td><td>名称-类型 -报错</td><td>JDK</td><td></td><td></td><td></td></tr></tbody></table><h2 id="Bean（类需要注入）"><a href="#Bean（类需要注入）" class="headerlink" title="@Bean（类需要注入）"></a>@Bean（类需要注入）</h2><p>使用：方法上</p><p>作用：获取工厂Bean（非自定义的Bean）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>作用：配置类</p><p>一般配合：@CommentScan 配合使用（完全注解开发），ApplicationContext需要使用类：AnnotationConfigApplicationContext</p><table><thead><tr><th>区别</th><th>@Comment</th><th>@Configuration</th></tr></thead><tbody><tr><td>是否单例</td><td>不是</td><td>通过动态代理来代理@Bean方法的调用的，因此调用该方法返回的都是同一个实例</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="PropertySource（“位置”）"><a href="#PropertySource（“位置”）" class="headerlink" title="@PropertySource（“位置”）"></a>@PropertySource（“位置”）</h2><p>作用：加载配置文件 </p><p>使用：类上</p><h2 id="Import（A-class）"><a href="#Import（A-class）" class="headerlink" title="@Import（A.class）"></a>@Import（A.class）</h2><p>作用：导入某个Class         加入BeanDefinition</p><h2 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h2><h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p>作用：多个同类型的Bean使用时，提高使用的优先级</p><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><p>作用：标识Bean所的环境，在此环境下才会使用</p><p>使用：类、方法</p><h1 id="七、AOP切面"><a href="#七、AOP切面" class="headerlink" title="七、AOP切面"></a>七、AOP切面</h1><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><table><thead><tr><th>概念</th><th>单词</th><th>解释</th><th>简述</th><th>注解</th></tr></thead><tbody><tr><td>目标对象</td><td>Target</td><td>要增强的对象</td><td>对象A</td><td></td></tr><tr><td>代理对象</td><td>Proxy</td><td>被增强的对象</td><td>生成的代理对象B</td><td></td></tr><tr><td>连接点</td><td>JoinPoint</td><td>可以被增强方法</td><td>对象A的所有可被增强方法</td><td></td></tr><tr><td>切入点</td><td>PointCut</td><td>实际被增强的方法</td><td>对象A的要增强的方法</td><td>@Pointcut:标识切入点</td></tr><tr><td>通知（增强）</td><td>Adive</td><td>增强方法</td><td>增强部分的代码逻辑</td><td>五个通知类型</td></tr><tr><td>*切面</td><td>Aspect</td><td>增强与切入点的组合</td><td>对象B的增强方法</td><td>@Aspect标识切面，同时也要注入容器（@Comment）</td></tr><tr><td>织入</td><td>Weaving</td><td>通知与切入点组合的过程</td><td>过程，即代理生成过程</td><td></td></tr></tbody></table><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>必须开启aop控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>名称</th><th>方式</th><th>执行实际</th></tr></thead><tbody><tr><td>前置通知</td><td>before</td><td>方法之前执行</td></tr><tr><td>后置通知</td><td>after-returning</td><td>方法之后执行，有异常不执行</td></tr><tr><td>环绕通知</td><td>around</td><td>方法前后执行，方法异常，后方法不执行</td></tr><tr><td>异常通知</td><td>after-throwing</td><td>有异常执行</td></tr><tr><td>最终通知</td><td>after</td><td>方法之后执行</td></tr></tbody></table><h2 id="顶级接口：AopProxy"><a href="#顶级接口：AopProxy" class="headerlink" title="顶级接口：AopProxy"></a>顶级接口：AopProxy</h2><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><table><thead><tr><th>代理</th><th>底层</th><th>使用条件</th><th>生成的代理对象</th></tr></thead><tbody><tr><td>JdkDynamicAopProxy</td><td>jdk代理</td><td>目标有接口</td><td>接口的实现类，与被代理对象平级</td></tr><tr><td>CglibAopProxy</td><td>CGlib代理</td><td>目标无接口且未用final修饰</td><td>子类，与被代理对象是继承的关系</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式1</span> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* poke.Service.impl.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//可以抽取到一个方法上</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* poke.Service.impl.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"Myadvice.method()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP底层实现"><a href="#AOP底层实现" class="headerlink" title="AOP底层实现"></a>AOP底层实现</h2><h3 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h3><p>JDK代理： 为实现接口，代理与被代理对象可以视为平级关系。</p><p>CGLib代理：为继承接口，代理与被代理对象视为继承关系。</p><h4 id="1-1-jdk代理"><a href="#1-1-jdk代理" class="headerlink" title="1.1 jdk代理"></a><strong>1.1 jdk代理</strong></h4><h5 id="1-1-1-jdk代理的简单实现"><a href="#1-1-1-jdk代理的简单实现" class="headerlink" title="1.1.1 jdk代理的简单实现"></a>1.1.1 jdk代理的简单实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">interface</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Foo</span> o <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">JdkProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//                new InvocationHandler(参数...) 的Lambda表达式写法</span>                 <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> o1 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> o1<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-1-2-JDK代理在spring中的模拟实现"><a href="#1-1-2-JDK代理在spring中的模拟实现" class="headerlink" title="1.1.2 JDK代理在spring中的模拟实现"></a><strong>1.1.2 JDK代理在spring中的模拟实现</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接口，被代理对象</span>    <span class="token keyword">interface</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//被代理对象</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行mmmm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行ssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//接口，确定调用的方法</span>    <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argss<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        $<span class="token class-name">Proxy0</span> proxy0 <span class="token operator">=</span> <span class="token keyword">new</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-></span>  <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//反射</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy0<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy0<span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//模拟：代理对象        有点像装饰器模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Method</span> m<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Method</span> s<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             m <span class="token operator">=</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s <span class="token operator">=</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-CGLib代理"><a href="#1-2-CGLib代理" class="headerlink" title="1.2 CGLib代理"></a>1.2 CGLib代理</h4><h2 id="代理创建时机"><a href="#代理创建时机" class="headerlink" title="代理创建时机"></a>代理创建时机</h2><ol><li>代理的创建时机<ul><li>初始化之后 (无循环依赖时)</li><li>实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存</li></ul></li><li>依赖注入与初始化不应该被增强, 仍应被施加于原始对象</li></ol><h1 id="八、事务"><a href="#八、事务" class="headerlink" title="八、事务"></a>八、事务</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>事务传播行为用来描述由某<strong>一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播</strong>。</p><h2 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2.事务传播行为"></a>2.事务传播行为</h2><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>Required</td><td>如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。</td></tr><tr><td>Requied_new</td><td>重新创建一个新的事务，如果当前存在事务，延缓当前的事务。</td></tr><tr><td>supports</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</td></tr><tr><td>no_supported</td><td>以非事务的方式运行，如果当前存在事务，暂停当前的事务。</td></tr><tr><td>mandatory</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</td></tr><tr><td>Never</td><td>以非事务的方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>Nested</td><td>如果没有，就新建一个事务；如果有，就在当前事务中嵌套其他事务。</td></tr></tbody></table><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><h2 id="3-注解声明事务"><a href="#3-注解声明事务" class="headerlink" title="3.注解声明事务"></a>3.注解声明事务</h2><h3 id="EnableTransactionManagement：开始声明式事务"><a href="#EnableTransactionManagement：开始声明式事务" class="headerlink" title="@EnableTransactionManagement：开始声明式事务"></a>@EnableTransactionManagement：开始声明式事务</h3><h3 id="Transactional-开启事务控制"><a href="#Transactional-开启事务控制" class="headerlink" title="@Transactional: 开启事务控制"></a>@Transactional: 开启事务控制</h3><table><thead><tr><th>参数</th><th>作用</th><th></th></tr></thead><tbody><tr><td>propagation</td><td>传播行为</td><td></td></tr><tr><td>ioslation</td><td>隔离级别</td><td></td></tr><tr><td>timeout</td><td>超时时间：指定超时时间，不提交则回滚</td><td></td></tr><tr><td>readOnly</td><td>只读</td><td></td></tr><tr><td>rollbackFor</td><td>出现异常回滚</td><td></td></tr><tr><td>notRollbackFor</td><td>出现异常不回滚</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/blog/2022/12/28/spring-mvc/"/>
      <url>/blog/2022/12/28/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring-MVC"></a>Spring-MVC</h1><h1 id="web基础组件复习"><a href="#web基础组件复习" class="headerlink" title="web基础组件复习"></a>web基础组件复习</h1><table><thead><tr><th>组件</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>Servlet</td><td>处理请求和响应</td><td>单例，默认懒汉式加载，创建完成执行init（），service（）</td></tr><tr><td>Filter</td><td>过滤请求</td><td>单例，服务器启动创建，创建完成执行init(),对请求过滤</td></tr><tr><td>Listener</td><td>负责域对象的创建和属性变化的监听</td><td>三个域：request\Session\ServletContext</td></tr></tbody></table><h2 id="一、入门配置"><a href="#一、入门配置" class="headerlink" title="一、入门配置"></a>一、入门配置</h2><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h3><ol><li><p>导入Spring-mvc包</p></li><li><p>在web.xml配置前端控制器DispatchaerServlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    配置springmvc的前端控制器，对浏览器发送的请求进行统一处理<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">></span></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">SpringMVC</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        配置springmvc文件的位置，让其起作用<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>springMVC<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        将前端控制器<span class="token class-name">DispatcherServlet</span>的初始化时间提前到服务器启动时，因为servlet在第一次启动时会初始化<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">SpringMVC</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        <span class="token operator">/</span> 表示浏览器发送的所有请求，不包括<span class="token punctuation">.</span>jsp后缀的请求<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置Controller层代码</p></li><li><p>在spring-mvc.xml 配置组件扫描  @ComponentScan</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    springmvc的配置文件<span class="token punctuation">,</span>包含网站跳转逻辑的控制和配置 use<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>filters禁用默认规则<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.rsk"</span> use<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>filters<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        只扫描控制器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>include<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）"><a href="#2-如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）" class="headerlink" title="2.如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）"></a>2.如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）</h3><ol><li><p>在ApplicationContext.xml中配置组件扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   <span class="token number">1.</span> spring配置文件，主要配置和业务逻辑有关的<span class="token operator">--</span><span class="token operator">></span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@SpringBootApplication</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.rsk"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        不扫描控制器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>exclude<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在web.xml配置 ServletContextListener监听器，让ApplocatinoContext容器注入到web中的applicationContext 域中（全局，所有用户共享）</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    监听器--&gt;&lt;listener&gt;  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;&lt;&#x2F;listener&gt;&lt;!--    1.启动spring容器，加载ApplicationContext--&gt;&lt;context-param&gt;  &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;  &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;&lt;&#x2F;context-param&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二、-SpringMVC的关键组件"><a href="#二、-SpringMVC的关键组件" class="headerlink" title="二、 SpringMVC的关键组件"></a>二、 SpringMVC的关键组件</h2><h3 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1. 工作流程"></a>1. 工作流程</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/springmvc.png"></p><h3 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h3><table><thead><tr><th align="center">组件</th><th>描述</th><th>常用组件</th></tr></thead><tbody><tr><td align="center">HandlerMapping（处理器映射器）</td><td>匹配映射路径对应的Handler，返回可执行的处理器链对象HandlerExecutionChain对象</td><td>RequestMappingHandlerMapping</td></tr><tr><td align="center">HandlerAdapter（处理器适配器）</td><td>匹配HandlerExecutionChain对应的适配器进去处理器调用，返回视图对象</td><td>RequestMappingHandlerAdapter</td></tr><tr><td align="center">ViewResolver（视图解析器）</td><td>对视图模型对象进行解析</td><td>InternalResourceViewResolver</td></tr></tbody></table><h2 id="三、将JSON数据转化为POJO实体类"><a href="#三、将JSON数据转化为POJO实体类" class="headerlink" title="三、将JSON数据转化为POJO实体类"></a>三、将JSON数据转化为POJO实体类</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.0</span><span class="token number">.16</span><span class="token punctuation">.</span>graal<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-在Controller层中进行转换"><a href="#2-1-在Controller层中进行转换" class="headerlink" title="2.1 在Controller层中进行转换"></a>2.1 在Controller层中进行转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/param1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">param1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"body=&#123;&#125;"</span><span class="token punctuation">,</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）"><a href="#2-2-注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）" class="headerlink" title="2.2 注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）"></a>2.2 注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扩展消息转换器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息转换器对象</span>        <span class="token class-name">MappingJackson2HttpMessageConverter</span> messageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span>        messageConverter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>messageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、静态资源"><a href="#四、静态资源" class="headerlink" title="四、静态资源"></a>四、静态资源</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 静态资源加载,核心控制器拦截的是所有请求,需要对静态资源请求进行放行,通过配置放行资源实现   下面这个配置是可以放行所有的普通资源调用   让springMVC不处理静态资源,如 .css  .js  .html  .MP3 等--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、mvc-annotation-driven"><a href="#五、mvc-annotation-driven" class="headerlink" title="五、mvc:annotation-driven"></a>五、mvc:annotation-driven</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置mvc注解驱动--&gt;&lt;mvc:annotation-driven&#x2F;&gt;自动配置RequestMappingHandlerMapping、RequestMappingHandlerAdapter并加入json转换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="拦截器（Interceptor）"><a href="#拦截器（Interceptor）" class="headerlink" title="拦截器（Interceptor）"></a>拦截器（Interceptor）</h1><p>简介： 对资源进行拦截，</p><h2 id="1-拦截器与过滤器的区别"><a href="#1-拦截器与过滤器的区别" class="headerlink" title="1.拦截器与过滤器的区别"></a>1.拦截器与过滤器的区别</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/mvc%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p><table><thead><tr><th></th><th>Filter</th><th>Interceptor</th></tr></thead><tbody><tr><td>技术范畴</td><td>javaWeb</td><td>springMvc</td></tr><tr><td>拦截、过滤资源</td><td>任何请求</td><td>进入springmvc管理的请求，主要拦截Controller</td></tr><tr><td>执行时机</td><td>早于Servlet</td><td>晚于DispatherServlet</td></tr></tbody></table><h2 id="2-源码"><a href="#2-源码" class="headerlink" title="2.源码"></a>2.源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Comment</span> <span class="token comment">// 需要配置到Mvc的配置类中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//访问到Controller方法前  true：可以访问，false ：无法访问</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//访问到Controller方法后执行，可对方法中的模型数据和视图修改</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在全部完成之后，视图渲染完毕后，可以进行异常处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebMvcConfitgurer"><a href="#WebMvcConfitgurer" class="headerlink" title="WebMvcConfitgurer"></a>WebMvcConfitgurer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MvcInterceptor</span> userInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*   静态资源映射，自定义资源的映射，默认为static        registry.addResourceHandler("/backend/**").addResourceLocations("classpath:/backend/");        */</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加拦截器注册到spring容器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>userInterceptor<span class="token punctuation">)</span>                <span class="token comment">//资源配置，什么资源需要被拦截</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">//什么资源不需要拦截</span>            <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/employee/login"</span><span class="token punctuation">,</span><span class="token string">"/employee/logout"</span><span class="token punctuation">,</span><span class="token string">"/backend/**"</span><span class="token punctuation">,</span><span class="token string">"/front/**"</span><span class="token punctuation">,</span><span class="token string">"/user/sendMsg"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-执行顺序"><a href="#3-执行顺序" class="headerlink" title="3.执行顺序"></a>3.执行顺序</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/interceptor%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></p><h1 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h1><h2 id="一、DispatcherServlet（本质Servlet）"><a href="#一、DispatcherServlet（本质Servlet）" class="headerlink" title="一、DispatcherServlet（本质Servlet）"></a>一、DispatcherServlet（本质Servlet）</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/DispatcherServlet.png"></p><p><strong>servlet接口的源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>初始化springMvc的ApplicationContext容器，（有则获取，没有且父容器（Spring容器）也没有，则创建）</p><p>​      （！！！！spring获取Bean获取不到SpringMVC的Bean，SpringMVC可获取到Spring的Bean）</p></li><li><p>注册九大组件</p></li></ol><h3 id="1-init方法（）"><a href="#1-init方法（）" class="headerlink" title="1.init方法（）"></a>1.init方法（）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用模板方法模式（设计模式），init（）在HttpServletBean（抽象类）中声明。</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//init()在FrameworkServlet中</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Initializing Servlet '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//this.initWebApplicationContext();</span>            <span class="token comment">//初始化Spring容器，没有找到，找到父容器（spring的容器），也没有则创建。</span>                            <span class="token comment">//找到了，设置父容器       （！！！！spring获取Bean获取不到SpringMVC的Bean，SpringMVC可获取到Spring的Bean）</span>            <span class="token comment">//执行refresh（）方法：创建BeanFactory加载Bean工厂后处理器和Bean后处理器等等。。</span>            <span class="token comment">//发布事件监听器</span>            <span class="token comment">//FrameworkServlet中获取到监听器，并执行onfresh（）</span>            <span class="token comment">//onfresh（），注册SpringMvc九大组件，具体看2介绍</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span> <span class="token string">"shown which may lead to unsafe logging of potentially sensitive data"</span> <span class="token operator">:</span> <span class="token string">"masked to prevent unsafe logging of potentially sensitive data"</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"enableLoggingRequestDetails='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span> <span class="token string">"': request parameters and headers will be "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Completed initialization in "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-onfresh（）"><a href="#2-onfresh（）" class="headerlink" title="2.onfresh（）"></a>2.onfresh（）</h3><p>作用：注册九大组件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用于处理上传请求。处理方法是将普通的request包装成MultipartHttpServletRequest，后者可以直接调用getFile方法获取File，如果上传多个文件，还可以调用getFileMap得到FileName->File结构的Map。此组件中一共有三个方法，作用分别是判断是不是上传请求，将request包装成MultipartHttpServletRequest、处理完后清理上传过程中产生的临时资源。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//解析视图需要两个参数：一是视图名，另一个是Locale。视图名是处理器返回的，Locale是从哪里来的？这就是LocaleResolver要做的事情。LocaleResolver用于从request解析出Locale，Locale就是zh-cn之类，表示一个区域，有了这个就可以对不同区域的用户显示不同的结果。SpringMVC主要有两个地方用到了Locale：一是ViewResolver视图解析的时候；二是用到国际化资源或者主题的时候。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用于解析主题</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//是用来查找Handler的。在SpringMVC中会有很多请求，每个请求都需要一个Handler处理，具体接收到一个请求之后使用哪个Handler进行处理呢？这就是HandlerMapping需要做的事</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具，HandlerAdapter是使用工具干活的人。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 此组件的作用是根据异常设置ModelAndView，之后再交给render方法进行渲染。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ViewName是根据ViewName查找View，但有的Handler处理完后并没有设置View也没有设置ViewName，这时就需要从request获取ViewName了，如何从request中获取ViewName就是RequestToViewNameTranslator要做的事情了。RequestToViewNameTranslator在Spring MVC容器里只可以配置一个</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//ViewResolver用来将String类型的视图名和Locale解析为View类型的视图。ViewResolver需要找到渲染所用的模板和所用的技术（也就是视图的类型）进行渲染，具体的渲染过程则交由不同的视图自己完成。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用来管理FlashMap的，FlashMap主要用在redirect中传递参数。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-初始化时机："><a href="#2-初始化时机：" class="headerlink" title="2. 初始化时机："></a>2. 初始化时机：</h3><p>默认在使用时初始化（与Servlet一致），一般将其修改（Tomcat容器启动时：在yml中配置）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>      <span class="token key atrule">load-on-startup</span><span class="token punctuation">:</span> 1 （大于 0  即表示在启动时初始化）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Service（）"><a href="#3-Service（）" class="headerlink" title="3.Service（）"></a>3.Service（）</h3><p>核心doDispatch（）</p><h2 id="二、RequestMappingHandlerMapping"><a href="#二、RequestMappingHandlerMapping" class="headerlink" title="二、RequestMappingHandlerMapping"></a>二、RequestMappingHandlerMapping</h2><ol><li><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>解析@RequestMapping以及派生注解，并生成URL路径与控制器方法的映射关系，在初始化时生成</p></li><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>在使用时，需自定义配置，因为DispatcherServlet 初始化时默认添加，但是默认的不会作为bean，被容器扫描，所以自定义</p></li><li><p>获取映射结果</p></li></ol><pre class="line-numbers language-none"><code class="language-none">Map&lt;RequestMappingInfo, HandlerMethod&gt; methods &#x3D; requestMappingHandlerMapping.getHandlerMethods();结果：&#123;GET [&#x2F;test]&#125; &#x3D;&#x3D;&#x3D;&#x3D;com.poke.TestDisphtcher.a01.Controller#test()&#123;PUT [&#x2F;test1]&#125; &#x3D;&#x3D;&#x3D;&#x3D;com.poke.TestDisphtcher.a01.Controller#test1()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、RequestMappingHandlerAdapter"><a href="#三、RequestMappingHandlerAdapter" class="headerlink" title="三、RequestMappingHandlerAdapter"></a>三、RequestMappingHandlerAdapter</h2><ol><li><p>作用</p><p>调用控制器方法</p></li><li><p>测试</p></li></ol><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/springmvc.png"></p><p><strong>Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具；HandlerAdapter是使用工具干活的人。</strong></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><table><thead><tr><th>注解</th><th></th><th></th></tr></thead><tbody><tr><td>GetMapping</td><td></td><td></td></tr><tr><td>PostMapping</td><td></td><td></td></tr></tbody></table><h2 id="RequstParam"><a href="#RequstParam" class="headerlink" title="@RequstParam"></a>@RequstParam</h2><p><strong>作用</strong>：获取url中？后的参数（解决参数（形参）不一致问题）</p><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>作用：获取请求体中的数据</p><p>一般会有json与javaBean的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.导入jackson-databind包</span><span class="token comment">//2.将json格式字符串转化为Bean      不常用</span><span class="token class-name">ObjectMapper</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有异常抛出</span><span class="token comment">//常用的、、、、、、、、</span><span class="token comment">//springboot自动装配了json转换器jackson-databind</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>作用：获取Restful请求的数据 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">eg： localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>add<span class="token operator">/</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>作用：获取请求头</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>作用：获取Cookie中的jessionID</p><h2 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h2><p>作用：获取requst域中数据</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
