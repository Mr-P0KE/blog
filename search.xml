<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis入门</title>
      <link href="/blog/2023/04/10/redis-ru-men/"/>
      <url>/blog/2023/04/10/redis-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-docker下的安装"><a href="#1-docker下的安装" class="headerlink" title="1.docker下的安装"></a>1.docker下的安装</h2><p>请看docker章节</p><h2 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h2><p>使用yum安装</p><ol><li><p>安装Redis依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc tcl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装Redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-启动命令"><a href="#3-启动命令" class="headerlink" title="3.启动命令"></a>3.启动命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动redis</span><span class="token function">service</span> redis start<span class="token comment"># 停止redis</span><span class="token function">service</span> redis stop<span class="token comment"># 查看redis运行状态</span><span class="token function">service</span> redis status<span class="token comment"># 查看redis进程</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis<span class="token comment">#设置开机启动</span><span class="token function">chkconfig</span> redis on<span class="token comment">#进入Redis</span>redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/blog/2023/04/10/springboot/"/>
      <url>/blog/2023/04/10/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="SpringBoot的两大优点"><a href="#SpringBoot的两大优点" class="headerlink" title="SpringBoot的两大优点"></a>SpringBoot的两大优点</h1><h2 id="1-依赖管理"><a href="#1-依赖管理" class="headerlink" title="1.依赖管理"></a>1.依赖管理</h2><ul><li><strong>父项目做依赖管理</strong></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;/--依赖管理/--><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>&lt;/--他的父项目：声明了所有开发常用的依赖版本号，自动版本控制/--><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>starter场景启动器（简化依赖问题）</strong></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1、见到很多 spring-boot-starter-* ： *就某种场景2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入3、SpringBoot所有支持的场景https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。5、所有场景启动器最底层的依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>无需关注版本号，自动版本仲裁</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1、引入依赖默认都可以不写版本2、引入非版本仲裁的jar，要写版本号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>可以修改默认版本号</strong></p></li></ul><h2 id="2-自动配置"><a href="#2-自动配置" class="headerlink" title="2.自动配置"></a>2.自动配置</h2><ul><li><p>自动配好Tomcat</p></li><li><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li><li><p>自动配好SpringMVC</p></li><li><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p></li><li><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p></li><li><ul><li><strong>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</strong></li><li>无需以前的包扫描配置</li><li>想要改变扫描路径，@SpringBootApplication(scanBasePackages&#x3D;<strong>“com.atguigu”</strong>)</li></ul></li><li><ul><li><ul><li><p>或者@ComponentScan 指定扫描路径</p></li><li><pre><code class="java">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)<pre class="line-numbers language-none"><code class="language-none">- 各种配置拥有默认值- - 默认配置最终都是映射到某个类上，如：MultipartProperties  - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象- 按需加载所有自动配置项- - 非常多的starter  - 引入了哪些场景这个场景的自动配置才会开启  - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面  - - ......# SpringBoot添加组件## 1. 组件添加### @Configuration&#96;&#96;&#96;java@Configuration(value &#x3D; &quot;&quot;,proxyBeanMethods &#x3D; true)public class MyConfig &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul></li></ul><p>value：设置别名</p><p>proxyBeanMethods：代理Bean的方法（默认：true使用代理）：保证单例</p><h3 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h3><h3 id="ComponentScan、-Import"><a href="#ComponentScan、-Import" class="headerlink" title="@ComponentScan、@Import"></a>@ComponentScan、@Import</h3><p>@ComponentScan：导入包扫描范围</p><p>@Import：导入类（导入不在容器中的Bean）（必须在使用了导入Bean注解的类上使用）</p><h3 id="Conditional-：按照条件装配"><a href="#Conditional-：按照条件装配" class="headerlink" title="@Conditional ：按照条件装配"></a>@Conditional ：按照条件装配</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png"></p><h2 id="2-原生的配置文件导入"><a href="#2-原生的配置文件导入" class="headerlink" title="2. 原生的配置文件导入"></a>2. 原生的配置文件导入</h2><h3 id="ImportResource：导入原生的xml文件"><a href="#ImportResource：导入原生的xml文件" class="headerlink" title="@ImportResource：导入原生的xml文件"></a>@ImportResource：导入原生的xml文件</h3><h2 id="3-配置绑定："><a href="#3-配置绑定：" class="headerlink" title="3. 配置绑定："></a>3. 配置绑定：</h2><p><strong>读取配置文件的属内容绑定到属性中</strong></p><h3 id="ConfigurationProperties-Component"><a href="#ConfigurationProperties-Component" class="headerlink" title="@ConfigurationProperties+@Component"></a>@ConfigurationProperties+@Component</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mycar"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token function">mycar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>作用等同于多个@Value的单个属性赋值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userss</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;mycar.id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;mycar.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnableConfigurationProperties-ConfigurationProperties"><a href="#EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties + @ConfigurationProperties"></a>@EnableConfigurationProperties + @ConfigurationProperties</h3><p><strong>让使用了 @ConfigurationProperties 注解的类生效,并且将该类注入到 IOC 容器中,交由 IOC 容器进行管理</strong></p><h1 id="SpringBoot的自动配置"><a href="#SpringBoot的自动配置" class="headerlink" title="SpringBoot的自动配置"></a>SpringBoot的自动配置</h1><h2 id="1-引导类"><a href="#1-引导类" class="headerlink" title="1. 引导类"></a>1. 引导类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、-SpringBootConfiguration"><a href="#1、-SpringBootConfiguration" class="headerlink" title="1、@SpringBootConfiguration"></a>1、@SpringBootConfiguration</h3><p>@Configuration。代表当前是一个配置类</p><h3 id="2、-ComponentScan"><a href="#2、-ComponentScan" class="headerlink" title="2、@ComponentScan"></a>2、@ComponentScan</h3><p>指定扫描哪些，Spring注解；</p><h3 id="3、-EnableAutoConfiguration"><a href="#3、-EnableAutoConfiguration" class="headerlink" title="3、@EnableAutoConfiguration"></a>3、@EnableAutoConfiguration</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-AutoConfigurationPackage"><a href="#3-1-AutoConfigurationPackage" class="headerlink" title="3.1@AutoConfigurationPackage"></a>3.1@AutoConfigurationPackage</h4><p>作用：给Spring容器中导入一个Registrar注册器组件</p><p>@AutoConfigurationPackage扫描@Enitity、@MapperScan等第三方依赖的注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//给容器中导入一个组件</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//利用Registrar给容器中导入一系列组件</span><span class="token comment">//将指定的一个包下的所有组件导入进来？启动类所在包下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-Import-AutoConfigurationImportSelector-class"><a href="#3-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="3.2 @Import(AutoConfigurationImportSelector.class)"></a>3.2 @Import(AutoConfigurationImportSelector.class)</h4><ul><li><p>作用：通过import导入第三方提供的bean的配置类：AutoConfigurationImportSelector：给容器中导入组件</p></li><li><p>该类中有selectImports()方法，调用了getAutoConfigurationEntry(）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>getCandidateConfigurations()中SpringFactoriesLoader.loadFactoryNames()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>         <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>SpringFactoriesLoader.loadFactoryNames()中传入参数EnableAutoConfiguration.class</p><p>作用：扫描所有jar包类路径下的META-INF&#x2F;spring.factories文件，将扫描到的这些文件包装成properties对象，从properties中获取到EnableAutoConfiguration.class类名对应的值，将这些值添加到容器中，用这些类做自动配置功能</p></li></ul><h2 id="2-按需开启自动配置"><a href="#2-按需开启自动配置" class="headerlink" title="2.按需开启自动配置"></a>2.按需开启自动配置</h2><p>按照条件装配规则（@Conditional），最终会按需配置。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><p><strong>自动装配过程</strong></p><ol><li>通过各种注解实现了类与类之间的依赖关系，容器在启动的时候SpringApplication.run()，调用EnableAutoConfigurationImportSelector.class的selectImports方法</li><li>selectImports方法调用SpringFactoriesLoader.loadFactoryNames方法扫描jar包类路径下的META-INF&#x2F;spring.factories文件下，获取BeanConfiguration列表</li><li>loadFactoryNames方法会读取spring.factories中EnableAutoConfiguration.class类名对应的值<br>根据这些类上的注解判断，若条件满足，则该配置类生效，将配置文件中自己设置的属性值配置到对应的配置类中，最后注入到IOC容器中实现自动配置</li></ol><ul><li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>innoDB的MVCC（多版本并发）</title>
      <link href="/blog/2023/04/08/innodb-de-mvcc/"/>
      <url>/blog/2023/04/08/innodb-de-mvcc/</url>
      
        <content type="html"><![CDATA[<h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><h1 id="1-什么是MVCC？"><a href="#1-什么是MVCC？" class="headerlink" title="1.什么是MVCC？"></a>1.什么是MVCC？</h1><p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过数据行的多个版本管理来实现数据库的<code>并发控制</code>。这项技术使得在InnoDB的事务隔离级别下执行<code>一致性读</code>操作有了保证。换言之，就是为了<strong>查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁。</strong></p><p><strong>处理读写冲突，快照读</strong></p><h1 id="2-快照读与当前读"><a href="#2-快照读与当前读" class="headerlink" title="2.快照读与当前读"></a>2.快照读与当前读</h1><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去<strong>处理<code>读-写冲突</code><strong>，做到即使有读写冲突时，也能做到<code>不加锁</code>，<code>非阻塞并发读</code>，而这个读指的就是<code>快照读</code>, 而非<code>当前读</code>。当前读实际上是一种加锁的操作，是悲观锁的实现。而</strong>MVCC本质是采用乐观锁思想的一种方式。</strong></p><h2 id="1-快照读"><a href="#1-快照读" class="headerlink" title="1.快照读"></a>1.快照读</h2><p>快照读又叫一致性读，读取的是快照数据。<strong>不加锁的简单的</strong> <strong>SELECT</strong> <strong>都属于快照读</strong>，即不加锁的非阻塞读。</p><p>基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下，避免了加锁操作，降低了开销</p><p>既然是基于多版本，那么快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。</p><p>快照读的<strong>前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</strong></p><h2 id="2-当前读"><a href="#2-当前读" class="headerlink" title="2.当前读"></a>2.当前读</h2><p><strong>当前读读取的是记录的最新版本</strong>（最新数据，而不是历史版本的数据），<strong>读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。<strong>加锁的 SELECT，或者对数据进行增删改都会进行当前读。</strong></p><h2 id="3-再谈隔离级别"><a href="#3-再谈隔离级别" class="headerlink" title="3.再谈隔离级别"></a>3.再谈隔离级别</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409153251557.png"></p><p>MySQL默认事务隔离级别为<strong>可重复读</strong>，可解决脏读、不可重复读问题，不能解决幻读问题，但是InnoDB引擎提供了MVCC来解决幻读问题。</p><p>MVCC可以不采用锁机制，而是<strong>通过乐观锁来解决不可重复读和幻读问题。它在大多数情况下可以代替行级锁，降低系统开销。</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409153621404.png"></p><h2 id="4-再谈隐藏字段、Undo-Log版本链"><a href="#4-再谈隐藏字段、Undo-Log版本链" class="headerlink" title="4.再谈隐藏字段、Undo Log版本链"></a>4.再谈隐藏字段、Undo Log版本链</h2><p>undo_log</p><p><strong>回滚日志</strong>，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制) 。</p><p>回顾一下undo日志的版本链，对于使用<code>InnoDB</code>存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列。</p><ul><li>row_id: 与MVCC无关</li><li><code>trx_id</code>：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的<code>事务id</code>赋值给trx_id 隐藏列。</li><li><code>roll_pointer</code>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到 undo日志 中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409154013125.png"></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409154201674.png"></p><p><strong>InnoDB使用锁机制来保证不会脏写，也就是说：第一个事务更新了某条记录，会给这个事务加锁，另一个事务必须更新时等待第一个事务提交，释放锁后才可以更新。</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409154418383.png"></p><h1 id="3-MVCC实现原理（ReadView）"><a href="#3-MVCC实现原理（ReadView）" class="headerlink" title="3.MVCC实现原理（ReadView）"></a>3.MVCC实现原理（ReadView）</h1><p>MVCC 的实现依赖于：<strong>隐藏字段、Undo Log、Read View</strong>。</p><h2 id="1-什么是ReadView？"><a href="#1-什么是ReadView？" class="headerlink" title="1.什么是ReadView？"></a>1.什么是ReadView？</h2><p>在MVCC机制中，多事务对同一行记录的更新会产生多个历史快照，这些快照存储在Undo Log中，若<strong>事务想要查询行记录，则使用ReadView</strong>。</p><p>ReadView就是事务在使用MVCC机制进行快照读操作时产生的读视图。当事务启动时，会生成数据库系统当前的一个快照，InnoDB为每个事务构造了一个数组，用来记录并维护系统当前<code>活跃事务</code>的ID（“活跃”指的就是，启动了但还没提交）。</p><h2 id="2-不同隔离级别的ReadView"><a href="#2-不同隔离级别的ReadView" class="headerlink" title="2.不同隔离级别的ReadView"></a>2.不同隔离级别的ReadView</h2><p>使用<code>READ UNCOMMITTED</code>隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</p><p>使用<code>SERIALIZABLE</code>隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p><strong>使用<code>READ COMMITTED</code>和<code>REPEATABLE READ</code>隔离级别的事务</strong>，都必须保证读到<code>已经提交了的</code>事务修改过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</p><h2 id="3-ReadView的内容"><a href="#3-ReadView的内容" class="headerlink" title="3.ReadView的内容"></a>3.ReadView的内容</h2><ol><li><code>creator_trx_id</code>，创建这个 Read View 的事务 ID。</li></ol><blockquote><p>说明：只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为事务分配单独事务id，否则在一个只读事务中的事务id值都默认为0。 </p></blockquote><ol start="2"><li><p><code>trx_ids</code>，表示在生成ReadView时当前系统中活跃的读写事务的<code>事务id列表</code>。 </p></li><li><p><code>up_limit_id</code>，活跃的事务中最小的事务 ID。 </p></li><li><p><code>low_limit_id</code>，表示<strong>生成ReadView时系统中应该分配给下一个事务的<code>id</code>值</strong>。low_limit_id 是系统最大的事务id值，这里要注意是系统中的事务id，需要区别于正在活跃的事务ID。</p></li></ol><blockquote><p>注意：low_limit_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1， 2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，trx_ids就包括1和2，up_limit_id的值就是1，low_limit_id的值就是4。</p></blockquote><table><thead><tr><th>属性</th><th>说明</th><th></th></tr></thead><tbody><tr><td>creator_trx_id</td><td>创建ReadView的事务ID</td><td></td></tr><tr><td>trx_ids</td><td>当前生成ReadView未提交的所有事务ID</td><td></td></tr><tr><td>up_limit_id</td><td>当前生成ReadView未提交的事务ID的最小值</td><td></td></tr><tr><td>low_limit_id</td><td>当前<strong>所有事务ID</strong>的最大值（不是ReadView活跃的id）</td><td></td></tr></tbody></table><h2 id="4-ReadView的规则"><a href="#4-ReadView的规则" class="headerlink" title="4.ReadView的规则"></a>4.ReadView的规则</h2><p>有了这个ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见。</p><ul><li><p>如果被<strong>访问版本的trx_id（活跃的事务id（未提交的事务id））属性值与ReadView中的<code>creator_trx_id</code>（增删改的事务id）值相同</strong>，意味着当前事务在<strong>访问它自己修改过的记录，所以该版本可以被当前事务访问</strong>。</p><p><strong>总结</strong>：<strong>当前事务进行了增删改，未提交时仍可读取到</strong></p></li><li><p>如果被访问版本的<strong>trx_id属性值小于ReadView中的<code>up_limit_id</code>（活跃的最小事务id）值</strong>，表明<strong>生成该版本的事务在当前事务生成ReadView前已经提交</strong>，所以<strong>该版本可以被当前事务访问</strong>。</p><p><strong>总结：一个事务提交完成，可以读取到最新版本</strong></p></li><li><p>如果被<strong>访问版本的trx_id属性值大于或等于ReadView中的<code>low_limit_id</code>（新开的事务id）值</strong>，<strong>表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。</strong></p><p><strong>总结：一个新事务创建，不可以读取到当前的最新版本</strong></p></li><li><p>如果<strong>被访问版本的trx_id属性值在ReadView的<code>up_limit_id</code>和<code>low_limit_id</code>之间</strong>，那就<strong>需要判断一下trx_id属性值是不是在 trx_ids 列表中</strong>。</p><ul><li>如果<strong>在，说明创建ReadView时生成该版本的事务还是活跃的</strong>，该版本不可以被访问。</li><li>如果<strong>不在，说明创建ReadView时生成该版本的事务已经被提交</strong>，该版本可以被访问。</li></ul></li></ul><h2 id="5-整体流程"><a href="#5-整体流程" class="headerlink" title="5.整体流程"></a>5.整体流程</h2><ol><li><p>首先获取事务自己的版本号，也就是事务 ID； </p></li><li><p>获取 ReadView； </p></li><li><p>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</p></li><li><p>如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；</p></li><li><p>最后返回符合规则的数据。</p></li></ol><blockquote><p>InnoDB中，使用Undo Log+ReadView进行读取，Undo Log保存了历史快照，ReadView规则帮我们判断当前版本的数据是否可见。</p></blockquote><h4 id="读已提交级别：每次Select都会获取Read-View"><a href="#读已提交级别：每次Select都会获取Read-View" class="headerlink" title="读已提交级别：每次Select都会获取Read View"></a>读已提交级别：每次Select都会获取Read View</h4><h4 id="可重复读级别：只在第一次-SELECT-的时候会获取一次-Read-View，而后面所有的-SELECT-都会复用这个-Read"><a href="#可重复读级别：只在第一次-SELECT-的时候会获取一次-Read-View，而后面所有的-SELECT-都会复用这个-Read" class="headerlink" title="可重复读级别：只在第一次 SELECT 的时候会获取一次 Read View，而后面所有的 SELECT 都会复用这个 Read"></a>可重复读级别：只在第一次 SELECT 的时候会获取一次 Read View，而后面所有的 SELECT 都会复用这个 Read</h4>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql锁</title>
      <link href="/blog/2023/04/08/mysql-suo/"/>
      <url>/blog/2023/04/08/mysql-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h1><h1 id="MySQL并发事务访问相同记录的情况"><a href="#MySQL并发事务访问相同记录的情况" class="headerlink" title="MySQL并发事务访问相同记录的情况"></a>MySQL并发事务访问相同记录的情况</h1><h3 id="1-1读-读情况"><a href="#1-1读-读情况" class="headerlink" title="1.1读-读情况"></a>1.1读-读情况</h3><p>读读情况（多个事务同时访问一条数据），不会对记录产生影响。<strong>允许发生</strong></p><h3 id="1-2写写情况"><a href="#1-2写写情况" class="headerlink" title="1.2写写情况"></a>1.2写写情况</h3><p>写写情况（多个事务同时修改一条记录），会发生<code>脏写</code>情况，不允许发生。多个未提交事务对同一数据修改时，<strong>排队执行</strong>，通过<strong>锁实现</strong>。<strong>锁其实是一种内存中的结构</strong></p><p><strong>当一个事务A向进行数据改动时，首先查看该数据是否有锁结构，若没有，则生成一个锁结构。此时若有其他事务B修改该数据，发现该数据有锁结构，事务B会获取锁失败，进入阻塞状态，直到A事务提交，B事务才会获得锁。</strong></p><h3 id="1-3读写、写读情况"><a href="#1-3读写、写读情况" class="headerlink" title="1.3读写、写读情况"></a>1.3读写、写读情况</h3><p>可能出现**<code>脏读、幻读、不可重复读</code>**的情况，MySQL在可重复读的情况下，解决了幻读问题。</p><h3 id="1-4问题的解决方案"><a href="#1-4问题的解决方案" class="headerlink" title="1.4问题的解决方案"></a>1.4问题的解决方案</h3><h4 id="方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁"><a href="#方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁" class="headerlink" title="方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁"></a>方案一：读操作利用多版本并发控制（<code>MVCC</code>），写操作进行<code>加锁</code></h4><p>MVCC：就是生成一个<code>ReadView</code>，通过ReadView找到符合条件的记录版本（历史版本由<code>undo日志</code>构建）。查询语句只能<code>读</code>到在生成ReadView之前<code>已提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，<code>读-写</code>操作并不冲突。</p><blockquote><p>普通的SELECT语句在<strong>READ COMMITTED和REPEATABLE READ</strong>隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code>隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code>，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code>隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作 </code>才会生成一个ReadView，之后的SELECT操作都<code>复用</code>这ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><h4 id="方案二：读、写操作都采用加锁的方式。"><a href="#方案二：读、写操作都采用加锁的方式。" class="headerlink" title="方案二：读、写操作都采用加锁的方式。"></a>方案二：读、写操作都采用<code>加锁</code>的方式。</h4><p>小结对比发现：</p><ul><li>采用<code>MVCC</code>方式的话，<code>读-写</code>操作彼此并不冲突，<code>性能更高</code>。</li><li>采用<code>加锁</code>方式的话，<code>读-写</code>操作彼此需要<code>排队执行</code>，影响性能。</li></ul><h1 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230408153835088.png"></p><h2 id="1-数据操作分类：共享锁与排他锁"><a href="#1-数据操作分类：共享锁与排他锁" class="headerlink" title="1.数据操作分类：共享锁与排他锁"></a>1.数据操作分类：共享锁与排他锁</h2><table><thead><tr><th>锁类型</th><th></th><th>锁兼容情况</th></tr></thead><tbody><tr><td>共享锁（S）</td><td>同一份数据、多个事务的读操作同时进行不受影响。</td><td>兼容S锁、排斥X锁</td></tr><tr><td>排他锁（X）</td><td>当前写操作未完成前，阻断其他事务的读锁与写锁</td><td>排斥S锁、X锁</td></tr></tbody></table><p><strong>需要注意的是对于</strong> <strong>InnoDB</strong> <strong>引擎来说，S锁和X锁可以加在表上，也可以加在行上。</strong></p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a><strong>重点</strong></h4><p><strong>举例锁兼容情况（行级读写锁）：</strong></p><p>事务T1对数据A进行读操作，事务T2对数据A进行读操作，事务T3对数据A进行写操作。</p><p>事务T1、事务T2可以同时进行，但是事务T3必须等待事务T1,T2完成才可以。（<strong>因为S锁与X锁互斥）</strong></p><h3 id="1-锁定读"><a href="#1-锁定读" class="headerlink" title="1. 锁定读"></a><strong>1. 锁定读</strong></h3><p>在采用<code>加锁</code>方式解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题时，读取一条记录时需要获取该记录的<code>S锁</code>，其实是不严谨的，有时候需要在读取记录时就获取记录的<code>X锁</code>，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的<code>SELECT</code>语句格式：</p><ul><li>**对读取的记录加<code>S锁</code>**：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ... LOCK IN SHARE MODE;# 或SELECT ... FOR SHARE; #(8.0新增语法)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>对读取的记录加<code>X锁</code>：</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ... FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：select … for update 语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住</strong></p><h4 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h4><h5 id="1-两者都加S锁：均可操作"><a href="#1-两者都加S锁：均可操作" class="headerlink" title="1.两者都加S锁：均可操作"></a>1.两者都加S锁：均可操作</h5><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230408163734853.png"></p><h5 id="2-一个读锁一个写锁：写锁会阻塞，超时会返回报错"><a href="#2-一个读锁一个写锁：写锁会阻塞，超时会返回报错" class="headerlink" title="2.一个读锁一个写锁：写锁会阻塞，超时会返回报错"></a>2.一个读锁一个写锁：写锁会阻塞，超时会返回报错</h5><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230408164130049.png"></p><h5 id="3-一个写锁，一个读锁：读锁会阻塞，超时会返回报错"><a href="#3-一个写锁，一个读锁：读锁会阻塞，超时会返回报错" class="headerlink" title="3.一个写锁，一个读锁：读锁会阻塞，超时会返回报错"></a>3.一个写锁，一个读锁：读锁会阻塞，超时会返回报错</h5><h4 id="MySQL8-0新特性："><a href="#MySQL8-0新特性：" class="headerlink" title="MySQL8.0新特性："></a><strong>MySQL8.0新特性：</strong></h4><p>在5.7及之前的版本，SELECT … FOR UPDATE，如果获取不到锁，会一直等待，直到<code>innodb_lock_wait_timeout</code>超时。在8.0版本中，SELECT … FOR UPDATE, SELECT … FOR SHARE 添加<code>NOWAIT</code>、<code>SKIP LOCKED</code>语法，跳过锁等待，或者跳过锁定。</p><ul><li>NOWAIT：如果查询的行已经加锁，会立即报错返回</li><li>SKIP LOCKED：如果查询的行已经加锁，只返回结果中不包含被锁定的行</li></ul><h3 id="2-写操作"><a href="#2-写操作" class="headerlink" title="2.写操作"></a>2.写操作</h3><p><strong>增删改操作</strong></p><ul><li><p><code>DELETE</code>：对一条记录做DELETE操作的过程其实是先在<code>B+</code>树中定位到这条记录的位置，然后获取<strong>这条记录的<code>X锁</code>，</strong>再执行<code>delete mark</code>操作。</p></li><li><p><code>UPDATE</code>：在对一条记录做UPDATE操作时分为三种情况：</p><ul><li><p><strong>情况1：未修改该记录的键值（主键），并且被更新的列占用的存储空间在修改前后未发生变化。</strong></p><p>则先在<code>B+</code>树中定位到这条记录的位置，然后再获取一下记录的<code>X锁</code>，最后在原纪录的位置进行修改操作。</p></li><li><p><strong>情况2：未修改该记录的键值（主键），并且至少有一个被更新的列占用的存储空间在修改前后发生变化。</strong></p><p>则先在<code>B+</code>树中定位到这条记录的位置，然后获取一下记录的<code>X锁</code>，将该记录彻底删除掉（就是把记录彻底移入垃圾链表），最后再插入一条新记录。新插入的记录由**<code>INSERT</code>操作提供的<code>隐式锁</code>进行保护。**</p></li><li><p><strong>情况3：修改该记录的键值</strong>，</p><p>则相当于在原纪录上做<code>DELECT</code>操作之后再来一次<code>INSERT</code>操作。</p></li></ul></li><li><p><code>INSERT</code>：一般情况下，新插入一条记录的操作并不加锁，通过一种称之为**<code>隐式锁</code>**的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。</p></li></ul><h2 id="2-数据操作的粒度分类：表级、页级、行级锁"><a href="#2-数据操作的粒度分类：表级、页级、行级锁" class="headerlink" title="2.数据操作的粒度分类：表级、页级、行级锁"></a>2.数据操作的粒度分类：表级、页级、行级锁</h2><p>锁粒度越低，并发度越好，但是会消耗一定资源，降低系统性能。</p><h3 id="1-表级锁"><a href="#1-表级锁" class="headerlink" title="1.表级锁"></a>1.表级锁</h3><p>锁定整张表，它是MySQL中最基本的锁策略，并<code>不依赖于存储引擎</code>，并且<strong>表锁是<code>开销最少</code><strong>的策略。由于表级锁一次会将整个表锁定，所以</strong>可以很好的<code>避免死锁</code>的问题</strong>。当然，锁的粒度大所带来最大的负面影响就是<strong>出现锁资源争用的概率也会最高</strong>，导致<code>并发率大打折扣</code>。</p><p><strong>表级锁由服务层控制。</strong></p><h4 id="1-表锁"><a href="#1-表锁" class="headerlink" title="1.表锁"></a>1.表锁</h4><p>**一般情况下，不会使用InnoDB存储引擎提供的表级别的<code>S锁</code>和<code>X锁</code>**。只会在一些特殊情况下，比方说<code>崩溃恢复</code>过程中用到。比如，在系统变量<code>autocommit=0，innodb_table_locks = 1</code>时，<code>手动</code>获取InnoDB存储引擎提供的表t 的<code>S锁</code>或者<code>X锁</code>可以这么写：</p><ul><li><p>加锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token operator">/</span> 客户端断开连接 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>总结：MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。<code>InnoDB</code>存储引擎是不会为这个表添加表级别的<code>读锁</code>或者<code>写锁</code>的。因为InnoDB有颗粒度更高的行锁。</p><h4 id="2-意向锁"><a href="#2-意向锁" class="headerlink" title="2.意向锁"></a>2.意向锁</h4><p>InnoDB 支持<code>多粒度锁（multiple granularity locking）</code>，它允许<code>行级锁</code>与<code>表级锁</code>共存，而<strong>意向锁</strong>就是其中的一种<code>表锁</code>。</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>1、意向锁的存在是为了<strong>协调行锁和表锁的关系</strong>，支持多粒度（表锁与行锁）的锁并存。</p><p>*2、**意向锁是一种<code>不与行级锁冲突的表级锁</code>**，这一点非常重要。</p><p>3、表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</p><p>意向锁分为两种：</p><ul><li><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加<strong>共享锁</strong>（S锁）</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。 SELECT ... LOCK IN SHARE MODE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加<strong>排他锁</strong>（X锁）</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。 SELECT  ... FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即：<strong>意向锁是由存储引擎<code>自己维护的</code>，用户无法手动操作意向锁</strong>，在为数据行加共享 &#x2F; 排他锁之前，InooDB 会先获取该数据行<code>所在数据表的对应意向锁</code>。</p><h5 id="意向锁出现的意义？"><a href="#意向锁出现的意义？" class="headerlink" title="意向锁出现的意义？"></a>意向锁出现的意义？</h5><p>在数据表的场景中，<strong>如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了</strong>，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排它锁即可。</p><ul><li>如果事务想要获取数据表中某些记录的共享锁，就需要在数据表上<code>添加意向共享锁</code></li><li>如果事务想要获取数据表中某些记录的排它锁，就需要在数据表上<code>添加意向排他锁</code></li></ul><h4 id="3-元数据锁（MDL锁）"><a href="#3-元数据锁（MDL锁）" class="headerlink" title="3.元数据锁（MDL锁）"></a>3.元数据锁（MDL锁）</h4><p>MDL加锁过程是<strong>系统自动控制，无需显式使用</strong>，在访问一张表的时候会自动加上。MDL锁主要作用是<strong>维护表元数据的数据一致性</strong>，在表上有活动事务的时候，不可以对元数据进行写入操作。为了<strong>避免DML与 DDL冲突，保证读写的正确性。</strong></p><p><strong>当对一个表做增删改查操作的时候，加MDL读锁（共享锁）；当要对表做结构变更操作的时候，加MDL写锁（排他锁）。</strong></p><h4 id="4-自增锁（AUTO-INC锁）了解"><a href="#4-自增锁（AUTO-INC锁）了解" class="headerlink" title="4.自增锁（AUTO-INC锁）了解"></a>4.自增锁（AUTO-INC锁）了解</h4><p><strong>1. “Simple inserts”</strong> <strong>（简单插入）</strong></p><p>可以<code>预先确定要插入的行数</code>（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT...VALUES()</code>和<code>REPLACE</code>语句。</p><p><strong>2. “Bulk inserts”</strong> <strong>（批量插入）</strong></p><p><code>事先不知道要插入的行数</code>（和所需自动递增值的数量）的语句。比如<code>INSERT ... SELECT</code>，<code>REPLACE ... SELECT</code>和<code>LOAD DATA</code>语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。</p><p><strong>3. “Mixed-mode inserts”</strong> <strong>（混合模式插入）</strong></p><p>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如<code>INSERT INTO teacher (id,name) VALUES (1,&#39;a&#39;), (NULL,&#39;b&#39;), (5,&#39;c&#39;), (NULL,&#39;d&#39;);</code>只是指定了部分id的值。另一种类型的“混合模式插入”是<code>INSERT ... ON DUPLICATE KEY UPDATE</code>。 </p><p><strong>AUTO-INT锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁</strong>，在执行插入语句时就在表级别加一个AUTO-INT锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INT锁释放掉。<strong>一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞</strong>，可以保证一个语句中分配的递增值是连续的。也正因为此，其并发性显然并不高，<strong>当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争</strong>，这样的并发潜力其实是很低下的，所以innodb通过<code>innodb_autoinc_lock_mode</code>的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。</p><p>innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：</p><p><code>（1）innodb_autoinc_lock_mode = 0(“传统”锁定模式)</code></p><p>在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的时候，对于AUTO-INC锁的争夺会<code>限制并发</code>能力。</p><p><code>（2）innodb_autoinc_lock_mode = 1(“连续”锁定模式)</code></p><p>在 MySQL 8.0 之前，连续锁定模式是<code>默认</code>的。</p><p>在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT … SELECT，REPLACE … SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。</p><p>对于“Simple inserts”（要插入的行数事先已知），则通过在<code>mutex（轻量锁）</code>的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。 </p><p><code>（3）innodb_autoinc_lock_mode = 2(“交错”锁定模式)</code></p><p>从 MySQL 8.0 开始，交错锁模式是<code>默认</code>设置。</p><p>在这种锁定模式下，所有类INSERT语句都不会使用表级AUTO-INC锁，并且可以同时执行多个语句。这是最快和最可拓展的锁定模式，但是当使用基于语句的复制或恢复方案时，<strong>从二进制日志重播SQL语句时，这是不安全的。</strong></p><p>在此锁定模式下，自动递增值<code>保证</code>在所有并发执行的所有类型的insert语句中是<code>唯一</code>且<code>单调递增</code>的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），<strong>为任何给定语句插入的行生成的值可能不是连续的。</strong></p><h3 id="2-行级锁"><a href="#2-行级锁" class="headerlink" title="2.行级锁"></a>2.行级锁</h3><p>行锁（Row Lock）也称为记录锁，就是锁住某一行（某条记录row）。需要注意的是，MySQL服务器层并没有实现行锁机制，<strong>行级锁只在存储引擎层实现。</strong></p><p><strong>优点：</strong>锁定力度小，发生<code>锁冲突概率低</code>，可以实现的<code>并发度高</code></p><p><strong>缺点：</strong>对于<code>锁的开销比较大</code>，加锁会比较慢，容易出现<code>死锁</code>情况</p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p><table><thead><tr><th>锁</th><th></th><th>RC（读已提交），RR（可重复读）</th><th>默认启用</th></tr></thead><tbody><tr><td>行锁（Record Lock）</td><td>锁定单个行记录的锁，防止其他事务对此行进行update和delete</td><td>RC、RR隔离级别下都支持。</td><td></td></tr><tr><td>间隙锁（GAP）</td><td>锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事 务在这个间隙进行insert，产生幻读</td><td>在RR隔离级别下都支持。</td><td></td></tr><tr><td>临键锁(NEXT-KEY)</td><td>行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。</td><td>在RR隔离级别下支持。</td><td>RR</td></tr></tbody></table><h4 id="1-记录锁（行锁-Record-Locks）"><a href="#1-记录锁（行锁-Record-Locks）" class="headerlink" title="1.记录锁（行锁 Record Locks）"></a>1.记录锁（行锁 Record Locks）</h4><p>官方的类型名称为：<code>LOCK_REC_NOT_GAP</code>。</p><p>记录锁是有S锁和X锁之分的，称之为<code>S型记录锁</code>和<code>X型记录锁</code>。</p><p>增删改加排他锁（X），查询添加共享锁（S）</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><h4 id="2-间隙锁（Gap-Locks）"><a href="#2-间隙锁（Gap-Locks）" class="headerlink" title="2.间隙锁（Gap Locks）"></a>2.间隙锁（Gap Locks）</h4><p><code>MySQL</code>在<code>REPEATABLE READ</code>隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用<code>MVCC</code>方案解决，也可以采用<code>加锁</code>方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些<code>幻影记录</code>加上<code>记录锁</code>。InnoDB提出了一种称之为<code>Gap Locks</code>的锁。</p><p>官方的类型名称为：<code>LOCK_GAP</code>，我们可以简称为<code>gap锁</code>。</p><p><strong>gap锁的提出仅仅是为了防止插入幻影记录而提出的</strong>。虽然有<code>共享gap锁</code>和<code>独占gap锁</code>这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p><p><strong>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会 阻止另一个事务在同一间隙上采用间隙锁。</strong></p><h4 id="3-临键锁（Next-Key-Locks）"><a href="#3-临键锁（Next-Key-Locks）" class="headerlink" title="3.临键锁（Next-Key Locks）"></a>3.临键锁（Next-Key Locks）</h4><p>时候我们既想<code>锁住某条记录</code>，又想<code>阻止</code>其他事务在该记录前边的<code>间隙插入新记录</code>，所以InnoDB就提出了一种称之为<code>Next-Key Locks</code>的锁，官方的类型名称为：<code>LOCK_ORDINARY</code></p><p><strong>Next-Key Locks是在存储引擎<code>innodb</code>、事务级别在<code>可重复读</code>的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。</strong> </p><p><strong>记录锁+间隙锁</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#id = 3~8中间无数据</span><span class="token keyword">begin</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;=</span><span class="token number">8</span> <span class="token operator">and</span> id <span class="token operator">></span> <span class="token number">3</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token comment">#会锁住 3-8之间的间隙和8的记录的写锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-插入意向锁"><a href="#4-插入意向锁" class="headerlink" title="4.插入意向锁"></a>4.插入意向锁</h4><p>​     一个事务在<code>插入</code>一条记录时需要判断一下插入位置是不是被别的事务加了<code>gap锁</code>（<code>next-key锁</code>也包含<code>gap锁</code>），如果有的话，插入操作需要等待，直到拥有<code>gap锁</code>的那个事务提交。但是<strong>InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构</strong>，表明有事务想在某个<code>间隙</code>中<code>插入</code>新记录，但是现在在等待。</p><p>事实上<strong>插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。</strong></p><h3 id="3-页锁"><a href="#3-页锁" class="headerlink" title="3.页锁"></a>3.页锁</h3><p>页锁就是在<code>页的粒度</code>上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。<strong>页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</strong></p><h2 id="3-对待锁的态度：乐观锁、悲观锁"><a href="#3-对待锁的态度：乐观锁、悲观锁" class="headerlink" title="3.对待锁的态度：乐观锁、悲观锁"></a>3.对待锁的态度：乐观锁、悲观锁</h2><h3 id="1-悲观锁"><a href="#1-悲观锁" class="headerlink" title="1.悲观锁"></a>1.悲观锁</h3><p>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会<code>阻塞</code>直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p><strong>注意</strong>：<strong>select … for update 语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住。</strong></p><h3 id="2-乐观锁"><a href="#2-乐观锁" class="headerlink" title="2.乐观锁"></a>2.乐观锁</h3><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是<strong>不采用数据库自身的锁机制，而是通过程序来实现</strong>。在程序上，我们可以采用<code>版本号机制</code>或者<code>CAS机制</code>实现。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。在Java中<code>java.util.concurrent.atomic</code>包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。</p><p><strong>1.</strong> <strong>乐观锁的版本号机制</strong></p><p>在表中设计一个<code>版本字段 version</code>，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行<code>UPDATE ... SET version=version+1 WHERE version=version</code>。此时如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p><strong>2.</strong> <strong>乐观锁的时间戳机制</strong></p><p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。</p><h3 id="3-两者的使用场景"><a href="#3-两者的使用场景" class="headerlink" title="3.两者的使用场景"></a>3.两者的使用场景</h3><ol><li><p><code>乐观锁</code>适合<code>读操作多</code>的场景，相对来说写的操作比较少。它的优点在于<code>程序实现</code>，<code>不存在死锁</code>问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</p></li><li><p><code>悲观锁</code>适合<code>写操作多</code>的场景，因为写的操作具有<code>排它性</code>。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止<code>读 - 写</code>和<code>写 - 写</code>的冲突。</p></li></ol><h2 id="4-加锁的方式划分：显式锁、隐式锁"><a href="#4-加锁的方式划分：显式锁、隐式锁" class="headerlink" title="4.加锁的方式划分：显式锁、隐式锁"></a>4.加锁的方式划分：显式锁、隐式锁</h2><h3 id="1-隐式锁"><a href="#1-隐式锁" class="headerlink" title="1. 隐式锁"></a><strong>1.</strong> <strong>隐式锁</strong></h3><p><strong>保护新插入记录提交前不被别的事务访问（脏读）</strong></p><p>事务A进行<code>insert</code>操作 ，若插入的间隙被其他事务加了间隙锁（Gap），那么事务A的insert操作会阻塞，并在间隙添加<strong>插入意向锁</strong>，否则一般情况不加锁。</p><p>如果一个事务插入了数据但是没提交，另一个事务获取这条记录（S锁）或者修改记录（X锁）则：</p><ul><li><p><strong>情景一：</strong>对于<strong>聚簇索引记录来说，有一个<code>trx_id</code>隐藏列</strong>，该隐藏列**记录着最后改动该记录的<code>事务id</code>**。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的<code>trx_id</code>隐藏列代表的的就是当前事务的<code>事务id</code>，如果其他事务此时想对该记录添加<code>S锁</code>或者<code>X锁</code>时，首先会看一下该记录的<code>trx_id</code>隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个<code>X锁</code>（也就是为当前事务创建一个锁结构，<code>is_waiting</code>属性是<code>false</code>），然后自己进入等待状态（也就是为自己也创建一个锁结构，<code>is_waiting</code>属性是<code>true</code>）。</p></li><li><p><strong>情景二：</strong>对于二级索引记录来说，本身并没有<code>trx_id</code>隐藏列，但是在二级索引页面的<code>Page Header</code>部分有一个<code>PAGE_MAX_TRX_ID</code>属性，该属性代表对该页面做改动的最大的<code>事务id</code>，如果<code>PAGE_MAX_TRX_ID</code>属性值小于当前最小的活跃<code>事务id</code>，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复<code>情景一</code>的做法。</p></li></ul><p>总结：<strong>一个事务A对新插入的记录可以不显示的加锁（生成一个锁结构），但是由于<code>事务id</code>的存在，相当于加了一个<code>隐式锁</code>。别的事务B在对这条记录加<code>S锁</code>或者<code>X锁</code>时，由于<code>隐式锁</code>的存在，会先帮助当前事务A生成一个锁结构，然后自己(事务B)再生成一个锁结构后进入等待状态。隐式锁是一种<code>延迟加锁</code>的机制，从而来减少加锁的数量。</strong></p><h3 id="2-显式锁"><a href="#2-显式锁" class="headerlink" title="2. 显式锁"></a><strong>2.</strong> <strong>显式锁</strong></h3><p>通过特定的语句进行加锁，我们一般称之为显示加锁。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql逻辑架构与存储引擎</title>
      <link href="/blog/2023/04/07/mysql-luo-ji-jia-gou/"/>
      <url>/blog/2023/04/07/mysql-luo-ji-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql逻辑架构"><a href="#MySql逻辑架构" class="headerlink" title="MySql逻辑架构"></a>MySql逻辑架构</h1><h2 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1.逻辑架构剖析"></a>1.逻辑架构剖析</h2><h3 id="服务器处理客户端请求"><a href="#服务器处理客户端请求" class="headerlink" title="服务器处理客户端请求"></a>服务器处理客户端请求</h3><p>Mysql是典型的<code>C/S</code>架构，即<code>Client/Server架构</code>，服务端使用<code>mysqld</code></p><p>客户端发送文本（sql语句），服务器进程处理后再向客户端发送一段文本（处理结果）</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230407213918517.png"></p><p><strong>具体架构图</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/9e860b34212846379af50abe60b59dca.png" alt="具体架构图"></p><table><thead><tr><th>组件</th><th>中文介绍</th><th>作用</th><th></th></tr></thead><tbody><tr><td>Connectors</td><td>客户端服务程序</td><td>保证数据库的连接</td><td></td></tr><tr><td><strong>服务器端</strong></td><td></td><td></td><td></td></tr><tr><td>Management Services &amp; Utilities</td><td>基础服务组件</td><td></td><td></td></tr><tr><td>Connection Pool</td><td>数据库连接池</td><td>提供多个用于客户端与服务器交互的线程</td><td></td></tr><tr><td>SQL Interface</td><td>SQL接口</td><td>接收SQL指令，返回SQL接口</td><td></td></tr><tr><td>Parser</td><td>解析器</td><td>语法解析语义解析，创建语法树</td><td></td></tr><tr><td>Optimizer</td><td>查询优化器</td><td>确定 SQL 语句的执行路径，生成一个<code>执行计划</code>。</td><td>核心组件</td></tr><tr><td>Caches &amp;Buffers</td><td>查询缓存组件</td><td>缓存查询结果</td><td>8.0删除</td></tr><tr><td>Pluggable Storage Engines</td><td>插件式存储引擎</td><td>负责MySQL数据的存储和提取（与文件系统交互）</td><td></td></tr><tr><td>File System</td><td>文件系统</td><td>存储数据</td><td></td></tr><tr><td>File &amp; Logs</td><td>日志文件</td><td>存储日志</td><td></td></tr></tbody></table><h3 id="1-1-第1层：连接层"><a href="#1-1-第1层：连接层" class="headerlink" title="1.1 第1层：连接层"></a>1.1 第1层：连接层</h3><p>系统（客户端）访问<code>MySQL</code>服务器前，做的第一件事就是建立<code>TCP</code>连接。</p><p>经过三次握手建立连接成功后，<code>MySQL</code>服务器对<code>TCP</code>传输过来的账号密码做身份认证、权限获取。</p><ul><li><strong>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</strong></li><li><strong>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</strong></li></ul><p>MySQL服务器针对TCP连接有<code>TCP连接池</code>控制连接数量。</p><p><code>TCP</code>连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池（Connection Pool），去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h3 id="1-2第2层：服务层"><a href="#1-2第2层：服务层" class="headerlink" title="1.2第2层：服务层"></a>1.2第2层：服务层</h3><p><strong>SQL Interface: SQL接口</strong></p><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface </li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li></ul><p><strong>Parser:</strong> <strong>解析器</strong></p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建<code>语法树</code>，并根据数据字典丰富查询语法树，会<code>验证该客户端是否具有执行该查询的权限</code>。创建好语法树后，MySQL还会对SQL查询进行语法上的优化，进行查询重写。</li></ul><p><strong>设计模式中的解释器模式</strong></p><p><strong>Optimizer:</strong> <strong>查询优化器</strong></p><ul><li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个**<code>执行计划</code>。**</li><li>这个执行计划表明应该**<code>使用哪些索引</code><strong>进行查询（全表检索还是使用索引检索），</strong>表之间的连接顺序<strong>如何，最后会按照执</strong>行计划中的步骤调用存储引擎提供的方法来真正的执行查询**，并将查询结果返回给用户。</li><li>它使用“<code>选取-投影-连接</code>”策略进行查询。例如：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT id,name FROM student WHERE gender &#x3D; &#39;女&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个SELECT查询先根据WHERE语句进行<code>选取</code>，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性<code>投影</code>，而不是将属性全部取出以后再进行过滤，将这两个查询条件<code>连接</code>起来生成最终查询结果。</p><p><strong>Caches &amp; Buffers： 查询缓存组件</strong></p><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在<code>不同客户端之间共享</code>。 </li><li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在<code>MySQL 8.0中删除</code>。</li></ul><h3 id="1-3-第3层：引擎层"><a href="#1-3-第3层：引擎层" class="headerlink" title="1.3 第3层：引擎层"></a><strong>1.3</strong> 第3层：引擎层</h3><p>插件式存储引擎层（ Storage Engines），<strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作</strong>，服务层通过API与存储引擎进行通信。</p><h2 id="2-SQL执行流程"><a href="#2-SQL执行流程" class="headerlink" title="2.SQL执行流程"></a>2.SQL执行流程</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR客户端与服务器创建连接 <span class="token arrow operator">---></span>线程池分配线程 <span class="token arrow operator">---></span> SQL接口接收SQL <span class="token arrow operator">---></span> 8.0之前查询缓存 <span class="token arrow operator">---></span>解析器解析SQL接口接收SQL <span class="token arrow operator">---></span> 8.0<span class="token arrow operator">---></span>解析器解析<span class="token arrow operator">---></span> 优化器优化查询 <span class="token arrow operator">---></span> 调用存储引擎相关API <span class="token arrow operator">---></span>文件系统查询<span class="token arrow operator">---></span>8.0之前缓存数据<span class="token arrow operator">---></span> SQL接口返回数据文件系统查询<span class="token arrow operator">---></span>不缓存<span class="token arrow operator">---></span>SQL接口返回数据<span class="token arrow operator">---></span>线程返回数据<span class="token arrow operator">---></span>线程放回连接池<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230407222956838.png"></p><h3 id="1-查询缓存"><a href="#1-查询缓存" class="headerlink" title="1.查询缓存"></a>1.查询缓存</h3><p>SQL先查询缓存，找到返回结果。现在可使用NoSql数据库实现。</p><p><strong>因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。</strong></p><p><strong>缓存失效</strong>：表的结构或者数据被修改</p><h3 id="2-解析器解析"><a href="#2-解析器解析" class="headerlink" title="*2.解析器解析"></a>*2.解析器解析</h3><p>分析器先做“<code>词法分析</code>“，分析每个字符串的关键字和表名字段名等。</p><p>再做“<code>语法分析</code>”，判断语法是否有误（SQL编写是否正确），正确：生成语法树。错误：返回</p><h3 id="3-优化器确定执行路径"><a href="#3-优化器确定执行路径" class="headerlink" title="*3. 优化器确定执行路径"></a>*<strong>3.</strong> <strong>优化器确定执行路径</strong></h3><p>在优化器中会确定 SQL 语句的执行路径，</p><p><strong>比如是根据<code>全表检索</code>，还是根据<code>索引检索</code>，多表关联查询的表连接顺序，子查询是否转化内连接等，</strong></p><p>在查询优化器中：可以分为**<code>逻辑查询</code>优化阶段和<code>物理查询</code>优化阶段。<strong>最终</strong>生成执行计划**。</p><p>物理查询优化：通过索引和表连接方式等。</p><p>逻辑查询优化：<strong>SQL等价变换</strong>提高效率（换一种查询语句写法效率更好）</p><p><strong>具体优化请看SQL优化篇。</strong></p><h3 id="4-执行器执行"><a href="#4-执行器执行" class="headerlink" title="4.执行器执行"></a>4.执行器执行</h3><p>在执行之前需要判断该用户是否<code>具备权限</code>。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><h2 id="3-数据库缓冲池（Buffer-Pool）"><a href="#3-数据库缓冲池（Buffer-Pool）" class="headerlink" title="3.数据库缓冲池（Buffer Pool）"></a>3.数据库缓冲池（Buffer Pool）</h2><p><strong>缓冲池 ！&#x3D; 查询缓存</strong></p><p>主内存中的一个区域，里面可以<strong>缓存磁盘上经常操作的真实数据</strong>，在执行增 删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而<strong>减少磁盘IO</strong>，加快处理速度。</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230407230200208.png"></p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型： </p><p>• free page：空闲page，未被使用。</p><p> • clean page：被使用page，数据没有被修改过。</p><p> • dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</p><p><strong>肮页会定期将数据存储到磁盘中。</strong></p><p><strong>缓冲池默认：128M</strong></p><h1 id="MySQL引擎"><a href="#MySQL引擎" class="headerlink" title="MySQL引擎"></a>MySQL引擎</h1><h2 id="1-InnoDB引擎：具备外键支持功能的事务存储引擎"><a href="#1-InnoDB引擎：具备外键支持功能的事务存储引擎" class="headerlink" title="*1.InnoDB引擎：具备外键支持功能的事务存储引擎"></a>*1.InnoDB引擎：具备外键支持功能的事务存储引擎</h2><ul><li><p>InnoDB是MySQL的<code>默认事务型引擎</code>，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。</p></li><li><p><strong>除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。</strong></p></li><li><p>InnoDB是<code>为处理巨大数据量的最大性能设计</code>。</p></li><li><p>数据文件结构：</p><ul><li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li><li>表名.ibd 存储数据和索引</li></ul></li><li><p><strong>对比MyISAM的存储引擎，<code>InnoDB写的处理效率差一些</code>，并且会占用更多的磁盘空间以保存数据和索引。</strong></p></li><li><p><strong>MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，<code>对内存要求较高</code>，而且内存大小对性能有决定性的影响。</strong></p></li></ul><h2 id="2-MyISAM-引擎：主要的非事务处理存储引擎"><a href="#2-MyISAM-引擎：主要的非事务处理存储引擎" class="headerlink" title="2.MyISAM 引擎：主要的非事务处理存储引擎"></a>2.MyISAM <strong>引擎：主要的非事务处理存储引擎</strong></h2><ul><li>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但<strong>MyISAM<code>不支持事务、行级锁、外键</code><strong>，有一个毫无疑问的缺陷就是</strong><code>崩溃后无法安全恢复</code>。</strong> </li><li><code>5.5之前默认的存储引擎</code></li><li>优势是**访问的<code>速度快</code>**，对事务完整性没有要求或者以SELECT、INSERT为主的应用</li><li>针对<strong>数据统计有额外的常数存</strong>储。故而 <strong>count(*) 的查询效率很高</strong></li><li>数据文件结构：<ul><li>表名.frm 存储表结构</li><li>表名.MYD 存储数据 (MYData)</li><li>表名.MYI 存储索引 (MYIndex)</li></ul></li><li>应用场景：<strong>只读应用或者以读为主的业务</strong></li></ul><h2 id="3-其他引擎"><a href="#3-其他引擎" class="headerlink" title="3.其他引擎"></a>3.其他引擎</h2><p><strong>3.Archive 引擎：用于数据存档</strong></p><p><strong>4. Blackhole</strong> <strong>引擎：丢弃写操作，读操作会返回空内容</strong> </p><p><strong>5.CSV</strong> <strong>引擎：存储数据时，以逗号分隔各个数据项</strong></p><p><strong>6. Memory</strong> <strong>引擎：置于内存的表</strong></p><p><strong>7. Federated</strong> <strong>引擎：访问远程表</strong> </p><p><strong>8. Merge引擎：管理多个MyISAM表构成的表集合</strong> </p><p><strong>9. NDB引擎：MySQL集群专用存储引擎</strong></p><h2 id="4-MyISAM和InnoDB"><a href="#4-MyISAM和InnoDB" class="headerlink" title="4. MyISAM和InnoDB"></a><strong>4. MyISAM和InnoDB</strong></h2><table><thead><tr><th>对比项</th><th><strong>MyISAM</strong></th><th><strong>InnoDB</strong></th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td>自带系统表使用</td><td>Y</td><td>N</td></tr><tr><td>关注点</td><td>性能：节省资源、消耗少、简单业务</td><td>事务：并发写、事务、更大资源</td></tr><tr><td>默认安装</td><td>Y</td><td>Y</td></tr><tr><td>默认使用</td><td>N</td><td>Y</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/blog/2023/04/06/wang-luo-bian-cheng/"/>
      <url>/blog/2023/04/06/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>w</p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1.软件架构"></a>1.软件架构</h2><h3 id="C-x2F-S架构"><a href="#C-x2F-S架构" class="headerlink" title="C&#x2F;S架构"></a>C&#x2F;S架构</h3><p>全称为Client&#x2F;Server结构，是指客户端和服务器结构。常见程序有QQ、美团app、360安全卫士等软件。</p><h3 id="B-x2F-S架构"><a href="#B-x2F-S架构" class="headerlink" title="B&#x2F;S架构"></a>B&#x2F;S架构</h3><p><strong>B&#x2F;S架构</strong> ：全称为Browser&#x2F;Server结构，是指浏览器和服务器结构。常见浏览器有IE、谷歌、火狐等。</p><h1 id="二、网络通信"><a href="#二、网络通信" class="headerlink" title="二、网络通信"></a>二、网络通信</h1><h2 id="1-三大问题"><a href="#1-三大问题" class="headerlink" title="1.三大问题"></a>1.三大问题</h2><p>如何定位网络的主机？</p><p>如何定位为主机的应用？</p><p>如何进行数据传输？</p><h2 id="2-通信要素"><a href="#2-通信要素" class="headerlink" title="2.通信要素"></a>2.通信要素</h2><p>IP地址与域名、端口号、网络协议</p><h3 id="IP地址与域名"><a href="#IP地址与域名" class="headerlink" title="IP地址与域名"></a>IP地址与域名</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给网络中的一台计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p><h5 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h5><h5 id="方式一：IPV4与IPV6"><a href="#方式一：IPV4与IPV6" class="headerlink" title="方式一：IPV4与IPV6"></a>方式一：IPV4与IPV6</h5><p><code>IPv4</code>：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，以点分<code>十进制</code>表示，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数。</p><p> <code>IPv6</code>：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，共16个字节，写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开。比如：<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，按保守方法估算IPv6实际可分配的地址，整个地球的每平方米面积上仍可分配1000多个地址，这样就解决了网络地址资源数量不够的问题。2012年6月6日，国际互联网协会举行了世界IPv6启动纪念日，这一天，全球IPv6网络正式启动。多家知名网站，如Google、Facebook和Yahoo等，于当天全球标准时间0点（北京时间8点整）开始永久性支持IPv6访问。2018年6月，三大运营商联合阿里云宣布，将全面对外提供IPv6服务，并计划在2025年前助推中国互联网真正实现“IPv6 Only”。</p><p>在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还考虑了在IPv4中解决不好的其它问题，主要有端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p><h5 id="方式二：公网（万维网）与私网"><a href="#方式二：公网（万维网）与私网" class="headerlink" title="方式二：公网（万维网）与私网"></a>方式二：公网（万维网）与私网</h5><p>公网地址( 万维网使用）和 私有地址( 局域网使用）。192.168.开头的就是私有地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。</p><p><strong>常用命令：</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查网络是否连通，在控制台输入：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">ping 空格 <span class="token constant">IP</span>地址ping <span class="token number">220.181</span><span class="token number">.57</span><span class="token number">.216</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>特殊的IP地址：</strong></p><ul><li>本地回环地址(hostAddress)：<code>127.0.0.1</code></li><li>主机名(hostName)：<code>localhost</code></li></ul><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名(hostName)：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>IP 地址(hostAddress)：202.108.35.210</li></ul><p><strong>域名解析：</strong>因为IP地址数字不便于记忆，因此出现了域名。域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS，Domain Name System，域名系统)负责将域名转化成IP地址，这样才能和主机建立连接。</p><p>详细过程：</p><ol><li>在浏览器中输入www . qq .com 域名，操作系统会先检查自己本地的<code>hosts文件</code>是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</li><li>如果hosts里没有这个域名的映射，则查找<code>本地DNS解析器缓存</code>，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP&#x2F;IP参数中设置的首选DNS服务器，在此我们叫它<code>本地DNS服务器</code>，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已<code>缓存</code>了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</li><li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="http://qq.com/">http://qq.com</a>)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找（<a href="http://qq.com/">http://qq.com</a>)域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com主机./">www.qq.com主机。</a></li><li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li></ol><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p><strong>端口号</strong>：可以唯一标识设备中的进程（应用程序）。</p><p>不同的进程，设置不同的端口号。</p><ul><li>端口号：用两个字节表示的整数，它的取值范围是0~65535<ul><li>公认端口：0~1023。被预先定义的服务通信占用，如：HTTP（80），FTP（21），Telnet（23）</li><li>注册端口：1024~49151。分配给用户进程或应用程序。如：Tomcat（8080），MySQL（3306），Oracle（1521）。</li><li>动态&#x2F; 私有端口：49152~65535。</li></ul></li></ul><p><strong>端口号被占用，程序将启动失败</strong></p><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p><code>网络通信协议</code>：在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤、出错控制等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p><h4 id="两套参考模型"><a href="#两套参考模型" class="headerlink" title="两套参考模型"></a>两套参考模型</h4><ul><li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。</li><li>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。</li></ul><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220514172130459.png"></p><p>上图中，OSI参考模型：模型<code>过于理想化</code>，未能在因特网上进行广泛推广。 TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的<code>国际标准</code>。</p><p><strong>TCP&#x2F;IP协议：</strong> 传输控制协议&#x2F;因特网互联协议( Transmission Control Protocol&#x2F;Internet Protocol)，TCP&#x2F;IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。是Internet最基本、最广泛的协议。</p><h4 id="TCP四层模型介绍"><a href="#TCP四层模型介绍" class="headerlink" title="TCP四层模型介绍"></a>TCP四层模型介绍</h4><p><strong>应用层：</strong> 提供服务</p><p>基于网络构建应用服务。     （服务与应用程序）</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>HTTP协议</td><td>超文本传输协议</td></tr><tr><td>FTF 协议</td><td>文件传输协议</td></tr><tr><td>SMTP协议</td><td>简单邮件传输协议</td></tr><tr><td>NNTP协议</td><td>网上新闻传输协议</td></tr><tr><td>DNS</td><td>域名服务</td></tr><tr><td>Telnet协议</td><td>虚拟终端协议</td></tr></tbody></table><p><strong>传输层：</strong>主机之间建立、管理、维护连接</p><p>使网络程序进行通信。 （定义了数据协议和端口号，确认数据传输及错误处理）</p><table><thead><tr><th>协议</th><th>作用</th><th></th></tr></thead><tbody><tr><td>TCP</td><td>传输控制协议</td><td>面向连接，基于字节流、可靠</td></tr><tr><td>UDP</td><td>用户数据报协议</td><td>无连接，面向事务的简单不可靠的信息传送服务</td></tr></tbody></table><p><strong>网络层</strong>     数据的封装处理以及传输的地址处理</p><p>TCP&#x2F;IP的核心。    （对数据包的IP地址进行封装和解析，数据传输、路由、地址的选择）</p><p>它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>IP</td><td>把数据从源传送到目的地。数据包：对数据大小的重新组装功能，以适应不同网络对包大小的要求。</td></tr></tbody></table><p><strong>网络接口层（物理+数据链路层）</strong> 物理上如何传输</p><p>用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>ATM</td><td></td></tr><tr><td>RARP</td><td></td></tr><tr><td>FDDI</td><td></td></tr></tbody></table><h2 id="3-再谈TCP与UDP协议"><a href="#3-再谈TCP与UDP协议" class="headerlink" title="3.再谈TCP与UDP协议"></a>3.再谈TCP与UDP协议</h2><h3 id="TCP协议特点："><a href="#TCP协议特点：" class="headerlink" title="TCP协议特点："></a>TCP协议特点：</h3><ol><li>通信的应用 ： <code>客户端、服务端</code>。</li><li>传输开始前，须先<code>建立TCP连接</code>,形成基于字节流的传输数据通道</li><li>三次握手。<code>可靠的</code></li><li>可<code>大数据量的传输</code></li><li>传输完毕，释放连接。<code>效率低</code></li></ol><h3 id="UDP协议特点："><a href="#UDP协议特点：" class="headerlink" title="UDP协议特点："></a>UDP协议特点：</h3><ol><li>通信的应用： <code>发送端、接收端</code>。</li><li>将数据、源、目的封装为数据包（基本单位），<code>不需要建立连接</code></li><li>只管发送，<code>不可靠</code></li><li>数据包大小<code>限制64KB</code></li><li>无需释放资源，<code>效率高</code></li></ol><h2 id="TCP的三次握手与四次挥手"><a href="#TCP的三次握手与四次挥手" class="headerlink" title="TCP的三次握手与四次挥手"></a>TCP的三次握手与四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li>第一次握手，客户端向服务器端发起TCP连接的请求 （客户端：同步已发送）</li><li>第二次握手，服务器端发送针对客户端TCP连接请求的确认 （服务端：同步已接收）</li><li>第三次握手，客户端发送确认的确认 （建立连接）</li></ul><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220415010105484.png" alt="image-20220415010105484"></p><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ul><li>第一次挥手：<strong>客户端向服务器端提出结束连接</strong>，<code>让服务器做最后的准备工作</code>。此时，<strong>客户端处于半关闭状态</strong>，即表示不再向服务器发送数据了，但是还可以接受数据。</li><li>第二次挥手：<strong>服务器接收到客户端释放连接的请</strong>求后，<code>会将最后的数据发给客户端</code>。并告知上层的应用进程不再接收数据。</li><li>第三次挥手：<strong>服务器发送完数据后</strong>，会给客户端<code>发送一个释放连接的报文</code>。那么客户端接收后就知道可以正式释放连接了。</li><li>第四次挥手：客户端接收到服务器最后的释放连接报文后，要<code>回复一个彻底断开的报文</code>。这样服务器收到后才会彻底释放连接。这里客户端，发送完最后的报文后，会等待2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待2MSL后，没有收到，那么彻底断开。</li></ul><h1 id="三、Java的网络编程API"><a href="#三、Java的网络编程API" class="headerlink" title="三、Java的网络编程API"></a>三、Java的网络编程API</h1><h2 id="1-InetAddress类"><a href="#1-InetAddress类" class="headerlink" title="1. InetAddress类"></a>1. InetAddress类</h2><p>netAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p><p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress 实例</p><ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li><li>public static InetAddress getByAddress(byte[] addr)</li></ul><p>InetAddress 提供了如下几个常用的方法</p><ul><li>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）</li><li>public String getHostName() ：获取此 IP 地址的主机名</li><li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li></ul><h2 id="2-Socket类"><a href="#2-Socket类" class="headerlink" title="2.Socket类"></a>2.Socket类</h2><ul><li>网络上具有唯一标识的IP地址和端口号组合在一起构成唯一能识别的标识符套接字（Socket）。</li><li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。网络通信其实就是Socket间的通信。</li><li>通信的两端都要有Socket，是两台机器间通信的端点。</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</li><li>Socket分类：<ul><li>流套接字（stream socket）：使用TCP提供可依赖的字节流服务<ul><li>ServerSocket：此类实现TCP服务器套接字。服务器套接字等待请求通过网络传入。</li><li>Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</li></ul></li><li>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务<ul><li>DatagramSocket：此类表示用来发送和接收UDP数据报包的套接字。</li></ul></li></ul></li></ul><h3 id="2-1-ServerSocket"><a href="#2-1-ServerSocket" class="headerlink" title="2.1 ServerSocket"></a>2.1 ServerSocket</h3><p><strong>ServerSocket类的构造方法：</strong></p><ul><li>ServerSocket(int port) ：创建绑定到特定端口的服务器套接字。</li></ul><p><strong>ServerSocket类的常用方法：</strong></p><ul><li>Socket accept()：侦听并接受到此套接字的连接。</li></ul><h3 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h3><p><strong>Socket类的常用构造方法</strong>：</p><ul><li>public Socket(InetAddress address,int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li><li>public Socket(String host,int port)：创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><strong>Socket类的常用方法</strong>：</p><ul><li>public InputStream getInputStream()：返回此套接字的输入流，可以用于接收消息</li><li>public OutputStream getOutputStream()：返回此套接字的输出流，可以用于发送消息</li><li>public InetAddress getInetAddress()：此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li>public InetAddress getLocalAddress()：获取套接字绑定的本地地址。</li><li>public int getPort()：此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li><li>public int getLocalPort()：返回此套接字绑定到的本地端口。如果尚未绑定套接字，则返回 -1。</li><li>public void close()：关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。</li><li>public void shutdownInput()：如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li><li>public void shutdownOutput()：禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul><p><strong>注意：</strong>先后调用Socket的shutdownInput()和shutdownOutput()方法，仅仅关闭了输入流和输出流，并不等于调用Socket的close()方法。在通信结束后，仍然要调用Scoket的close()方法，因为只有该方法才会释放Socket占用的资源，比如占用的本地端口号等。</p><h3 id="2-3-DatagramPacket类"><a href="#2-3-DatagramPacket类" class="headerlink" title="2.3 DatagramPacket类"></a>2.3 DatagramPacket类</h3><p><strong>DatagramPacket类的常用方法：</strong></p><ul><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length 参数必须小于等于 buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li><code>public byte[] getData()</code>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li><code>public int getLength()</code>返回将要发送或接收到的数据的长度。</li></ul><h1 id="四、TCP网络编程"><a href="#四、TCP网络编程" class="headerlink" title="四、TCP网络编程"></a>四、TCP网络编程</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220514172833216.png" alt="image-20220514172833216"></p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p><strong>客户端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket 的输入&#x2F; 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读&#x2F; 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线路。</li><li>关闭 Socket ：断开客户端到服务器的连接，释放线路</li></ul><p><strong>服务器端程序包含以下四个基本的 步骤：</strong></p><ul><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li><li>调用 accept() ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用 该Socket 类对象的 getOutputStream() 和 getInputStream () ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭Socket 对象：客户端访问结束，关闭通信套接字。</li></ul><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><strong>客户端发送内容给服务端，服务端将内容打印到控制台上。</strong></p><p><strong>1、服务器端示例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>one</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、准备一个ServerSocket对象，并绑定8888端口</span>        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待连接...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、在8888端口监听客户端的连接，该方法是个阻塞的方法，如果没有客户端连接，将一直等待</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InetAddress</span> inetAddress <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"客户端连接成功！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、获取输入流，用来接收该客户端发送给服务器的数据</span>        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"客户端发送的消息是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、获取输出流，用来发送数据给该客户端</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送数据</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"欢迎登录"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5、关闭socket，不再与该客户端通信</span>        <span class="token comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6、如果不再接收任何客户端通信，可以关闭ServerSocket</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、客户端示例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>one</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、获取输出流，用来发送数据给服务器</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送数据</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"lalala"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//会在流末尾写入一个“流的末尾”标记，对方才能读到-1，否则对方的读取方法会一致阻塞</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、获取输入流，用来接收服务器发送给该客户端的数据</span>        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器返回的消息是："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4、关闭socket，不再与服务器通信，即断开与服务器的连接</span>        <span class="token comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、UDP网络编程"><a href="#五、UDP网络编程" class="headerlink" title="五、UDP网络编程"></a>五、UDP网络编程</h1><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><p><strong>发送端程序包含以下四个基本的步骤：</strong></p><ul><li>创建DatagramSocket ：默认使用系统随机分配端口号。</li><li>创建DatagramPacket：将要发送的数据用字节数组表示，并指定要发送的数据长度，接收方的IP地址和端口号。</li><li>调用 该DatagramSocket 类对象的 send方法 ：发送数据报DatagramPacket对象。</li><li>关闭DatagramSocket 对象：发送端程序结束，关闭通信套接字。</li></ul><p><strong>接收端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建DatagramSocket ：指定监听的端口号。</li><li>创建DatagramPacket：指定接收数据用的字节数组，起到临时数据缓冲区的效果，并指定最大可以接收的数据长度。</li><li>调用 该DatagramSocket 类对象的receive方法 ：接收数据报DatagramPacket对象。。</li><li>关闭DatagramSocket ：接收端程序结束，关闭通信套接字。</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>发送端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by <span class="token operator">=</span> <span class="token string">"hello,com"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> by<span class="token punctuation">.</span>length<span class="token punctuation">,</span>     <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span> by<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、URL编程"><a href="#六、URL编程" class="headerlink" title="六、URL编程"></a>六、URL编程</h1><ul><li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。</li><li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li><li>URL的基本结构由5部分组成：</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http">&lt;传输协议>://&lt;主机名>:&lt;端口号>/&lt;文件名>#片段名?参数列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ul><li><p>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL url = new URL("http://www.baidu.com/"); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL downloadUrl = new URL(url, “download.html")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>public URL(String protocol, String host, String file); 例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">URL url = new URL("http", "www.baidu.com", “download. html");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>public URL(String protocol, String host, int port, String file); 例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">URL</span> gamelan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> “download<span class="token punctuation">.</span>html"<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</p></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>public String getProtocol( ) 获取该URL的协议名</li><li>public String getHost( ) 获取该URL的主机名</li><li>public String getPort( ) 获取该URL的端口号</li><li>public String getPath( ) 获取该URL的文件路径</li><li>public String getFile( ) 获取该URL的文件名</li><li>public String getQuery( ) 获取该URL的查询名</li></ul><h2 id="针对HTTP协议的URLConnection类"><a href="#针对HTTP协议的URLConnection类" class="headerlink" title="针对HTTP协议的URLConnection类"></a>针对HTTP协议的URLConnection类</h2><ul><li>URL的方法 openStream()：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li><li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException.<ul><li>URL netchinaren &#x3D; new URL (“<a href="http://www.atguigu.com/index.shtml%E2%80%9D">http://www.atguigu.com/index.shtml”</a>);</li><li>URLConnectonn u &#x3D; netchinaren.openConnection( );</li></ul></li><li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。<ul><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li><strong>public InputStream getInputStream ( ) throws IOException</strong></li><li>public OutputSteram getOutputStream( )throws IOException</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/blog/2023/04/06/java-ji-chu/"/>
      <url>/blog/2023/04/06/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/JVM%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><p>字节（Byte）: 存储容量的基本单位，1字节 &#x3D; 8bit</p><p>位（bit） : 数据存储的最小单位，在二进制系统中，0或1就是一位，叫做bit（比特）</p><table><thead><tr><th>编码</th><th>一个汉字占据字节</th><th></th></tr></thead><tbody><tr><td>iso-8859-1</td><td>一个字节</td><td>英文操作系统：ANSI</td></tr><tr><td>GBK</td><td>两个字节</td><td>中文操作系统：ANSI</td></tr><tr><td>UTF-8</td><td>通常三个字节</td><td></td></tr></tbody></table><p><strong>单位换算：</strong></p><p>8 bit &#x3D; 1 Byte</p><p>1024 Byte &#x3D; 1 KB</p><p>1024 KB &#x3D; 1 MB</p><p>1024 MB &#x3D; 1 GB</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/1.png"></p><table><thead><tr><th>类型</th><th>占用空间</th><th>表示范围</th><th>备注</th><th>默认值</th></tr></thead><tbody><tr><td>整数类型</td><td></td><td></td><td></td><td></td></tr><tr><td>byte</td><td>1字节</td><td>-128~127</td><td></td><td>0</td></tr><tr><td>short</td><td>2字节</td><td>-2 15次方</td><td></td><td>0</td></tr><tr><td>int</td><td>4字节</td><td>31次方</td><td></td><td>0</td></tr><tr><td>long</td><td>8字节</td><td>63次方</td><td>L或l后缀</td><td>0L</td></tr><tr><td>浮点类型</td><td></td><td></td><td></td><td></td></tr><tr><td>float(单精度)</td><td>4字节</td><td>-3.4 E+38 ~ 3.4 E+38</td><td>f或F后缀，精度7位有效数字</td><td>0.0F</td></tr><tr><td>double（双精度）</td><td>8字节</td><td></td><td>精度14位有效数字</td><td>0.0</td></tr><tr><td>字符类型</td><td></td><td></td><td></td><td></td></tr><tr><td>char（字符）</td><td>2字节</td><td></td><td>一个字母，一个汉字</td><td>0或 <code>\u0000</code></td></tr><tr><td>布尔类型</td><td></td><td></td><td></td><td></td></tr><tr><td>boolean</td><td>不确定，在 JVM 中编译为int，4字节</td><td></td><td>true 1，false 0</td><td>false</td></tr></tbody></table><h4 id="基本数据类型如何计算他们的表示范围？"><a href="#基本数据类型如何计算他们的表示范围？" class="headerlink" title="基本数据类型如何计算他们的表示范围？"></a>基本数据类型如何计算他们的表示范围？</h4><p>我们都知道一个字节（1byte是有8个bit），也就是8个二进制数组成，但是二进制数最高位表示整数，所以它的表示范围应该是2的7次方，但是由于有0的存在，所以它表示的最大范围为 2的7次方 - 1，所以它的表示范围为（-2的7次方~2的7次方-1）。</p><p>其他基本数据类型的计算方法如上。</p><h3 id="注意！！！！！！！"><a href="#注意！！！！！！！" class="headerlink" title="注意！！！！！！！"></a>注意！！！！！！！</h3><p>在java中，<strong>局部变量是没有默认值的</strong>，所以在声明时，如果没有赋值，后面程序直接使用该变量，编译器会检查出错误。（包装类也是如此）。而<strong>成员变量作为类的成员，JVM会自动给他们赋初值。</strong></p><h4 id="char类型的转义符"><a href="#char类型的转义符" class="headerlink" title="char类型的转义符"></a>char类型的转义符</h4><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>制表符</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\</code></td><td>反斜线</td></tr><tr><td><code>\b</code></td><td>退格符</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr></tbody></table><p>自动类型提升</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220311002543688.png"></p><ul><li><p>小范围值赋值大范围</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//char提升为int类型</span><span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>  <span class="token comment">//int提升为double</span><span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">123467</span><span class="token punctuation">;</span>  <span class="token comment">//123467在double范围中</span><span class="token keyword">byte</span> <span class="token operator">=</span>  <span class="token number">130</span><span class="token punctuation">;</span> <span class="token comment">//错误，byte最大为127</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">12345678912L</span><span class="token punctuation">;</span> <span class="token comment">//正确，表示标识L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据类型混合运算（byte，short，char数据类型计算按照int处理）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>doule  s <span class="token operator">=</span> i<span class="token operator">+</span>b<span class="token operator">+</span>d<span class="token punctuation">;</span> <span class="token comment">//混合运算，升级double</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span> <span class="token comment">//编译错误，b3无法接收int类型 那么如何正确计算它们的值呢？（类型转换可能丢失精度）我们可以声明b1,b2为final</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确</span><span class="token keyword">int</span> i <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span> <span class="token comment">//正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//（final只能赋值一次值，且计算时不会类型提升）</span><span class="token keyword">final</span> <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">final</span>  <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span>  <span class="token comment">//编译不会报错 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token operator">+</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>强制类型转换</p><ul><li>大转小：丢失精度或溢出（超越范围）</li><li>String无法强转！！！！（使用Integer.parstInt()）</li></ul></li></ul><p>”<strong>注意</strong>“</p><ol><li>浮点类型<strong>不适用于不容舍入误差计算的金融领域</strong>，可以用 <em>BigDecimal</em> 类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">eg ：<span class="token number">1.</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">=</span><span class="token number">0.30000000000000004</span>  因为计算机是二进制计算，可能导致精度丢失，<span class="token comment">//解决方法： 转化整数计算</span>    <span class="token number">2.</span> <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">123123123f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>byte、short、char类型之间的变量计算，结果为int类型（接收类型为int类型）</p><p>byte - short -char   ——&gt; int  ——&gt; long ——&gt; float ——&gt; double</p></li></ol><h3 id="2-进制"><a href="#2-进制" class="headerlink" title="2.进制"></a>2.进制</h3><table><thead><tr><th>进制</th><th>组成</th><th>开头</th></tr></thead><tbody><tr><td>十进制</td><td>0-9</td><td></td></tr><tr><td>二进制</td><td>0-1</td><td>ob || 0B</td></tr><tr><td>八进制</td><td>0-7</td><td>0</td></tr><tr><td>十六进制</td><td>0-9,a-f （不分大小写）</td><td>0x || 0X</td></tr></tbody></table><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><ol><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code></p><ul><li><p>正数：<code>最高位是0</code> ，补码与反码、原码一样，称为<code>三码合一</code></p></li><li><p>负数：<code>最高位是1</code></p><ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li><li><p>二进制转十进制</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220523114701881.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（反码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（补码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">10000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100110</span>（反码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100111</span>（补码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>十进制转二进制</p><p>除2取余的逆</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312000042595.png"></p></li></ol><h3 id="3-算数运算符"><a href="#3-算数运算符" class="headerlink" title="3.算数运算符"></a>3.算数运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312000848332.png"></p><h3 id="4-关系（比较）运算符"><a href="#4-关系（比较）运算符" class="headerlink" title="4.关系（比较）运算符"></a>4.关系（比较）运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312001742263.png"></p><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220312001943403.png"></p><p><strong>注意！！！！！！！！！！</strong></p><p><strong>算数运算符的计算优先级大于赋值运算符。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//d = ?</span><span class="token comment">//d = 12 因为25和2默认int类型，两个进行运算，值为12(int类型)，最后再进行赋值，也就是 double d = (double) 12;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li>相同点：如果符号左边是true，则二者都执行符号右边的操作</li><li>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</li></ul><h3 id="6-位运算"><a href="#6-位运算" class="headerlink" title="6.位运算"></a>6.位运算</h3><p>暂略，但是很重要，因为位运算效率高于普通的运算，（暂未总结，Loading……）</p><h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><h3 id="1-switch"><a href="#1-switch" class="headerlink" title="1.switch"></a>1.switch</h3><p> <strong>switch穿透</strong>：在case分支中没有break语句，则会继续运行；、</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用此写法输入3会报运行时错误（1，2正常输出）</span><span class="token comment">//           case 1 -> &#123;return "这是1";&#125;</span><span class="token comment">//           case 2 -> &#123;return  "这是2";&#125;</span><span class="token comment">//           case 3 -> &#123;&#125;</span><span class="token comment">//           case 4 -> &#123;return  "这是4";&#125;</span>           <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"2"</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">3</span> <span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token number">4</span> <span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"4"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-for，while"><a href="#2-for，while" class="headerlink" title="2.for，while"></a>2.for，while</h3><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>引用数据类型</li><li>创建数组会在内存中开辟连续存储空间，占据空间大小取决于数组长度和元素的数据类型</li><li>元素在内存中<strong>有序且连续</strong></li><li>无法改变长度</li><li>有索引（数组下标）</li><li>数组名引用连续空间的首地址</li><li>length：为属性</li></ul><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><table><thead><tr><th>JVM区域名称</th><th>作用</th></tr></thead><tbody><tr><td>虚拟机栈</td><td>存储方法的局部变量表等。局部变量表存储：基本数据类型、对象引用。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象）,new 创建的、静态变量（jdk8）、字符串常量池（jdk8）</td></tr><tr><td>方法区</td><td>存储被虚拟机加载的类信息、常量池、即时编译后的代码</td></tr></tbody></table><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE1.jpg"></p><h3 id="下标为什么从0开始？"><a href="#下标为什么从0开始？" class="headerlink" title="下标为什么从0开始？"></a>下标为什么从0开始？</h3><p>因为数组的第一个元素距离首地址间隔0个单元格。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>本质上还是一维数组（内存中）</p><h3 id="二分算法"><a href="#二分算法" class="headerlink" title="二分算法"></a>二分算法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//仅适用于有序</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            mid = (r - l) /2 +l;</span>             mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230306153027456.png"></p><h3 id="选择排序-O-n-n"><a href="#选择排序-O-n-n" class="headerlink" title="选择排序(O(n*n))"></a>选择排序(O(n*n))</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//每个元素和后面的所有元素比较，若小，则放到前面</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">chooseSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arrays<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序-O-n-n"><a href="#冒泡排序-O-n-n" class="headerlink" title="冒泡排序(O(n*n))"></a>冒泡排序(O(n*n))</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//相邻两个元素比较大小，大于则交换位置</span><span class="token comment">// 外层控制循环次数，内层控制比较</span>   <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maoPao</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">int</span> temp <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                   arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> arrays<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序-O-n-log2-n"><a href="#快速排序-O-n-log2-n" class="headerlink" title="快速排序(O(n*log2 n))"></a>快速排序(O(n*log2 n))</h3><p>思想：</p><p>​         快速排序首先选取一个关键字为标志位（关键字的选取影响排序效率），然后将序列中小于标志位的关键字移动至标志位左侧，大于标志位的关键字移动至右侧。一趟比较完成后，整个序列以选取的标志位为界，左侧均小于标志位，右侧均大于关键字。但左右两侧内部并不是有序的(左右两侧关键字个数也不一定相同)。进而继续将左右两侧分别再以这种方式进行排序，直到将序列拆分的剩余一个关键字为止，整个序列即变成有序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> high<span class="token punctuation">;</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//不断循环，直到 基准值 左边 &lt; 基准值，右边 > 基准值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从后往前找第一个小于基准值的，交换位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">>=</span> key<span class="token punctuation">)</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从前往后找第一个大于基准值的，交换位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归左边的列，直到start == low</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">></span> low<span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归右边的列，直到end == high</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Arrays常用工具类"><a href="#Arrays常用工具类" class="headerlink" title="Arrays常用工具类"></a>Arrays常用工具类</h3><table><thead><tr><th>静态方法</th><th>作用</th></tr></thead><tbody><tr><td>Arrays.toString(Object[] arr)</td><td>数组元素的字符串标识</td></tr><tr><td>Arrays.sort(Object[] arr)</td><td>自然排序（升序）</td></tr><tr><td>Arrays.sort(Object[] arr，Comparator&lt;? super T&gt;  c)</td><td>自定义比较器排序</td></tr><tr><td>Arrays.binarySearch(Object[] a, int key)</td><td>二分法查找元素（有序数组使用）</td></tr><tr><td>Arrays.copyOf(Object[] a, int newLength)</td><td>复制并返回指定长度的数组</td></tr><tr><td>Arrays.copyOfRange(Object[] a, int from, int to)</td><td>复制指定位置的数组</td></tr><tr><td>Arrays.fill(Object[] a,Object o)</td><td>使用o填充数组</td></tr><tr><td>Arrays. equals(Object[] a,Object[] a2)</td><td>比较数组长度、元素是否一致</td></tr></tbody></table><ol><li>Arrays.sort(Object[] arr ,Comparator&lt;? super T&gt; c)  :  自定义比较器（o1 -o2 为升序，o2-o1为降序）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token operator">-</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//Lambda表达式</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><ol><li>ArrayIndexOutOfBoundsException ： 数组下标越界 （arr[]定义长度是10 ，arr[10] 超越下标）</li><li>NullPointerException ： 空指针异常。 （基本类型自动赋默认值，引用类型默认赋值null，获取数组元素报此异常）</li></ol><h2 id="四、面向对象编程"><a href="#四、面向对象编程" class="headerlink" title="四、面向对象编程"></a>四、面向对象编程</h2><h3 id="学习面向对象内容的三条主线"><a href="#学习面向对象内容的三条主线" class="headerlink" title="学习面向对象内容的三条主线"></a><strong>学习面向对象内容的三条主线</strong></h3><ul><li>Java类及类的成员：（重点）属性、方法、构造器；代码块、内部类</li><li>面向对象的特征：封装、继承、多态、（抽象）</li><li>其他关键字的使用：this、super、package、import、static、final、interface、abstract等</li></ul><h3 id="面向过程编程（POP）与面向对象编程-OOP"><a href="#面向过程编程（POP）与面向对象编程-OOP" class="headerlink" title="面向过程编程（POP）与面向对象编程(OOP)"></a>面向过程编程（POP）与面向对象编程(OOP)</h3><table><thead><tr><th></th><th>面向对象</th><th>面向过程</th></tr></thead><tbody><tr><td>关注焦点</td><td>类</td><td>过程（函数）：抽取相同代码</td></tr><tr><td>代码结构</td><td>类</td><td>函数</td></tr><tr><td>思维方式</td><td>设计者思维（容易理解）</td><td>执行者思维</td></tr><tr><td>人把大象关入冰箱</td><td>人（开关门、放大象的方法）、大象（可以进冰箱）、冰箱（开关门的属性）</td><td>开门、放进去、关门</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">人<span class="token punctuation">&#123;</span>    打开（冰箱）<span class="token punctuation">&#123;</span>冰箱<span class="token punctuation">.</span>开门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    操作<span class="token punctuation">(</span>大象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             大象<span class="token punctuation">.</span>进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    关闭<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             冰箱<span class="token punctuation">.</span>关门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>冰箱<span class="token punctuation">&#123;</span>     开门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>       关门<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>大象<span class="token punctuation">&#123;</span>     进入<span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><ol><li><p>定义： 不定义对象的句柄，而直接调用这个对象的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><table><thead><tr><th>JVM区域名称</th><th>作用</th></tr></thead><tbody><tr><td>虚拟机栈</td><td>存储方法的局部变量表等。局部变量表存储：基本数据类型、对象引用。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象）,new 创建的</td></tr><tr><td>方法区</td><td>存储被虚拟机加载的类信息、常量、静态变量、即时编译后的代码、常量池</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>存储位置</td><td></td><td></td></tr><tr><td>基本数据类型</td><td>变量名和值存储在堆中</td><td>变量名和值都在栈中</td></tr><tr><td>引用数据类型</td><td>变量名和值指向的对象都在堆中</td><td>变量名在栈中，变量指向的对象在堆中</td></tr><tr><td></td><td></td><td></td></tr><tr><td>消亡时间</td><td>GC回收</td><td>方法结束</td></tr><tr><td>作用域</td><td>通过对象使用</td><td>方法内</td></tr><tr><td>修饰符</td><td>public,protected,private,final,volatile,transient等</td><td>final</td></tr><tr><td>默认值</td><td>有</td><td>没有，必须初始化</td></tr></tbody></table><h3 id="类中方法的调用内存分析"><a href="#类中方法的调用内存分析" class="headerlink" title="类中方法的调用内存分析"></a>类中方法的调用内存分析</h3><pre class="line-numbers language-none"><code class="language-none">方法没有被调用的时候，都在方法区中的字节码文件(.class)中存储。方法被调用的时候，需要进入到栈内存中运行。方法每调用一次就会在栈中有一个入栈动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。栈结构：先进后出，后进先出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法参数的传递–值传递"><a href="#方法参数的传递–值传递" class="headerlink" title="方法参数的传递–值传递"></a>方法参数的传递–值传递</h3><h4 id="什么是值传递？"><a href="#什么是值传递？" class="headerlink" title="什么是值传递？"></a>什么是值传递？</h4><p>将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><ul><li>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</li><li>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</li></ul><h4 id="为什么只有值传递？"><a href="#为什么只有值传递？" class="headerlink" title="为什么只有值传递？"></a>为什么只有值传递？</h4><p>安全，避免其他程序修改对象。</p><h4 id="案例1：传递基本类型参数"><a href="#案例1：传递基本类型参数" class="headerlink" title="案例1：传递基本类型参数"></a>案例1：传递基本类型参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num1 = "</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num2 = "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">10</span>num1 <span class="token operator">=</span> <span class="token number">10</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基本类型传递的是拷贝的值</strong></p><h4 id="案例2：传递引用类型参数1"><a href="#案例2：传递引用类型参数1" class="headerlink" title="案例2：传递引用类型参数1"></a>案例2：传递引用类型参数1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将数组的第一个元素变为0</span>      array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>引用类型拷贝的是内存地址，所以修改有改变</strong></p><h4 id="案例3-：传递引用类型参数2"><a href="#案例3-：传递引用类型参数2" class="headerlink" title="案例3 ：传递引用类型参数2"></a>案例3 ：传递引用类型参数2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">// 省略构造函数、Getter&amp;Setter方法</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> xiaoZhang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> xiaoLi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>xiaoZhang<span class="token punctuation">,</span> xiaoLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoZhang:"</span> <span class="token operator">+</span> xiaoZhang<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xiaoLi:"</span> <span class="token operator">+</span> xiaoLi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person1<span class="token punctuation">,</span> <span class="token class-name">Person</span> person2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span> temp <span class="token operator">=</span> person1<span class="token punctuation">;</span>    person1 <span class="token operator">=</span> person2<span class="token punctuation">;</span>    person2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1:"</span> <span class="token operator">+</span> person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person2:"</span> <span class="token operator">+</span> person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">person1<span class="token operator">:</span>小李person2<span class="token operator">:</span>小张xiaoZhang<span class="token operator">:</span>小张xiaoLi<span class="token operator">:</span>小李<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用类型拷贝的是内存地址，所以修改无改变</strong></p><h3 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h3><ol><li><p>把客观事物封装成抽象概念的类，并且类可以把自己的数据和方法只向可信的类或者对象开放，向没必要开放的类或者对象隐藏信息。</p></li><li><p>体现 ： 成员变量&#x2F;属性私有化，成员方法私有化。（单例模式（构造方法私有化））</p></li></ol><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><p>属性封装为private，通过set（）修改值。</p><p><strong>属性赋值顺序</strong>： 初始化—-构造方法—–set() </p><h3 id="4-this关键字："><a href="#4-this关键字：" class="headerlink" title="4.this关键字："></a>4.this关键字：</h3><ol><li><p>作用:</p><ol><li><strong>指定当前属性</strong>，在set（）和get（），新参和属性名称一致，用 eg：this.age &#x3D; age ；</li><li><strong>调用当前的构造器、成员变量、方法</strong>                                eg： 无参： this();    有参 ：this(参数)；       方法：this.method();</li></ol></li><li><p>使用：<strong>只能在构造器首行调用</strong>，<strong>且在构造器中只能声明一个</strong></p></li><li><p>作用域：非静态方法和非静态代码块</p></li><li><p>this：当前对象</p><ol><li>在构造器和非静态代码块中，表示正在new的对象</li><li>在实例方法中，表示调用当前方法的对象</li></ol></li></ol><h3 id="5-继承-extends"><a href="#5-继承-extends" class="headerlink" title="5.继承 extends"></a>5.继承 extends</h3><ol><li>重点：<ol><li><strong>子类会继承父类所有的实例变量和实例方法</strong>，<strong>还有静态方法和属性、final修饰的方法</strong></li><li>子类不能直接访问父类中私有的(private)的成员变量和方法，只能通过get() &#x2F; set()访问。</li><li><strong>JAVA支持多层继承</strong>，一个父类可以有多个子类，<strong>但是不支持多重继承（单继承）</strong></li><li>Object是所有类的父类</li></ol></li><li>方法重写（override，overwrite）<ol><li>子类重写的方法返回类型不能大于父类被重写方法的返回类型</li><li>子类的私有方法不能重写，挎包的父类缺省的方法也不能重写</li></ol></li></ol><h3 id="方法重载与重写"><a href="#方法重载与重写" class="headerlink" title="方法重载与重写"></a>方法重载与重写</h3><table><thead><tr><th></th><th>方法重载</th><th>方法重写</th></tr></thead><tbody><tr><td>访问权限</td><td>不限</td><td>大于等于父类</td></tr><tr><td>方法名称</td><td>相同</td><td>相同</td></tr><tr><td>返回类型</td><td>不限</td><td>小于等于父类（基本类型相同）</td></tr><tr><td>参数</td><td>不同</td><td>相同</td></tr><tr><td>抛出异常</td><td>不限</td><td>编译时异常：小于等于父类，运行时异常无要求</td></tr><tr><td>静态</td><td>可以</td><td>不可以重写父类静态方法</td></tr></tbody></table><h3 id="再谈修饰符"><a href="#再谈修饰符" class="headerlink" title="再谈修饰符"></a>再谈修饰符</h3><table><thead><tr><th></th><th>本类</th><th>本包</th><th>其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>1</td><td></td><td></td><td></td></tr><tr><td>缺省（default）</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>protected</td><td>1</td><td>1</td><td>1</td><td></td></tr><tr><td>public</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><h3 id="6-super"><a href="#6-super" class="headerlink" title="6.super()"></a>6.super()</h3><ol><li>子类重写了父类的方法，在子类中需要通过super.才能调用父类被重写的方法。</li><li>子父类成员变量名一致，可以用this和super区别（<strong>阿里巴巴开发规范规定避免子父类重名的成员变量</strong>）</li><li>构造器：<ol><li>子类默认调用父类的无参构造器</li><li>当父类写了有参构造，无显式的无参构造，默认的无参构造会失效，子类无法调用父类的无参构造（编译出错）</li></ol></li></ol><h3 id="总结：this与super"><a href="#总结：this与super" class="headerlink" title="总结：this与super"></a>总结：this与super</h3><ul><li><strong>方法前面没有super.和this.</strong><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><strong>方法前面有this.</strong><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><strong>方法前面有super.</strong><ul><li>从当前子类的直接父类找，如果没有，继续往上追溯</li></ul></li></ul><h3 id="7-多态性-运行时多态"><a href="#7-多态性-运行时多态" class="headerlink" title="7.多态性(运行时多态)"></a>7.多态性(运行时多态)</h3><ol><li><p>概念：</p><p> 父类的引用指向子类的对象（<strong>编译时类型和运行时类型不一致，就出现了对象的多态性</strong>） <strong>eg： Father f &#x3D; new Son();</strong></p></li><li><p>使用： 多态的使用前提：① 类的继承关系 ② 方法的重写</p></li><li><p>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</p></li><li><p>多态情况下，</p><p> “看左边”：看的是父类的引用（父类中不具备子类特有的方法）<br> “看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</p></li><li><p>应用： <strong>虚方法调用</strong>，子类重写父类方法，Father f &#x3D; new Son();   son.eat(); <strong>编译时，认为是父类的方法</strong>，<strong>执行时，执行子类的重写方法</strong>，<strong>屏蔽了子类的特有属性和方法。</strong>（<strong>使用构造器注入子类特有属性</strong>）</p></li></ol><h4 id="5-易错"><a href="#5-易错" class="headerlink" title="5.易错"></a>5.<strong>易错</strong></h4><ol><li><strong>属性没有多态性</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestVariable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Base</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldMethodTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//20</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10，变量无多态性</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20，方法有多态性</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Object类"><a href="#8-Object类" class="headerlink" title="8.Object类"></a>8.Object类</h3><p>所有类的根父类；</p><h4 id="重点（equals与toString）"><a href="#重点（equals与toString）" class="headerlink" title="重点（equals与toString）"></a>重点（equals与toString）</h4><ol><li><p>equals（）与 &#x3D;&#x3D;</p><p><strong>&#x3D;&#x3D;</strong>  可以比较基本类型，也可以比较引用类型，基本类型比较值，引用类型比较内存地址。<strong>两边的数据类型必须兼容(可自动转换的基本数据类型除外)，否则编译出错</strong></p><p><strong>equals()</strong> 属于Object类中的方法，默认是 &#x3D;&#x3D;，但是我们一般都会重写（比较属性值是否相等）</p></li><li><p>toString()</p><p>默认，toString() 返回  “ 对象的运行时类型 @ 对象的hashCode值的十六进制形式”。<strong>需要重写。</strong></p></li></ol><h3 id="9-static关键字"><a href="#9-static关键字" class="headerlink" title="9.static关键字"></a>9.static关键字</h3><p>可修饰<strong>属性，方法、代码块、内部类</strong></p><ol><li>静态变量VS实例变量</li></ol><table><thead><tr><th>属性</th><th>加载时机</th><th>内存位置</th><th>能否共享</th><th>调用者</th><th>消亡时机</th></tr></thead><tbody><tr><td>静态变量</td><td>类加载时实例化，实例化一次</td><td>jdk6及之前存放在方法区，jdk7以后存放在<strong>堆空间</strong></td><td>被多个对象共享</td><td>类、对象</td><td>随类的卸载死亡</td></tr><tr><td>实例变量</td><td>对象创建时加载</td><td>堆空间的对象实体中</td><td>否</td><td>对象</td><td>随对象的死亡</td></tr></tbody></table><ol start="2"><li><p>静态方法</p><table><thead><tr><th>方法</th><th>加载时机</th><th>内部属性、方法调用</th><th>调用</th><th>继承与重写</th><th>this&#x2F;super</th></tr></thead><tbody><tr><td>静态方法</td><td>类加载时</td><td>调用静态方法、属性</td><td>类.静态方法（）</td><td>可被继承，无法重写</td><td>无法使用</td></tr><tr><td>非静态方法</td><td></td><td>可调用静态与非静态属性方法</td><td></td><td></td><td></td></tr></tbody></table></li><li><p><strong>main方法(程序入口)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] = "</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​       与控制台交互的方法：<strong>1.Scanner类           2. mian方法形参传值</strong></p><ol start="4"><li><p>代码块</p><p>作用： <strong>初始化类或对象</strong></p></li></ol><table><thead><tr><th>代码块</th><th>执行时机</th><th>作用</th><th>内部属性、方法调用</th><th>this&#x2F;super</th></tr></thead><tbody><tr><td>静态代码块</td><td>随类的加载执行</td><td>初始化类信息</td><td>调用静态方法、属性</td><td>无法使用</td></tr><tr><td>非静态代码块</td><td>随对象的创建执行</td><td>初始化对象信息</td><td>可调用静态与非静态属性方法</td><td>可以使用</td></tr></tbody></table><p><strong>静态变量执行顺序：</strong> 初始化赋值 、代码块赋值（按照代码顺序执行）–（若有构造器里面修改了静态属性，即创建了对象之后获取值）构造器赋值</p><p><strong>实例变量执行顺序</strong>：初始化赋值、代码块赋值（按照代码顺序执行）– 构造器赋值 —-set（）赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//不会报错</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码的执行顺序："><a href="#代码的执行顺序：" class="headerlink" title="代码的执行顺序："></a>代码的执行顺序：</h4><p>父类静态代码块–子类静态代码块—父类非静态代码块—父类构造方法—子类非静态代码块—子类构造方法</p><h3 id="10-final关键字"><a href="#10-final关键字" class="headerlink" title="10.final关键字"></a>10.final关键字</h3><table><thead><tr><th>修饰</th><th></th></tr></thead><tbody><tr><td>变量（常量，建议使用大写字母）</td><td>赋值后，不能修改值（引用对象的属性值可以改变）</td></tr><tr><td>方法</td><td>不能被重写</td></tr><tr><td>类</td><td>不能被继承</td></tr></tbody></table><h3 id="11-抽象类（abstract）"><a href="#11-抽象类（abstract）" class="headerlink" title="11.抽象类（abstract）"></a>11.抽象类（abstract）</h3><table><thead><tr><th></th><th>实例化</th><th>构造方法</th><th>抽象方法</th><th>子类的抽象方法</th></tr></thead><tbody><tr><td>抽象类</td><td>不可以</td><td>有（用于初始化父类成员变量）</td><td>可以没有</td><td>必须重写（编译无法通过）</td></tr></tbody></table><p>一般用于<strong>模板方法模式</strong></p><h3 id="12-接口-interface-接口可以继承接口（extends），支持多继承"><a href="#12-接口-interface-接口可以继承接口（extends），支持多继承" class="headerlink" title="12.接口(interface)    接口可以继承接口（extends），支持多继承"></a>12.接口(interface)    接口可以继承接口（extends），支持多继承</h3><table><thead><tr><th>成员</th><th>修饰符</th><th>时间</th><th>作用</th></tr></thead><tbody><tr><td>公共的静态常量</td><td>public static final可以省略</td><td>jdk8之前</td><td>接口是一个规范，规范中需要声明一些边界值</td></tr><tr><td>公共的抽象方法</td><td>public abstract可以省略</td><td>jdk8之前</td><td></td></tr><tr><td>公共的默认的方法</td><td>public 可以省略，建议保留，但是default不能省略</td><td>jdk8</td><td>1.接口中的某个抽象方法，在实现类中有多行共同代码                     2.修改旧接口提供新方法会有兼容性问题</td></tr><tr><td>公共的静态的方法</td><td>public 可以省略，建议保留，但是static不能省略</td><td>jdk8</td><td>某些接口的实现类中有一些静态方法，这些方法为接口服务，直接定义到接口中更加方便</td></tr><tr><td>私有方法</td><td></td><td>jdk9</td><td>默认方法和静态方法这样具有具体实现的方法，可能有公共代码，所以设置为私有方法，供接口内部使用</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态常量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//int i  = 10;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">get1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// void get1();</span><span class="token comment">//默认方法</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//public default voud get2()&#123;&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//public static void get3()&#123;&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//私有方法</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">get4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>接口与抽象类</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB.png"></p></li></ol><h3 id="13-内部类"><a href="#13-内部类" class="headerlink" title="13.内部类"></a>13.内部类</h3><ol><li><p>分类</p><p><strong>成员内部类：                                                                   静态成员内部类</strong></p><p>（声明在外部类内）                                                       <strong>非静态成员内部类</strong></p></li></ol><p>​       <strong>局部内部类：                                                                   非匿名局部内部类</strong></p><p>​        （声明在方法、构造器、代码块内）                            <strong>匿名局部内部类</strong></p><h4 id="2-成员内部类"><a href="#2-成员内部类" class="headerlink" title="2.成员内部类"></a>2.成员内部类</h4><ol><li>声明为abstract类，可以被继承</li></ol><p>​           2.声明为final，表示不能被继承</p><p>​           3. 可以使用外部类的私有属性</p><h4 id="3-局部内部类（不能有权限修饰符）"><a href="#3-局部内部类（不能有权限修饰符）" class="headerlink" title="3.局部内部类（不能有权限修饰符）"></a>3.局部内部类（不能有权限修饰符）</h4><p><strong>非匿名内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 外部类<span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型  方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">[</span><span class="token keyword">final</span><span class="token operator">/</span><span class="token keyword">abstract</span><span class="token punctuation">]</span> <span class="token keyword">class</span> 内部类<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​      <strong>匿名内部类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 父接口<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    重写方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 父类<span class="token punctuation">(</span><span class="token punctuation">[</span>实参列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    重写方法<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="14-枚举类（私有化构造器）"><a href="#14-枚举类（私有化构造器）" class="headerlink" title="14.枚举类（私有化构造器）"></a>14.枚举类（<strong>私有化构造器</strong>）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开发中，当需要定义一组常量时，强烈建议使用枚举类。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>概念</p><p>枚举类型本质上也是一种类，只不过是这个类的对象是有限的、固定的几个，不能让用户随意创建。</p></li><li><p>实现</p><p>在JDK5.0 之前，需要程序员自定义枚举类型。<br>在JDK5.0 之后，Java支持enum关键字来快速定义枚举类型。</p></li><li><p>实现步骤（5.0之前）</p><ol><li><strong>私有化构造器</strong></li><li>创建实例：public static final</li><li>对象如果有实例变量，应该声明为private final（建议，不是必须），并在构造器中初始化</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span><span class="token comment">//季节的名称</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span><span class="token comment">//季节的描述</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONNAME</span> <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONDESC</span> <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"白雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"SEASONNAME='"</span> <span class="token operator">+</span> <span class="token constant">SEASONNAME</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", SEASONDESC='"</span> <span class="token operator">+</span> <span class="token constant">SEASONDESC</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.0之后</strong>（enum）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用逗号隔开</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token constant">AUTUMN</span> <span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"白雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span><span class="token comment">//季节的名称</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span><span class="token comment">//季节的描述</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONNAME</span> <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">SEASONDESC</span> <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSEASONNAME</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">SEASONNAME</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSEASONDESC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">SEASONDESC</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"SEASONNAME='"</span> <span class="token operator">+</span> <span class="token constant">SEASONNAME</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", SEASONDESC='"</span> <span class="token operator">+</span> <span class="token constant">SEASONDESC</span> <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>默认父类 ：java.lang.Enum</p></li><li><p>常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 默认返回的是常量名（对象名），可以继续手动重写该方法！    <span class="token keyword">static</span> 枚举类型<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值，是一个静态方法<span class="token comment">//Season[] values = Season.values();</span>  <span class="token comment">//      for (Season s: values) &#123;</span>  <span class="token comment">//          System.out.println(s);</span>  <span class="token comment">//      &#125;</span>    <span class="token keyword">static</span> 枚举类型 <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：<span class="token class-name">IllegalArgumentException</span>。   <span class="token comment">// Season spring = Season.valueOf("SPRING");</span><span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>得到当前枚举常量的名称。建议优先使用<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。    <span class="token keyword">int</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回当前枚举常量的次序号，默认从<span class="token number">0</span>开始  <span class="token comment">//  System.out.println(spring.ordinal());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、枚举类可以像普通的类一样，实现接口，并且可以多个，但要求必须实现里面所有的抽象方法！</span><span class="token keyword">enum</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> 接口<span class="token number">1</span>，接口<span class="token number">2</span><span class="token punctuation">&#123;</span><span class="token comment">//抽象方法的实现</span><span class="token punctuation">&#125;</span><span class="token comment">//2、如果枚举类的常量可以继续重写抽象方法!</span><span class="token keyword">enum</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> 接口<span class="token number">1</span>，接口<span class="token number">2</span><span class="token punctuation">&#123;</span>    常量名<span class="token function">1</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//抽象方法的实现或重写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    常量名<span class="token function">2</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//抽象方法的实现或重写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="15-注解（Annotation）"><a href="#15-注解（Annotation）" class="headerlink" title="15.注解（Annotation）"></a>15.注解（Annotation）</h3><ol><li><p>基本注解</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Override</td><td>标记为重写方法，（不是编译错误）</td></tr><tr><td>@Deprecated</td><td>标记为过时方法、属性、构造、类、包、参数</td></tr><tr><td>@SuppressWarnings</td><td>抑制编译警告。属性、构造、类、包、参数</td></tr></tbody></table></li><li><p><strong>元注解</strong></p></li></ol><table><thead><tr><th>注解</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td>@Target</td><td>描述注解使用范围</td><td>枚举类型ElementType的10个常量对象{TYPE，METHOD，CONSTRUCTOR，PACKAGE…}</td></tr><tr><td>@Retention</td><td>描述注解生命周期</td><td>枚举类型RetentionPolicy的3个常量对象{SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）}</td></tr><tr><td>@Document</td><td>应该被javadoc记录</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="16-包装类（默认：null）"><a href="#16-包装类（默认：null）" class="headerlink" title="16.包装类（默认：null）"></a>16.包装类（默认：null）</h3><ol><li>原因： 泛型的使用及API的使用</li></ol><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%8C%85%E8%A3%85%E7%B1%BB.png"></p><ol start="2"><li><p>包装类的缓存对象（在包装类中有对应数组，若赋值小于此范围则从数组中取），（在静态代码块实现）（常量池：存储在方法区）</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1.png"></p></li><li><pre><code class="java">Integer i = 128;Integer j = 128;System.out.println(i == j);//falseInteger m = new Integer(1);//新new的在堆中Integer n = 1;//这个用的是缓冲的常量对象，在方法区System.out.println(m == n);//falseInteger x = new Integer(1);//新new的在堆中Integer y = new Integer(1);//另一个新new的在堆中System.out.println(x == y);//falseInteger i = 1;Double d = 1;//错误的，1是int类型double d = 1; //正确Object o1 = true ? new Integer(1) : new Double(2.0);        //默认调用toString方法        System.out.println(o1);//1.0 三目运算符比较基本数据类型，所以在编译阶段自动拆箱为 int 和 double 类型，由于三目运算符要求 表达式2 和 表                                  达式3 类型一致，所以在编译阶段自动类型提升（即 int 自动类型转换为 double 类型），再自动装箱为Object，输出时使                                 用多态调用重写的toString();即Double包装类的toString();<pre class="line-numbers language-none"><code class="language-none">   ## 五、异常![](https:&#x2F;&#x2F;gitee.com&#x2F;mr-poke&#x2F;picture&#x2F;raw&#x2F;master&#x2F;img&#x2F;%E5%BC%82%E5%B8%B8.png)### 1.Error（java.lang.Error）JVM无法处理的严重问题，一般不编写针对性的代码处理。- StackOverflowError（栈内存溢出）和OutOfMemoryError（堆内存溢出，简称OOM）。### 2.Exception（java.lang.Exception）因编程错误或偶然的外在因素导致的问题。 需要是有针对性的代码处理。分类：**编译时异常（受检）、运行时异常（非受检）**#### 1. 编译时异常：（一定处理，否则编译不通过）ClassNotFoundException（找不到指定类）FileNotFoundException（文件找不到）IOException（IO流异常）#### 2. 运行时异常（根据异常修改代码，捕捉后可以正常运行，但是会报错）ArrayIndexOutBoundsException (数组下标越界)NullPointerException（空指针异常）ClassCastException（强制类型转换异常）NumberFormatException（数字格式异常）InputMistchException（输入错误异常）ArithmeticException（算数异常）### 3.异常处理#### 1. try-catch-finally（进行异常处理，调用者处理捕捉，出现异常，正常运行）一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为**捕获(catch)异常**。**一个异常回到main()方法，并且main()也不处理，则程序运行终止。**##### 重点：**finally一定会执行。在catch中有return，finally也会执行（finally中有return，则catch中的return不执行）**&#96;&#96;&#96;java public static void main(String[] args) &#123;        System.out.println(test());     &#x2F;&#x2F;2    &#125;    public static int test()&#123;        int i&#x3D;0;        try&#123;            return i++;             &#x2F;&#x2F;i++，先使用后自增，所以此时i &#x3D; 0 ，返回时进行了finally        &#125;finally&#123;            &#x2F;&#x2F;两种情况分析（有无return）           &#x2F;&#x2F; return ++i;            &#x2F;&#x2F; ++i，先自增后使用，所有此时i &#x3D; i+1(1+1) &#x3D; 2 ，返回 2                      &#x2F;&#x2F; ++i;                    &#x2F;&#x2F;没有return，此时i&#x3D; i+1(1+1)&#x3D;2。但是finally中我们只是对i++进行了自增。try中的return 还是得返回0        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h4 id="2-throws-异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）"><a href="#2-throws-异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）" class="headerlink" title="2.throws + 异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）"></a>2.throws + 异常类型（不进行异常处理，扔给调用者，出现异常，代码不执行）</h4><h5 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h5><ul><li>如果<strong>父类被重写方法的方法签名后面没有 “throws 编译时异常类</strong>型”，<strong>那么重写方法时，</strong>方法签名后面也<strong>不能出现“throws 编译时异常类型”。</strong></li><li>如果<strong>父类被重写方法的方法签名后面有 ，那么重写方法时，throws的编译时异常类型必须 &lt;&#x3D; 被重写方法throws的编译时异常类型，或者不throws编译时异常。</strong></li><li>方法重写，对于“<strong>throws 运行时异常类型</strong>”没有要求。</li></ul><h4 id="3-两种异常处理方式的选择"><a href="#3-两种异常处理方式的选择" class="headerlink" title="3.两种异常处理方式的选择"></a>3.两种异常处理方式的选择</h4><ol><li>涉及资源调用，使用try-catch</li><li>父类被重写方法无throws，子类使用try-catch</li><li>方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。</li></ol><h3 id="4-throw（抛出异常，代码不执行）"><a href="#4-throw（抛出异常，代码不执行）" class="headerlink" title="4.throw（抛出异常，代码不执行）"></a>4.throw（抛出异常，代码不执行）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用场景：</p><p>在java中，我们需要自定义的场景下（如：输入不能为负数）使用。</p><h3 id="5-三者区别"><a href="#5-三者区别" class="headerlink" title="5.三者区别"></a>5.三者区别</h3><table><thead><tr><th></th><th>作用</th><th>如何处理</th><th></th><th>位置</th><th>重写方法的异常问题</th></tr></thead><tbody><tr><td>try-catch</td><td>捕捉异常</td><td>catch处理</td><td>在try中的异常（包括方法中的throw和throws），代码正常执行</td><td>代码中</td><td></td></tr><tr><td>throws</td><td>捕捉异常</td><td>抛出（不处理，交由调用者处理）</td><td>不执行</td><td>方法上声明</td><td>父类未写throws编译时异常，子类无法写，父类写了编译时异常，子类的编译时异常不能大于父类（也可不写）</td></tr><tr><td>throw</td><td>抛出异常</td><td>手动抛出</td><td>不执行(后续代码编译不通过)</td><td>代码中</td><td></td></tr></tbody></table><h3 id="6-自定义异常（只能throw抛出）"><a href="#6-自定义异常（只能throw抛出）" class="headerlink" title="6. 自定义异常（只能throw抛出）"></a>6. 自定义异常（只能throw抛出）</h3><h4 id="1-自定义一个编译时异常类型：自定义类继承java-lang-Exception。"><a href="#1-自定义一个编译时异常类型：自定义类继承java-lang-Exception。" class="headerlink" title="1.自定义一个编译时异常类型：自定义类继承java.lang.Exception。"></a>1.自定义一个编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</h4><h4 id="2-自定义一个运行时异常类型：自定义类继承java-lang-RuntimeException。"><a href="#2-自定义一个运行时异常类型：自定义类继承java-lang-RuntimeException。" class="headerlink" title="2.自定义一个运行时异常类型：自定义类继承java.lang.RuntimeException。"></a>2.自定义一个运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code>。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">23423423435L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> idnumber<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idnumber <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> idnumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a>六、多线程</h2><h4 id="1-程序、进程与线程"><a href="#1-程序、进程与线程" class="headerlink" title="1.程序、进程与线程"></a>1.程序、进程与线程</h4><p><strong>程序</strong>：用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><p><strong>进程</strong>：程序的一次执行过程，或是正在内存中运行的应用程序</p><p>​           <strong>操作系统调度和分配资源的最小单位</strong></p><p><strong>线程 ：</strong>一个进程同一时间若并行执行多个线程，就是支持多线程的。 <strong>CPU调度和执行的最小单位。</strong></p><h4 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2.线程调度"></a>2.线程调度</h4><ol><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，并且平均分配每个线程占用 CPU 的时间</p></li><li><p>抢占式调度</p><p>让优先级高的线程以较大的概率优先使用 CPU。如果线程的优先级相同，那么会随机选择一个(线程随机性)，J<strong>ava使用的为抢占式调度。</strong></p></li></ol><h4 id="3-多线程程序优点："><a href="#3-多线程程序优点：" class="headerlink" title="3.多线程程序优点："></a>3.多线程程序优点：</h4><ol><li><p>提高程序响应。</p></li><li><p>提高CPU利用率</p></li><li><p>改善程序结构，将长又复杂的进程分为多个线程，独立运行。便于理解和修改</p></li></ol><h4 id="4-并行与并发"><a href="#4-并行与并发" class="headerlink" title="4.并行与并发"></a>4.并行与并发</h4><p><strong>并行：</strong> 两个或多个时间<strong>同一时刻</strong>发生。（同一时刻，多条指令在多个CPU上同时执行）</p><p><strong>并发</strong>： 两个或多个时间在<strong>同一时间段</strong>发生，在一段时间内。多条指令在单个CPU上快速轮换、交替执行，在宏观上有多个线程同时执行的效果。</p><h4 id="5-创建线程"><a href="#5-创建线程" class="headerlink" title="5.创建线程"></a>5.创建线程</h4><p>1.run()为线程执行体，start（）方法启动线程</p><h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式:"></a>创建线程的方式:</h4><ol><li><p><strong>继承Thread类</strong></p><p>run()方法只是普通方法（可多次调用），start（）是线程启动方法（只能调用一次）。</p></li><li><p><strong>实现Runnable接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> i  <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token keyword">null</span>，“线程<span class="token number">1</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实现Callable接口</strong>（call方法）</p><p>相比Runnable接口<strong>优点</strong>：有返回值，可以抛出异常，支持泛型返回值（借助FutureTask类）</p><p><strong>缺点</strong>： 效率较低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>线程池</strong></p></li></ol><h4 id="6-线程常用方法："><a href="#6-线程常用方法：" class="headerlink" title="*6.线程常用方法："></a>*6.线程常用方法：</h4><ol><li><p>start():  <strong>线程启动方法（只能用一次），JVM调用run（）</strong></p></li><li><p>run() ：<strong>线程执行体，普通方法，start()时调用</strong></p></li><li><p>getName()：<strong>获取当前线程名字</strong></p></li><li><p>setName()：<strong>设置线程名字</strong></p></li><li><p>join()：<strong>在线程a中b.join()，a进入阻塞状态，直到b执行完毕，a继续执行。</strong></p></li><li><p>join（long millis）: <strong>等待该线程终止的时间最长为 millis 毫秒。如果millis时间到，将不再等待。</strong></p></li><li><p>isAlive()：<strong>判断线程是否存活</strong></p></li><li><p>stop() ： <strong>结束线程执行，进入死亡状态</strong></p></li><li><p>suspend() : <strong>暂停线程，不释放锁资源 （过时）</strong></p></li><li><p>resume（）：<strong>继续线程执行，8、9一块使用（过时）</strong></p></li></ol><p>   <strong>线程优先级：</strong></p><table><thead><tr><th>常量</th><th>数值</th><th>优先级</th></tr></thead><tbody><tr><td>MAX_PRIORITY</td><td>10</td><td>最高</td></tr><tr><td>MIN_PRIORITY</td><td>1</td><td>最低</td></tr><tr><td>NORM_PRIORITY</td><td>5</td><td>普通，mian默认具有普通优先级</td></tr></tbody></table><ol><li>getPriority() : 获取线程优先级</li><li>setPriority()：修改线程优先级</li></ol><p><strong>静态方法</strong>：</p><ol><li><p>currentThread()：<strong>获取当前执行代码对应的线程对象</strong></p></li><li><p>sleep(参数)：<strong>休眠当前线程</strong>，使当前执行的线程以<strong>指定毫秒数</strong>暂停。<strong>不会释放锁</strong></p></li><li><p>yield()（读：”又的“）：<strong>暂停当前线程，回到就绪状态</strong>，使线程调度器重新调度，让当前优先级的多个线程抢占执行。</p></li></ol><h4 id="7-用到的设计模式"><a href="#7-用到的设计模式" class="headerlink" title="7.用到的设计模式"></a>7.用到的设计模式</h4><p><strong>代理模式</strong>：</p><p>Thread类内部使用了代理模式，将Runnable接口作为属性封装到类中，在run()中，判断Runnable接口是否赋值，若为空，则使用默认的，不为空，则使用属性值</p><h4 id="8-守护线程"><a href="#8-守护线程" class="headerlink" title="8.守护线程"></a>8.守护线程</h4><p>为其他线程提供服务，如JVM的垃圾回收线程。</p><p><strong>特点：</strong>若所有非守护线程死亡，则守护线程也死亡</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>方法可将指定线程设置为守护线程<span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以判断线程是否是守护线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="9-线程生命周期"><a href="#9-线程生命周期" class="headerlink" title="*9.线程生命周期"></a>*9.线程生命周期</h4><ol><li><p><strong>jdk1.5之前</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1.5%E4%B9%8B%E5%89%8D.png"></p></li><li><p><strong>JDK1.6及以后</strong></p></li></ol><p>在Thread类中有一个枚举类state</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>       <span class="token constant">NEW</span><span class="token punctuation">,</span>     <span class="token comment">//就绪 new </span>        <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>    <span class="token comment">//锁阻塞 blocked</span>    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>   <span class="token comment">//可运行(就绪，运行)</span>    <span class="token constant">WAITING</span><span class="token punctuation">,</span>     <span class="token comment">//无限等待   waiting</span>    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>  <span class="token comment">//计时等待 timed_waiting</span>        <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>    <span class="token comment">//死亡 terminated</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%AE%8C%E6%95%B4.png"></p><h4 id="10-线程安全"><a href="#10-线程安全" class="headerlink" title="*10.线程安全"></a>*10.线程安全</h4><h5 id="1-synchronized"><a href="#1-synchronized" class="headerlink" title="1.synchronized"></a>1.synchronized</h5><ol><li><p>同步代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//同步监视器也叫锁</span>    <span class="token comment">//需要同步的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>同步方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//可能会产生线程安全问题的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.synchronnized锁原理</p><p>​    <strong>静态方法</strong>：当前类的Class对象（类.class）</p></li></ol><p>​           <strong>非静态方法</strong>：this，当前对象</p><h5 id="2-Lock锁"><a href="#2-Lock锁" class="headerlink" title="2.Lock锁"></a>2.Lock锁</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//2. 调动lock()，实现需共享的代码的锁定</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//保证线程安全的代码;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token comment">//3. 调用unlock()，释放共享代码的锁定</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-Lock与synchronized的区别"><a href="#3-Lock与synchronized的区别" class="headerlink" title="3.Lock与synchronized的区别"></a>3.Lock与synchronized的区别</h5><table><thead><tr><th></th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>来源</td><td>JDK</td><td>代码实现（JDK1.5），使用场景更多</td></tr><tr><td>使用</td><td>代码块，方法</td><td>a &#x3D; new ();     try{a.lock()}finally{a.unlock();}</td></tr><tr><td>获取锁</td><td>synchronized一直获取锁</td><td>选择性的获取锁，如果一段时间获取不到，可以放弃</td></tr><tr><td>锁状态</td><td>不可查看</td><td>可判断是否获取到</td></tr><tr><td>释放</td><td>自动</td><td>手动（unlock）</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="11-死锁"><a href="#11-死锁" class="headerlink" title="*11.死锁"></a>*11.死锁</h4><ol><li><p><strong>不同的线程分别占用对方需要的同步资源</strong>不放弃，都在<strong>等待对方放弃自己需要的同步资源</strong>，就形成了线程的死锁。</p></li><li><p><strong>死锁的四个条件：</strong></p><ol><li><p><strong>互斥条件</strong></p></li><li><p><strong>占用且等待</strong></p></li><li><p><strong>不可抢夺（或不可抢占）</strong></p></li><li><p><strong>循环等待</strong></p></li></ol></li></ol><table><thead><tr><th>条件</th><th>概念</th><th>解决方法</th></tr></thead><tbody><tr><td>互斥条件</td><td>两个线程无法同时占用一个对象</td><td>无</td></tr><tr><td>占用且等待</td><td>a线程占用一定资源，等待b的资源，而b等待a线程资源的释放</td><td>一次性申请所需资源</td></tr><tr><td>不可抢夺（或不可抢占）</td><td>a线程无法抢夺b线程占有的资源</td><td>a线程释放现有资源</td></tr><tr><td>循环等待</td><td>a等待b，b等待a</td><td>为资源排序，申请资源时，先申请序号较小的</td></tr></tbody></table><h4 id="12-线程通信"><a href="#12-线程通信" class="headerlink" title="12.线程通信"></a>12.线程通信</h4><p><strong>需要多个线程有顺序的共同完成一个任务</strong></p><p>通信方法（<strong>只能使用于synchronized的同步代码块和同步方法</strong>）：</p><table><thead><tr><th>方法</th><th>作用</th><th>是否释放锁</th><th>备注</th></tr></thead><tbody><tr><td>wait(),wait(long time)</td><td>线程进入等待状态</td><td>释放锁</td><td>1. 可以有参数 2. Object类中定义</td></tr><tr><td>notify()</td><td>选取一个高优先级的wait线程唤醒（等优先级随机唤醒）</td><td></td><td>Object类中定义</td></tr><tr><td>notifyAll()</td><td>唤醒所有wait线程</td><td></td><td></td></tr></tbody></table><h5 id="区分sleep-和wait"><a href="#区分sleep-和wait" class="headerlink" title="区分sleep()和wait():"></a>区分sleep()和wait():</h5><p>相同点：一旦执行，都会使得当前线程结束执行状态，进入阻塞状态。</p><p>不同点：</p><p> ① 定义方法所属的类：sleep():Thread中定义。 wait():Object中定义</p><p> ② 使用范围的不同：sleep()可以在任何需要使用的位置被调用； <strong>wait():必须使用在同步代码块或同步方法中</strong></p><p> ③ 都在同步结构中使用的时候，是否释放同步监视器的操作不同：sleep():不会释放同步监视器 ;wait():会释放同步监视器</p><p> ④ 结束等待的方式不同：sleep()：指定时间一到就结束阻塞。 wait():可以指定时间 也可以无限等待直到notify或notifyAll。</p><p><strong>生产者消费者问题：</strong></p><p>多线程：生产者，消费者</p><h4 id="13-线程池"><a href="#13-线程池" class="headerlink" title="13.线程池"></a>13.线程池</h4><h5 id="ThearPoolExecutor"><a href="#ThearPoolExecutor" class="headerlink" title="ThearPoolExecutor"></a>ThearPoolExecutor</h5><h6 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                  <span class="token comment">//核心线程数量</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>               <span class="token comment">//最大线程数</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                <span class="token comment">//最大空闲时间</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                     <span class="token comment">//时间单位</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span> <span class="token comment">//任务队列</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>       <span class="token comment">//线程工厂</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span>  <span class="token comment">//饱和处理机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>int corePoolSize  核心线程数量</p><p>当任务提交线程池，若线程数量未达到核心线程数量，则创建线程执行。</p></li><li><p>int maximunPoolSize  最大线程数</p><p>任务队列加满，创建新线程。（控制最多可以创建多少线程）</p></li><li><p>long keepAliveTime   最大空闲时间</p><p>设定任务的空闲时间，超时回收线程，核心线程默认不会回收</p></li><li><p>TimeUnit unit                  时间单位</p><p>设置时间单位 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//枚举类</span><span class="token function">NANOSECONDS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANO_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/**     * Time unit representing one thousandth of a millisecond.     */</span>    <span class="token function">MICROSECONDS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICRO_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">//微秒</span>    <span class="token comment">/**     * Time unit representing one thousandth of a second.     */</span>    <span class="token function">MILLISECONDS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLI_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">//毫秒</span>    <span class="token comment">/**     * Time unit representing one second.     */</span>    <span class="token function">SECONDS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECOND_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//秒</span>    <span class="token comment">/**     * Time unit representing sixty seconds.     * @since 1.6     */</span>    <span class="token function">MINUTES</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTE_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">//分钟</span>    <span class="token comment">/**     * Time unit representing sixty minutes.     * @since 1.6     */</span>    <span class="token function">HOURS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOUR_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">//小时</span>    <span class="token comment">/**     * Time unit representing twenty four hours.     * @since 1.6     */</span>    <span class="token function">DAYS</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAY_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//日 </span>    <span class="token comment">// Scales as constants</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">NANO_SCALE</span>   <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">MICRO_SCALE</span>  <span class="token operator">=</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token constant">NANO_SCALE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">MILLI_SCALE</span>  <span class="token operator">=</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token constant">MICRO_SCALE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">SECOND_SCALE</span> <span class="token operator">=</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token constant">MILLI_SCALE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">MINUTE_SCALE</span> <span class="token operator">=</span> <span class="token number">60L</span> <span class="token operator">*</span> <span class="token constant">SECOND_SCALE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">HOUR_SCALE</span>   <span class="token operator">=</span> <span class="token number">60L</span> <span class="token operator">*</span> <span class="token constant">MINUTE_SCALE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">DAY_SCALE</span>    <span class="token operator">=</span> <span class="token number">24L</span> <span class="token operator">*</span> <span class="token constant">HOUR_SCALE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BlockingQueue<Runnable> workQueue, 任务队列</p><p>当核心线程均运行时，再添加任务，会添加到任务队列中，任务队列加满，创建新线程。</p></li><li><p>ThreadFactory threadFactory      线程工厂</p><p>允许自己参与创建线程的过程，自定义线程</p></li><li><p>RejectedExecutionHandler handler        饱和处理机制</p><p>任务队列满、线程达到了最大线程池数。如何处理任务。</p></li></ol><h6 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2.工作流程"></a>2.工作流程</h6><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230409191419450.png"></p><h5 id="ExecutorService常用方法"><a href="#ExecutorService常用方法" class="headerlink" title="ExecutorService常用方法"></a>ExecutorService常用方法</h5><p>void shutdown() :  <strong>执行完正在执行的任务和队列中等待的任务后,彻底关闭。</strong></p><p>List<Runnable> shutdownNow() :   <strong>停止正在执行的任务，暂停等待的任务，并返回等待执行的任务列表</strong></p><p><T> Future<T> submit(Callable<T> task) :  <strong>执行带返回值的任务，并返回Future对象</strong></p><p>Future&lt;?&gt; submit(Runnable task) :   <strong>执行一个Runnable任务，并返回一个表示该任务的Future。</strong> </p><p><T> Future<T> submit(Runnable task，T result) :  <strong>执行带返回值的任务，并返回Future对象</strong></p><h5 id="通过Executors提供四种线程池："><a href="#通过Executors提供四种线程池：" class="headerlink" title="通过Executors提供四种线程池："></a>通过Executors提供四种线程池：</h5><h5 id="newCachedThreadPool："><a href="#newCachedThreadPool：" class="headerlink" title="newCachedThreadPool："></a>newCachedThreadPool：</h5><p><strong>创建一个可缓存的无界线程池</strong>，如果线程池长度超过处理需要，可灵活回收空线程，若无可回收，则新建线程。当<strong>线程池中的线程空闲时间超过60s，则会自动回收该线程，当任务超过线程池的线程数则创建新的线程</strong>，<strong>线程池的大小上限为Integer.MAX_VALUE,可看作无限大</strong>。</p><h5 id="newFixedThreadPool："><a href="#newFixedThreadPool：" class="headerlink" title="newFixedThreadPool："></a>newFixedThreadPool：</h5><p><strong>创建一个指定大小的线程池</strong>，<strong>可控制线程的最大并发数</strong>，超出的线程会在LinkedBlockingQueue阻塞队列中等待</p><h5 id="newScheduledThreadPool："><a href="#newScheduledThreadPool：" class="headerlink" title="newScheduledThreadPool："></a>newScheduledThreadPool：</h5><p>创建一个定长的线程池，可以指定线程池核心线程数，支持定时及周期性任务的执行</p><h5 id="newSingleThreadExecutor："><a href="#newSingleThreadExecutor：" class="headerlink" title="newSingleThreadExecutor："></a>newSingleThreadExecutor：</h5><p>创建一个单线程化的线程池，它只有一个线程，用仅有的一个线程来执行任务，保证所有的任务按照指定顺序（FIFO，LIFO，优先级）执行，所有的任务都保存在队列LinkedBlockingQueue中，等待唯一的单线程来执行任务。</p><h2 id="六、常用API"><a href="#六、常用API" class="headerlink" title="六、常用API"></a>六、常用API</h2><h3 id="1-String类（final修饰的类）"><a href="#1-String类（final修饰的类）" class="headerlink" title="1.String类（final修饰的类）"></a>1.String类（final修饰的类）</h3><h4 id="1-底层"><a href="#1-底层" class="headerlink" title="1.底层"></a>1.底层</h4><p>jdk9及以后，<strong>底层是字节数组</strong>（byte[] value）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//final修饰，不可变</span>    <span class="token annotation punctuation">@Stable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字符串常量池"><a href="#2-字符串常量池" class="headerlink" title="2.字符串常量池"></a>2.字符串常量池</h4><p><strong>字符串常量存储位置</strong></p><p>不允许存放相同的字符串常量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>                                  <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>                                 <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//new String(a),new String(b);</span>                                                <span class="token comment">// new StringBuilder().append("a").append("b").toString()</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>                                <span class="token comment">//存到常量池</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span><span class="token string">"b"</span><span class="token punctuation">;</span>                            <span class="token comment">//在javac 编译优化</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>                               <span class="token comment">//new StringBuilder().append("a").append("b").toString()</span><span class="token class-name">String</span> s7 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//尝试将字符串加入常量池，若有则不加，若无则加入，并将池中的对象返回</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false                     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>存储位置</strong></p><table><thead><tr><th>jdk版本</th><th>存放位置</th><th>原因</th></tr></thead><tbody><tr><td>jdk7之前</td><td>方法区（永久代）(元空间)</td><td>GC考虑</td></tr><tr><td>jdk7之后</td><td>堆空间</td><td></td></tr></tbody></table><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a><strong>重点</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">（<span class="token number">1</span>）常量<span class="token operator">+</span>常量：结果是常量池。且常量池中不会存在相同内容的常量。（<span class="token number">2</span>）常量与变量 或 变量与变量：结果在堆中（<span class="token number">3</span>）拼接后调用intern方法：返回值在常量池中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-String-s-x3D-“abc”-与String-s-x3D-new-String-“abc”-区别？"><a href="#3-String-s-x3D-“abc”-与String-s-x3D-new-String-“abc”-区别？" class="headerlink" title="3.String s &#x3D; “abc” 与String s &#x3D; new String(“abc”)区别？"></a>3.String s &#x3D; “abc” 与String s &#x3D; new String(“abc”)区别？</h4><p>String s &#x3D;”abc”,存放在字符串常量池中（1.6在方法区，1.8之后在本地内存中）</p><p>String s &#x3D; new String（”abc”）在堆中创建String对象，然后指向了字符串常量池中的“abc”，最后返回了s的内存地址</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/String%E4%BE%8B%E5%AD%90.png"></p><h4 id="4-易错例子"><a href="#4-易错例子" class="headerlink" title="4. 易错例子"></a>4. 易错例子</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//不会改变，因为是形参修改了</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringTest</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str <span class="token operator">+</span> <span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-常用API"><a href="#5-常用API" class="headerlink" title="5.常用API"></a>5.常用API</h4><table><thead><tr><th>构造器方法</th><th>作用</th></tr></thead><tbody><tr><td>String（）</td><td></td></tr><tr><td>String(String s)</td><td></td></tr><tr><td>String(char[] value)</td><td></td></tr><tr><td>String(char[] value,int offset,int count)</td><td>选择一部分转换String</td></tr><tr><td>String(byte[] byte)</td><td>使用默认字符集解码</td></tr><tr><td>String（byte[] byte,String charsetName）</td><td>使用指定字符集解码</td></tr></tbody></table><h5 id="5-1-类型转换"><a href="#5-1-类型转换" class="headerlink" title="5.1 类型转换"></a>5.1 类型转换</h5><ol><li><p>int —&gt; String :    String.valueOf(i)</p><p>​                             Integer.toString(i);</p></li><li><p>String —&gt; int:    String.valueOf(i)</p><p>​                            Integer.parseInt(Stirng s)</p></li><li><p>字符数组 —&gt; 字符串：  构造器</p><p>​                                        Arrays.toString(ch)</p></li><li><p>字符串 —&gt; 字符数组：s.toCharArray()</p></li></ol><p>​                                               getChars(int Begin,End,char[],数组中的偏移量)                                   </p><ol start="5"><li><p>字节数组 —&gt; 字符串： s.getBytes(); 可选新参，表示字符集</p></li><li><p>字符串 —&gt; 字节数组： 构造器</p><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>空？</td><td></td></tr><tr><td>int length()</td><td>长度</td><td></td></tr><tr><td>String concat(xx)</td><td>连接字符串</td><td></td></tr><tr><td>boolean equals(Object obj)</td><td>区分大小写</td><td></td></tr><tr><td>boolean equalsIgnoreCase(Object obj)</td><td>不区分大小写</td><td></td></tr><tr><td>int compareTo(String other)</td><td>比较大小，按照Unicode</td><td></td></tr><tr><td>StringtoLowerCase()</td><td>转换小写</td><td></td></tr><tr><td>String toUpperCase()</td><td>转换大写</td><td></td></tr><tr><td>String trim()</td><td>去掉首尾空白字符</td><td></td></tr><tr><td>String intern()</td><td>将字符串放到常量池中</td><td></td></tr></tbody></table></li></ol><h5 id="5-2查找"><a href="#5-2查找" class="headerlink" title="5.2查找"></a>5.2<strong>查找</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean contains（xx）</td><td>是否包含</td><td></td></tr><tr><td>int indexOf(xx)</td><td>返回字符串xx第一次出现的位置</td><td></td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>返回字符串第一次出现的索引，从指定索引开始</td><td></td></tr><tr><td>int lastIndexOf(xx)</td><td>返回最后一次出现的位置</td><td></td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>返回字符串最后以次出现的索引，从指定索引开始</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="5-3截取："><a href="#5-3截取：" class="headerlink" title="5.3截取："></a>5.3<strong>截取：</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>String substring(int beginIndex)</td><td>返回从索引到最后的字符串</td><td></td></tr><tr><td>String substring(int beginIndex, int endIndex)</td><td>返回指定区间的（前包，后不包）</td><td></td></tr></tbody></table><h5 id="5-4判断开头结尾"><a href="#5-4判断开头结尾" class="headerlink" title="5.4判断开头结尾"></a>5.4<strong>判断开头结尾</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>boolean startsWith(xx)</td><td>是否以指定字符串开头</td><td></td></tr><tr><td>boolean startsWith(String prefix, int toffset)</td><td>指定索引开始的字符是否以指定前缀开始</td><td></td></tr><tr><td>boolean endsWith(xx)</td><td>是否以指定字符串结尾</td><td></td></tr></tbody></table><h5 id="5-5替换"><a href="#5-5替换" class="headerlink" title="5.5替换"></a>5.5<strong>替换</strong></h5><table><thead><tr><th>方法</th><th>作用</th><th>底层</th></tr></thead><tbody><tr><td>String replace(char oldChar, char newChar)</td><td>替换</td><td></td></tr><tr><td>tring replaceAll(String regex, String replacement)</td><td>替换所有</td><td></td></tr><tr><td>String replaceFirst(String regex, String replacement)：</td><td>替换第一个</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="2-StringBuffer与StringBuilder"><a href="#2-StringBuffer与StringBuilder" class="headerlink" title="2.StringBuffer与StringBuilder"></a>2.StringBuffer与StringBuilder</h3><table><thead><tr><th></th><th>不可变</th><th>继承性</th><th>线程安全</th><th>效率</th><th>底层</th><th>父类</th></tr></thead><tbody><tr><td>String</td><td>final修饰的数组，不可变</td><td>final修饰类，不可被继承</td><td>fina修饰的数组，视为常量，线程安全</td><td></td><td>JDK8及之前，char[], JDK9以后byte[]</td><td></td></tr><tr><td>StringBuffer</td><td>无final修饰的数组，可变</td><td>一致</td><td>线程安全，</td><td>较低</td><td>一致</td><td>AbstractStringBuilder抽象类，声明数组</td></tr><tr><td>StringBuilder</td><td>无final修饰的数组，可变</td><td>一致</td><td>线程不安全</td><td>较高</td><td>一致</td><td>AbstractStringBuilder抽象类，声明数组</td></tr></tbody></table><h5 id="1-String与Stringbuffer和StringBuilder创建对象的区别"><a href="#1-String与Stringbuffer和StringBuilder创建对象的区别" class="headerlink" title="1.String与Stringbuffer和StringBuilder创建对象的区别"></a>1.String与Stringbuffer和StringBuilder创建对象的区别</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char[] c = new char[3]&#123;'a','b','c'&#125;;（jdk8及以前）</span><span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  默认创建长度为16的数组，若有参数，则“abc”.length() +16</span>s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//长度超过最初定义的长度，默认扩容，扩容一倍+2， 如果还不够，扩容需要的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-StringBuffer与StringBuilder继承关系"><a href="#2-StringBuffer与StringBuilder继承关系" class="headerlink" title="2.StringBuffer与StringBuilder继承关系"></a>2.StringBuffer与StringBuilder继承关系</h5><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/String%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h5 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h5><pre class="line-numbers language-none"><code class="language-none">常用API（1）StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加的方式拼接（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符（4）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str（5）void setCharAt(int index, char c)：替换[index]位置字符（6）char charAt(int index)：查找指定index位置上的字符（7）StringBuffer insert(int index, xx)：在[index]位置插入xx（8）int length()：返回存储的字符数据的长度（9）StringBuffer reverse()：反转其他：（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标（5）String substring(int start)：截取当前字符序列[start,最后]（6）String substring(int start, int end)：截取当前字符序列[start,end)（7）String toString()：返回此序列中数据的字符串表示形式（8）void setLength(int newLength) ：设置当前字符序列长度为newLength<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-日期API"><a href="#3-日期API" class="headerlink" title="3.日期API"></a>3.日期API</h3><p><strong>LocalDate,LocalTime,LocalDateTime</strong></p><pre class="line-numbers language-none"><code class="language-none">now()&#x2F; now(ZoneId zone)静态方法，根据当前时间创建对象&#x2F;指定时区的对象of(xx,xx,xx,xx,xx,xxx)静态方法，根据指定日期&#x2F;时间创建对象getDayOfMonth()&#x2F;getDayOfYear()获得月份天数(1-31) &#x2F;获得年份天数(1-366)getDayOfWeek()获得星期几(返回一个 DayOfWeek 枚举值)getMonth()获得月份, 返回一个 Month 枚举值getMonthValue() &#x2F; getYear()获得月份(1-12) &#x2F;获得年份getHours()&#x2F;getMinute()&#x2F;getSecond()获得当前对象对应的小时、分钟、秒withDayOfMonth()&#x2F;withDayOfYear()&#x2F;withMonth()&#x2F;withYear()将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象with(TemporalAdjuster t)将当前日期时间设置为校对器指定的日期时间plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()向当前对象添加几天、几周、几个月、几年、几小时minusMonths() &#x2F; minusWeeks()&#x2F;minusDays()&#x2F;minusYears()&#x2F;minusHours()从当前对象减去几月、几周、几天、几年、几小时plus(TemporalAmount t)&#x2F;minus(TemporalAmount t)添加或减少一个 Duration 或 PeriodisBefore()&#x2F;isAfter()比较两个 LocalDateisLeapYear()判断是否是闰年（在LocalDate类中声明）format(DateTimeFormatter t)格式化本地日期、时间，返回一个字符串parse(Charsequence text)将指定格式的字符串解析为日期、时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Comparable与Comparator比较器"><a href="#4-Comparable与Comparator比较器" class="headerlink" title="4.Comparable与Comparator比较器"></a>4.Comparable与Comparator比较器</h3><table><thead><tr><th></th><th>排序规则</th><th>方法</th><th>用法</th><th></th></tr></thead><tbody><tr><td>Comparable</td><td>自然排序：java.lang.Comparable</td><td>int compareTo(Object obj)</td><td>在实体类中重写比较方法</td><td></td></tr><tr><td>Comparator</td><td>定制排序：java.util.Comparator</td><td>int compare(Object o1,Object o2)</td><td>重新定义比较器</td><td>（o1 -o2 为升序，o2-o1为降序）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//数组中的索引为1的比较其他，然后2比较。。。。。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Lambda</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>     <span class="token comment">//this与o比，若>0,则位置不变，若&lt;0则不位置交换</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-BigDecimal"><a href="#5-BigDecimal" class="headerlink" title="5.BigDecimal"></a>5.BigDecimal</h3><ul><li>构造器<ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val) –&gt; 推荐</li></ul></li><li>常用方法<ul><li>public BigDecimal <code>add</code>(BigDecimal augend)</li><li>public BigDecimal <code>subtract</code>(BigDecimal subtrahend)</li><li>public BigDecimal <code>multiply</code>(BigDecimal multiplicand)</li><li>public BigDecimal <code>divide</code>(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP :向上加1、ROUND_DOWN :直接舍去、ROUND_HALF_UP:四舍五入）</li></ul></li></ul><h2 id="七、集合框架（Collenction和Map接口）"><a href="#七、集合框架（Collenction和Map接口）" class="headerlink" title="七、集合框架（Collenction和Map接口）"></a>七、集合框架（Collenction和Map接口）</h2><p><strong>Collection接口结构图：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Collection.png"></p><p><strong>Map接口结构图：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Map%E6%8E%A5%E5%8F%A3.png"></p><h3 id="一、Collection接口"><a href="#一、Collection接口" class="headerlink" title="一、Collection接口"></a>一、Collection接口</h3><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><h5 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h5><table><thead><tr><th></th><th>作用</th><th>区别</th></tr></thead><tbody><tr><td>add(E obj)</td><td>添加元素对象到当前集合中</td><td>此方法在添加别的集合会直接将<strong>集合添加</strong></td></tr><tr><td>addAll(Collection other)</td><td>添加other集合中的所有元素对象到当前集合中，即this &#x3D; this ∪ other</td><td>此方法在添加别的集合会将<strong>此集合元素添加</strong></td></tr></tbody></table><h5 id="2-判断"><a href="#2-判断" class="headerlink" title="2.判断"></a>2.判断</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>int size()</td><td>元素个数</td><td></td></tr><tr><td>boolean isEmpty()</td><td>是否为空</td><td></td></tr><tr><td>boolean contains(Object obj)</td><td>是否存在元素obj</td><td></td></tr><tr><td>boolean containsAll(Collection coll)</td><td>coll集合中元素是否在此集合中存在</td><td></td></tr><tr><td>boolean equals(Object obj)</td><td>判断当前集合与obj是否相等</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>void clear()</td><td>清空元素</td><td></td></tr><tr><td>boolean remove(Object obj)</td><td>删除集合中第一个找到的obj对象</td><td></td></tr><tr><td>boolean removeAll(Collection coll)</td><td>删除所有与集合相同的对象</td><td></td></tr><tr><td>boolean retainAll(Collection coll)</td><td>删除两集合不同的元素</td><td></td></tr></tbody></table><h5 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>Object[] toArray()</td><td>返回包含当前集合中所有元素的数组</td><td></td></tr><tr><td>hashCode()</td><td>返回对象hash值</td><td></td></tr><tr><td>iterator()</td><td>返回迭代器对象</td><td></td></tr></tbody></table><h4 id="2-List接口（存取有序）"><a href="#2-List接口（存取有序）" class="headerlink" title="2.List接口（存取有序）"></a>2.List接口（存取有序）</h4><h5 id="1-插入元素"><a href="#1-插入元素" class="headerlink" title="1.插入元素"></a>1.插入元素</h5><p>void add(int index, Object ele):在index位置插入ele元素<br>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</p><h5 id="2-获取元素"><a href="#2-获取元素" class="headerlink" title="2.获取元素"></a>2.获取元素</h5><p>Object get(int index):获取指定index位置的元素<br>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</p><h5 id="3-获取元素索引"><a href="#3-获取元素索引" class="headerlink" title="3.获取元素索引"></a>3.获取元素索引</h5><p>int indexOf(Object obj):返回obj在集合中首次出现的位置<br>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p><h5 id="4-删除和替换元素"><a href="#4-删除和替换元素" class="headerlink" title="4.删除和替换元素"></a>4.删除和替换元素</h5><p>Object remove(int index):移除指定index位置的元素，并返回此元素</p><p>Object set(int index, Object ele):设置指定index位置的元素为ele</p><h5 id="5-ArrayList与LinkedList"><a href="#5-ArrayList与LinkedList" class="headerlink" title="5.ArrayList与LinkedList"></a>5.ArrayList与LinkedList</h5><table><thead><tr><th></th><th>底层</th><th>优点</th><th>线程安全</th><th>可否存放null</th><th>扩容机制</th><th></th><th>适用范围</th></tr></thead><tbody><tr><td>ArrayList</td><td>动态数组，创建对象未定义长度，首次添加元素，定义长度10</td><td>有索引，定位快，查找和添加快  时间复杂度O（1）</td><td>不安全</td><td>多个null</td><td>扩容1.5倍，复制数组元素到新数组</td><td>若知道长度，建议使用定义长度的构造器</td><td>查询操作</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>插入、删除快 时间复杂度 O（1）</td><td>不安全</td><td>多个null</td><td></td><td></td><td>插入、删除操作</td></tr></tbody></table><h4 id="3-Set接口（存取无序、不可重复）"><a href="#3-Set接口（存取无序、不可重复）" class="headerlink" title="3.Set接口（存取无序、不可重复）"></a>3.Set接口（存取无序、不可重复）</h4><table><thead><tr><th></th><th>底层</th><th>线程安全</th><th>可否存放null</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>HashSet</td><td>HashMap，存在key中（数组+链表+红红黑树+）</td><td>不安全</td><td>一个null</td><td></td><td></td><td></td></tr><tr><td>LinkedHashSet（存取有序）</td><td>（数组+链表+红黑树）+双向链表</td><td></td><td>一个null</td><td></td><td></td><td></td></tr><tr><td>TreeSet</td><td>TreeMap（红黑树）</td><td></td><td>不可存放</td><td></td><td></td><td></td></tr></tbody></table><h3 id="二、Map接口"><a href="#二、Map接口" class="headerlink" title="二、Map接口"></a>二、Map接口</h3><h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><h5 id="1、添加、修改操作："><a href="#1、添加、修改操作：" class="headerlink" title="1、添加、修改操作："></a>1、添加、修改操作：</h5><p>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中<br>void putAll(Map m):将m中的所有key-value对存放到当前map中</p><h5 id="2、删除操作："><a href="#2、删除操作：" class="headerlink" title="2、删除操作："></a>2、删除操作：</h5><p>Object remove(Object key)：移除指定key的key-value对，并返回value<br>void clear()：清空当前map中的所有数据</p><h5 id="3-元素查询的操作："><a href="#3-元素查询的操作：" class="headerlink" title="3.元素查询的操作："></a>3.元素查询的操作：</h5><p>Object get(Object key)：获取指定key对应的value<br>boolean containsKey(Object key)：是否包含指定的key<br>boolean containsValue(Object value)：是否包含指定的value<br>int size()：返回map中key-value对的个数<br>boolean isEmpty()：判断当前map是否为空<br>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p><h5 id="4-元视图操作的方法："><a href="#4-元视图操作的方法：" class="headerlink" title="4.元视图操作的方法："></a>4.元视图操作的方法：</h5><p>Set keySet()：返回所有key构成的Set集合<br>Collection values()：返回所有value构成的Collection集合<br>Set entrySet()：返回所有key-value对构成的Set集合</p><h4 id="2-实现类HashMap"><a href="#2-实现类HashMap" class="headerlink" title="2.实现类HashMap"></a>2.实现类HashMap</h4><table><thead><tr><th></th><th>底层</th><th>线程安全</th><th>存放null</th><th>链表变为红黑树的时机</th><th></th><th></th></tr></thead><tbody><tr><td>HashMap</td><td>一维数组+单向链表+红黑树</td><td>不安全</td><td>一个null，（再加会替换）</td><td>链表长度大于8且数组长度大于64</td><td></td><td></td></tr><tr><td>HashTable</td><td></td><td>安全</td><td></td><td></td><td></td><td></td></tr><tr><td>TreeMap</td><td>红黑树</td><td></td><td>不可存放</td><td></td><td></td><td></td></tr></tbody></table><p><strong>hashMap</strong></p><h5 id="JDK8的HashMap底层"><a href="#JDK8的HashMap底层" class="headerlink" title="JDK8的HashMap底层"></a>JDK8的HashMap底层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*分析过程如下：将(key1,value1)添加到当前hashmap的对象中。首先会调用key1所在类的hashCode()方法，计算key1的哈希值1，此哈希值1再经过某种运算(hash())，得到哈希值2。此哈希值2再经过某种运算(indexFor())，确定在底层table数组中的索引位置i。   （1）如果数组索引为i上的数据为空，则(key1,value1)直接添加成功   ------位置1   （2）如果数组索引为i上的数据不为空，有(key2,value2)，则需要进一步判断：       判断key1的哈希值2与key2的哈希值是否相同：         （3） 如果哈希值不同，则(key1,value1)直接添加成功   ------位置2              如果哈希值相同，则需要继续调用key1所在类的equals()方法，将key2放入equals()形参进行判断                （4） equals方法返回false : 则(key1,value1)直接添加成功   ------位置3                      equals方法返回true : 默认情况下，value1会覆盖value2。位置1：直接将(key1,value1)以Node对象的方式存放到table数组索引i的位置。位置2、位置3：(key1,value1) 与现有的元素以链表的方式存储在table数组索引i的位置，新添加的元素指向旧添加的元素。...//扩容机制在不断的添加的情况下，满足如下条件的情况下，会进行扩容:if ((size >= threshold) &amp;&amp; (null != table[bucketIndex])) :默认情况下，当要添加的元素个数超过12(即：数组的长度（默认16） * loadFactor（加载因子0.75）得到的结果)时，就要考虑扩容。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*①使用HashMap()的构造器创建对象时，并没有在底层初始化长度为16的table数组。②jdk8中添加的key,value封装到了HashMap.Node类的对象中。而非jdk7中的HashMap.Entry。③jdk8中新增的元素所在的索引位置如果有其他元素。在经过一系列判断后，如果能添加，则是旧的元素指向新的元素。而非jdk7中的新的元素指向旧的元素。“七上八下”④jdk7时底层的数据结构是：数组+单向链表。 而jdk8时，底层的数据结构是：数组+单向链表+红黑树。红黑树出现的时机：当某个索引位置i上的链表的长度达到8，且数组的长度超过64时，此索引位置上的元素要从单向链表改为红黑树。如果索引i位置是红黑树的结构，当不断删除元素的情况下，当前索引i位置上的元素的个数低于6时，要从红黑树改为单向链表。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//未初始化数组</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment">//第一次添加，初始化数组，长度16</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment">//（默认加载因子0.75）当插入元素达到12时（16*0.75），扩容两倍，若当前计算出的数组下标的元素不为null时，用equals（）比较，若不一样，则存入，形成链表（新元素在老元素下面）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20220524142524796-1661448231966.png" alt="image-20220524142524796-1661448231966"></p><h3 id="三、Collections工具类"><a href="#三、Collections工具类" class="headerlink" title="三、Collections工具类"></a>三、Collections工具类</h3><h4 id="1-排序操作："><a href="#1-排序操作：" class="headerlink" title="1.排序操作："></a>1.排序操作：</h4><p>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p><h4 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h4><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素<br>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object min(Collection)：根据元素的自然顺序，返回给定集合中的最小元素<br>Object min(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最小元素<br>int binarySearch(List list,T key)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。<br>int binarySearch(List list,T key,Comparator c)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。<br>int frequency(Collection c，Object o)：返回指定集合中指定元素的出现次数</p><h4 id="3-复制、替换"><a href="#3-复制、替换" class="headerlink" title="3.复制、替换"></a>3.复制、替换</h4><p>void copy(List dest,List src)：将src中的内容复制到dest中<br>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值<br>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。</p><h4 id="4-添加"><a href="#4-添加" class="headerlink" title="4.添加"></a>4.添加</h4><p>boolean addAll(Collection c,T… elements)将所有指定元素添加到指定 collection 中。</p><h4 id="5-同步"><a href="#5-同步" class="headerlink" title="5.同步"></a>5.同步</h4><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：</p><h2 id="八、泛型"><a href="#八、泛型" class="headerlink" title="八、泛型"></a>八、泛型</h2><h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h3><p><strong>JAVA在之前使用Object接收，在具体使用方法时，需要强转，可能报错</strong>。Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<strong>ClassCastException异常</strong>。即，把不安全的因素在编译期间就排除了，而不是运行期；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换。</p><p><strong>把一个集合中的内容限制为一个特定的数据类型，这就是generic背后的核心思想</strong></p><h3 id="2-自定义泛型类、接口（无法自定义泛型异常）"><a href="#2-自定义泛型类、接口（无法自定义泛型异常）" class="headerlink" title="2.自定义泛型类、接口（无法自定义泛型异常）"></a>2.自定义泛型类、接口（无法自定义泛型异常）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用T类型定义变量</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> info<span class="token punctuation">;</span>    <span class="token comment">// 使用T类型定义一般方法</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">T</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用T类型定义构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">T</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// static的方法中不能声明泛型</span>    <span class="token comment">//public static void show(T t) &#123;</span>    <span class="token comment">//</span>    <span class="token comment">//&#125;</span>    <span class="token comment">// 不能在try-catch中使用泛型定义</span>    <span class="token comment">//public void test() &#123;</span>        <span class="token comment">//try &#123;</span>        <span class="token comment">//</span>        <span class="token comment">//&#125; catch (MyException&lt;T> ex) &#123;</span>        <span class="token comment">//</span>        <span class="token comment">//&#125;</span>    <span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义泛型方法"><a href="#4-自定义泛型方法" class="headerlink" title="4.自定义泛型方法"></a>4.自定义泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>访问权限<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>泛型<span class="token operator">></span>  返回值类型  方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>泛型标识 参数名称<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span>抛出的异常<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、IO流与File类"><a href="#九、IO流与File类" class="headerlink" title="九、IO流与File类"></a>九、IO流与File类</h2><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="1-构造方法-1"><a href="#1-构造方法-1" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>File(String pathname)</td><td>若pathname是相对路径，则默认的当前路径在系统属性user.dir中存储</td><td></td></tr><tr><td>File(String parent, String child)</td><td>以parent为父路径，child为子路径</td><td></td></tr><tr><td>public File(File parent, String child)</td><td>根据一个父File对象和子文件路径创建File对象</td><td></td></tr></tbody></table><h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h4><h5 id="1-获取文件和目录信息"><a href="#1-获取文件和目录信息" class="headerlink" title="1.获取文件和目录信息"></a>1.获取文件和目录信息</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>String getName()</td><td>获取名称</td><td></td></tr><tr><td>String getPath()</td><td>获取路径</td><td></td></tr><tr><td>String getAbsolutePath()</td><td>获取绝对路径</td><td></td></tr><tr><td>File getAbsoluteFile()</td><td>获取绝对路径表示的文件</td><td></td></tr><tr><td>String getParent()</td><td>获取上层目录，若无，返回空</td><td></td></tr><tr><td>long length()</td><td>获取文件长度</td><td></td></tr><tr><td>long lastModified()</td><td>获取最后修改时间，ms单位</td><td></td></tr></tbody></table><h5 id="2-列出目录的下一级"><a href="#2-列出目录的下一级" class="headerlink" title="2.列出目录的下一级"></a>2.列出目录的下一级</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>String[] list()</td><td>返回String数组，表示File目录中的所有子文件或目录</td><td></td></tr><tr><td>File[] listFiles()</td><td>返回File数组，表示该File目录中的所有的子文件或目录。</td><td></td></tr></tbody></table><h5 id="3-重命名"><a href="#3-重命名" class="headerlink" title="3.重命名"></a>3.重命名</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean renameTo(File dest)</td><td>将文件重命名为指定的文件目录</td><td></td></tr></tbody></table><h5 id="4-判断功能"><a href="#4-判断功能" class="headerlink" title="4.判断功能"></a>4.判断功能</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean exists()</td><td>文件&#x2F;目录是否存在</td><td></td></tr><tr><td>boolean isDirectory()</td><td>是否为目录</td><td></td></tr><tr><td>boolean isFile()</td><td>是否是文件</td><td></td></tr><tr><td>boolean canRead()</td><td>是否可读</td><td></td></tr><tr><td>boolean canWrite()</td><td>是否可写</td><td></td></tr><tr><td>boolean isHidden()</td><td>是否隐藏</td><td></td></tr></tbody></table><h5 id="5-创建、删除功能"><a href="#5-创建、删除功能" class="headerlink" title="5.创建、删除功能"></a>5.创建、删除功能</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>boolean createNewFile()</td><td>创建文件，若存在，返回false</td><td></td></tr><tr><td>boolean mkdir()</td><td>创建文件目录，若此文件的上层目录不存在，不创建</td><td></td></tr><tr><td>boolean mkdirs()</td><td>创建文件目录。如果上层文件目录不存在，一并创建。</td><td></td></tr><tr><td>boolean delete()</td><td>删除文件或文件夹</td><td>文件目录中不能包含文件或文件目录</td></tr></tbody></table><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据流向</td><td>输入、输出流</td><td>InputStream、Reader、OutputStream、Writer</td></tr><tr><td>数据单位</td><td>字节流（8bit）、字符流（16bit）</td><td>InputStream、OutputStream  、Reader、Writer</td></tr><tr><td>角色</td><td>节点流、处理流</td><td>不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="2-常用的节点流："><a href="#2-常用的节点流：" class="headerlink" title="2.常用的节点流："></a>2.常用的节点流：</h4><p><strong>文件流</strong>： FileInputStream、FileOutputStrean、FileReader、FileWriter<br><strong>字节&#x2F;字符数组流</strong>： ByteArrayInputStream、ByteArrayOutputStream、CharArrayReader、CharArrayWriter<br>对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。</p><h4 id="常用处理流："><a href="#常用处理流：" class="headerlink" title="常用处理流："></a>常用处理流：</h4><p><strong>缓冲流（需流）</strong>：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter<br>作用：增加缓冲功能，避免频繁读写硬盘，进而提升读写效率。<br><strong>转换流（需流</strong>）：InputStreamReader、OutputStreamReader<br>作用：实现字节流和字符流之间的转换。<br><strong>对象流（需流）</strong>：ObjectInputStream、ObjectOutputStream<br>作用：提供直接读写Java对象功能</p><h3 id="FileReader、FileWriter"><a href="#FileReader、FileWriter" class="headerlink" title="FileReader、FileWriter"></a>FileReader、FileWriter</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a><strong>FileReader</strong></h4><h5 id="1-常用方法-2"><a href="#1-常用方法-2" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>int read()</td><td>读取一个字符。自动提升int类型，若读完，返回-1</td><td></td></tr><tr><td>int read(char[]  cbuf)</td><td>从输入流中读取一些字符，并将它们存储到字符数组中 。每次最多读取cbuf.length个字符。返回实际读取的字符个数。没有数据可读，则返回-1。</td><td></td></tr><tr><td>int read(char[] cbuf,int off,int len)</td><td>从输入流中读取一些字符，并将它们存储到字符数组中，从cbuf[off]开始的位置存储。每次最多读取len个字符。返回实际读取的字符个数。没有数据可读，则返回-1</td><td></td></tr><tr><td>void close()</td><td>关闭流，释放资源。</td><td></td></tr></tbody></table><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>FileWriter(File file)</td><td>给定要读取的File对象</td><td></td></tr><tr><td>FileWriter(String fileName)</td><td>给定要读取的文件的名称</td><td></td></tr><tr><td>FileWriter(File file,boolean append)</td><td>指明是否在现有文件末尾追加内容。</td><td></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>void write(int c)</td><td>写出单个字符</td><td></td></tr><tr><td>void write(char[] cbuf)</td><td>写出字符数组</td><td></td></tr><tr><td>write(char[] cbuf, int off, int len)</td><td>出字符数组的某一部分。off：数组的开始索引；len：写出的字符个数。</td><td></td></tr><tr><td>void write(String str)</td><td>写出字符串</td><td></td></tr><tr><td>write(String str, int off, int len)</td><td>写出字符串的一部分，off开始索引，length：写出字符个数</td><td></td></tr><tr><td>void flush()</td><td>刷新该流的缓冲</td><td></td></tr><tr><td>void close()</td><td>关闭流</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>flush()作用：</strong></p><p>   把缓冲区的数据强行输出, 主要用在IO中，即清空缓冲区数据，一般在读写流(stream)的时候，数据是先被读到了内存中，再把数据写到文件中，当你数据读完的时候不代表你的数据已经写完了，因为还有一部分有可能会留在内存这个缓冲区中。这时候如果你调用了close()方法关闭了读写流，那么这部分数据就会丢失，所以应该在关闭读写流之前先flush()。</p><h3 id="FileInputStream、FileOutputStream"><a href="#FileInputStream、FileOutputStream" class="headerlink" title="FileInputStream、FileOutputStream"></a>FileInputStream、FileOutputStream</h3><p>方法与上述一致。。。</p><h3 id="缓冲流（作用在节点流基础上）"><a href="#缓冲流（作用在节点流基础上）" class="headerlink" title="缓冲流（作用在节点流基础上）"></a>缓冲流（作用在节点流基础上）</h3><table><thead><tr><th>节点流</th><th>缓冲流</th><th>特有方法</th></tr></thead><tbody><tr><td>FileInputStream</td><td>BufferInputStream</td><td></td></tr><tr><td>FileOutputStream</td><td>BufferOutputStream</td><td></td></tr><tr><td>FileReader</td><td>BufferReader</td><td>String readLine()  读一行</td></tr><tr><td>FileWriter</td><td>BufferWriter</td><td>void newLine()      写一行行分隔符,由系统属性定义符号</td></tr></tbody></table><h4 id="作用：减少磁盘IO次数"><a href="#作用：减少磁盘IO次数" class="headerlink" title="作用：减少磁盘IO次数"></a>作用：减少磁盘IO次数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">File</span> f1<span class="token punctuation">,</span><span class="token class-name">File</span> f2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\谷歌浏览器\\下载\\wallhaven-1k292g_1920x1080.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\谷歌浏览器\\下载\\wallhaven-1k292g_1920x1080.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\paper.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换流（处理读取文本文件乱码）"><a href="#转换流（处理读取文本文件乱码）" class="headerlink" title="转换流（处理读取文本文件乱码）"></a>转换流（处理读取文本文件乱码）</h3><h5 id="InputStreamReader（输入型的字节流-—-gt-输入型的字符流）"><a href="#InputStreamReader（输入型的字节流-—-gt-输入型的字符流）" class="headerlink" title="InputStreamReader（输入型的字节流 —&gt;输入型的字符流）"></a>InputStreamReader（输入型的字节流 —&gt;输入型的字符流）</h5><table><thead><tr><th>构造方法</th><th></th><th></th></tr></thead><tbody><tr><td>InputStreamReader(InputStream in)</td><td>创建一个使用默认字符集的字符流。</td><td></td></tr><tr><td>InputStreamReader(InputStream in, String charsetName)</td><td>创建一个指定字符集的字符流。</td><td></td></tr></tbody></table><h5 id="OutputStreamWriter（输出型的字符流—-gt-输出型的字节流）"><a href="#OutputStreamWriter（输出型的字符流—-gt-输出型的字节流）" class="headerlink" title="OutputStreamWriter（输出型的字符流—&gt;输出型的字节流）"></a>OutputStreamWriter（输出型的字符流—&gt;输出型的字节流）</h5><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>OutputStreamWriter(OutputStream in)</td><td>创建一个使用默认字符集的字符流</td><td></td></tr><tr><td>OutputStreamWriter(OutputStream in,String charsetName)</td><td>创建一个指定字符集的字符流。</td><td></td></tr></tbody></table><h5 id="ObjectInputStream（序列化）"><a href="#ObjectInputStream（序列化）" class="headerlink" title="ObjectInputStream（序列化）"></a>ObjectInputStream（序列化）</h5><p><strong>什么是序列化？</strong></p><p>​     允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。&#x2F;&#x2F;当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</p><p><strong>如何实现序列化？</strong></p><p>为了让某个类是可序列化的，该类必须实现java.io.Serializable 接口。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/blog/2023/04/06/fan-she/"/>
      <url>/blog/2023/04/06/fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-为什么要有反射？"><a href="#1-为什么要有反射？" class="headerlink" title="1. 为什么要有反射？"></a>1. 为什么要有反射？</h2><p>java程序中，所有的对象都有两种类型：<code>编译时类型</code>和<code>运行时类型</code>，而很多时候对象的编译时类型和运行时类型<code>不一致</code>。 Object obj &#x3D; new String(“hello”); obj.getClass()</p><p>例如：某些变量或形参的声明类型是Object类型，但是程序却需要调用该对象运行时类型的方法，该方法不是Object中的方法，那么如何解决呢？</p><p>解决这个问题，有两种方案：</p><p>方案1：在编译和运行时都完全知道类型的具体信息，在这种情况下，我们可以直接先使用<code>instanceof</code>运算符进行判断，再利用强制类型转换符将其转换成运行时类型的变量即可。</p><p>方案2：编译时根本无法预知该对象和类的真实信息，程序只能依靠<code>运行时信息</code>来发现该对象和类的真实信息，这就必须使用反射。</p><h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h2><p>Reflection（反射）是被视为<code>动态语言</code>的关键，反射机制允许程序在<code>运行期间</code>借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。<code>这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</code></p><h2 id="3-反射的优缺点"><a href="#3-反射的优缺点" class="headerlink" title="3.反射的优缺点"></a>3.反射的优缺点</h2><p><strong>优点：</strong></p><ul><li>提高了Java程序的灵活性和扩展性，<code>降低了耦合性</code>，提高<code>自适应</code>能力</li><li>允许程序创建和控制任何类的对象，无需提前<code>硬编码</code>目标类</li></ul><p><strong>缺点：</strong></p><ul><li>反射的<code>性能较低</code>。<ul><li>反射机制主要应用在对灵活性和扩展性要求很高的系统框架上</li></ul></li><li>反射会<code>模糊</code>程序内部逻辑，<code>可读性较差</code>。</li></ul><h1 id="二、Class类"><a href="#二、Class类" class="headerlink" title="二、Class类"></a>二、Class类</h1><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><strong>在JVM中存储在方法区</strong></p><h2 id="2-获取Class实例"><a href="#2-获取Class实例" class="headerlink" title="2.获取Class实例"></a>2.获取Class实例</h2><ol><li><p>调用对象的class()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Son</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用类的class属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span><span class="token punctuation">></span></span> mainClass <span class="token operator">=</span> <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用Class.forName(“”) ,可能抛出ClassNotFoundException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h2><table><thead><tr><th><strong>方法名</strong></th><th align="center"><strong>功能说明</strong></th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td align="center">返回指定类名 name 的 Class 对象</td></tr><tr><td>Object newInstance()</td><td align="center">返回对象实例</td></tr><tr><td>getName()</td><td align="center">返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td></tr><tr><td>Class getSuperClass()</td><td align="center">返回当前Class对象的父类的Class对象</td></tr><tr><td>Class [] getInterfaces()</td><td align="center">获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td align="center">返回该类的类加载器</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getConstructors()</td><td align="center">返回所有的构造方法</td></tr><tr><td>getDeclaredConstructors（）</td><td align="center">返回所有的public构造方法</td></tr><tr><td>getDeclaredConstructor（Class c…)</td><td align="center">获取指定参数的构造方法</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredFields()</td><td align="center">返回所有成员的属性</td></tr><tr><td>getFields()</td><td align="center">返回所有的public属性</td></tr><tr><td>getDeclaredField(“id”);</td><td align="center">获取指定的属性</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredMethods()</td><td align="center">返回所有方法</td></tr><tr><td>getMethods()</td><td align="center">返回所有的public方法</td></tr><tr><td>getMethod(String name,Class c)</td><td align="center">返回一个指定方法名和返回值的方法</td></tr><tr><td></td><td align="center"></td></tr><tr><td>getDeclaredAnnotations()</td><td align="center">返回所有注解</td></tr><tr><td>get Annotation(Class<T> c)</td><td align="center">返回指定注解</td></tr></tbody></table><h2 id="4-创建对象"><a href="#4-创建对象" class="headerlink" title="4.创建对象"></a>4.创建对象</h2><ol><li><p>使用空参构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被弃用</span>        <span class="token comment">//main.newInstance();</span>  <span class="token class-name">Main</span> m1 <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用有参构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Main</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">)</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="5-调用方法"><a href="#5-调用方法" class="headerlink" title="5.调用方法"></a>5.调用方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建Class对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> main <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span> <span class="token class-name">Main</span>  m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">)</span> main<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取方法    方法名，参数类型</span><span class="token class-name">Method</span> method <span class="token operator">=</span> main<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用方法     方法的对象，参数</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、反射的强大"><a href="#三、反射的强大" class="headerlink" title="三、反射的强大"></a>三、反射的强大</h1><p><strong>关于setAccessible方法的使用：</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible<strong>启动和禁用访问安全检查的开关</strong>。</li><li>参数值为<strong>true则指示反射的对象在使用时应该取消Java语言访问检查</strong>。<ul><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原<strong>本无法访问的私有成员也可以访问</strong></li></ul></li><li>参数值为<strong>false则指示反射的对象应该实施Java语言访问检查</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo创建博客</title>
      <link href="/blog/2023/04/05/bo-ke-she-zhi/"/>
      <url>/blog/2023/04/05/bo-ke-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h1><h2 id="Gitee-Pages-简介"><a href="#Gitee-Pages-简介" class="headerlink" title="Gitee Pages 简介"></a>Gitee Pages 简介</h2><p>上篇说了，GitHub 设计 Pages 功能是为了让用户能设计一个图文并茂的网页作为项目首页，提升新手友好度。那么Gitee为什么要提供网页托管服务呢？应该是同样的原因，或者说是因为 GitHub 有这个功能？( ╯▽╰)</p><p><a href="https://gitee.com/help/articles/4136">Gitee pages 官网</a> 的介绍：Gitee Pages 是一个免费的静态网页托管服务，您可以使用 Gitee Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用 Gitee 的 Pages服务。目前 Gitee Pages 支持 Jekyll、Hugo、Hexo编译静态资源。</p><h2 id="一、创建仓库"><a href="#一、创建仓库" class="headerlink" title="一、创建仓库"></a>一、创建仓库</h2><p>此处略过。。。。。</p><h2 id="二、开启GitPage"><a href="#二、开启GitPage" class="headerlink" title="二、开启GitPage"></a>二、开启GitPage</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/bolg.png"></p><p>勾选<code>强制使用HTTPS</code>，点击启动。</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%BC%80%E5%90%AFgitpage.png"></p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><h3 id="1-在仓库中创建一个HTML并保存。"><a href="#1-在仓库中创建一个HTML并保存。" class="headerlink" title="1.在仓库中创建一个HTML并保存。"></a>1.在仓库中创建一个HTML并保存。</h3><h3 id="2-Gitee-Pages更新"><a href="#2-Gitee-Pages更新" class="headerlink" title="2.Gitee Pages更新"></a>2.Gitee Pages更新</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/page%E6%9B%B4%E6%96%B0.png"></p><h3 id="3-访问-查看HTML访问是否成功"><a href="#3-访问-查看HTML访问是否成功" class="headerlink" title="3.访问-查看HTML访问是否成功"></a>3.访问-查看HTML访问是否成功</h3><h2 id="四、手动部署"><a href="#四、手动部署" class="headerlink" title="四、手动部署"></a>四、手动部署</h2><h3 id="1-设置Git"><a href="#1-设置Git" class="headerlink" title="1.设置Git"></a>1.设置Git</h3><p>右键打开Git Bash Here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中 username 和 username@XXX.com 是你注册 Gitee 的用户名和邮箱，如果账号不是邮箱注册的话，填自己的一个邮箱地址就行了</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@XXX.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中 username@XXX.com 同上，是你的注册邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@XXX.com&quot;</span></span><br><span class="line"><span class="comment">#一直按回车，直到结束。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看公钥，在命令行会输出一个路径 XXX为用户名</span></span><br><span class="line"><span class="built_in">cat</span> /c/Users/XXX/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">#复制</span></span><br></pre></td></tr></table></figure><h3 id="2-设置公钥"><a href="#2-设置公钥" class="headerlink" title="2.设置公钥"></a>2.设置公钥</h3><p>在Gitee中粘贴复制的密钥，并保存</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面的命令什么都不用改 输出Successfully表示成功</span></span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><h1 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h1><h2 id="一、安装依赖项"><a href="#一、安装依赖项" class="headerlink" title="一、安装依赖项"></a>一、安装依赖项</h2><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><p>Node.js 中文官网：<a href="https://nodejs.org/zh-cn/">nodejs.org</a></p><p>（进入网站，左侧为稳定版（建议），右侧为体验版）</p><h3 id="2-测试安装是否成功"><a href="#2-测试安装是否成功" class="headerlink" title="2.测试安装是否成功"></a>2.测试安装是否成功</h3><p> Win+R 打开运行框，输出cmd后，在命令行窗口输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><h3 id="1、修改npm源"><a href="#1、修改npm源" class="headerlink" title="1、修改npm源"></a>1、修改npm源</h3><p>默认npm源速度过慢，修改为淘宝源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"><span class="comment"># 或者永久修改 npm 源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ol><li><p>创建博客位置（空文件夹），路径尽量全英文（避免不必要的问题）</p></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架 安装 hexo 模块，-g表示安装全局模块</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 初始化文件夹  hexo 初始化，会用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>生成静态网站并启动服务器</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><ol start="4"><li><p>访问本服务器<a href="http://localhost:4000/%EF%BC%8C">http://localhost:4000/，</a></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E9%BB%98%E8%AE%A4.png"></p></li></ol><h2 id="三、提交到服务器"><a href="#三、提交到服务器" class="headerlink" title="三、提交到服务器"></a>三、提交到服务器</h2><h3 id="1-安装插件-hexo-deployer-git"><a href="#1-安装插件-hexo-deployer-git" class="headerlink" title="1.安装插件 hexo-deployer-git"></a>1.安装插件 hexo-deployer-git</h3><p>这个插件用于把生成好的静态页面上传到 Gitee Pages 仓库。（npm报错，请参照上方修改npm源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-发布"><a href="#2-发布" class="headerlink" title="2.发布"></a>2.发布</h3><p>在你博客的根目录下，有_config.yml，修改数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名，注意是master分支</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你的项目的SSH克隆地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部分主题可能显示异常，请配置_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#你的项目代码的地址（资源的根目录） ***为用户名</span></span><br><span class="line">url: https://gitee.com/***/blog/</span><br><span class="line"><span class="comment">#根目录</span></span><br><span class="line">root: /blog/</span><br></pre></td></tr></table></figure><p>发布到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>！！！不要忘了Git Page手动更新资源哦！！！</strong></p><h3 id="3-查看成功？"><a href="#3-查看成功？" class="headerlink" title="3.查看成功？"></a>3.查看成功？</h3><p>在更新资源页有网站提示，打开访问是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/blog/2023/03/30/jdbc/"/>
      <url>/blog/2023/03/30/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h1 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h1><h2 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h2><h3 id="1-注册驱动（registerDriver（））"><a href="#1-注册驱动（registerDriver（））" class="headerlink" title="1.注册驱动（registerDriver（））"></a>1.注册驱动（registerDriver（））</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可省略，在jar包中有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态代码块注册驱动，Driver</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Driver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取连接（Connection）"><a href="#2-获取连接（Connection）" class="headerlink" title="2.获取连接（Connection）"></a>2.获取连接（Connection）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接本机，简化书写：jdbc:mysql:///数据库名</span><span class="token comment">//后面可添加useSSL=false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-Connection（接口）"><a href="#2-Connection（接口）" class="headerlink" title="2.Connection（接口）"></a>2.Connection（接口）</h2><h3 id="1-获取执行SQL对象"><a href="#1-获取执行SQL对象" class="headerlink" title="1.获取执行SQL对象"></a>1.获取执行SQL对象</h3><h4 id="1-Statement-普通执行sql对象"><a href="#1-Statement-普通执行sql对象" class="headerlink" title="1.Statement 普通执行sql对象"></a>1.Statement 普通执行sql对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>方法</th><th>返回值</th><th>操作语句</th></tr></thead><tbody><tr><td>executeUpdate()</td><td>int</td><td>DML,DDL</td></tr><tr><td>executeQuery()</td><td>ResultSet</td><td>DQL</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//DML,DDL，返回值为1，表示执行成功 ，DDL成功也可能为0</span><span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    num <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从1开始</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-PreparedStatement-预编译sql的执行sql对象"><a href="#2-PreparedStatement-预编译sql的执行sql对象" class="headerlink" title="2.PreparedStatement 预编译sql的执行sql对象"></a>2.PreparedStatement 预编译sql的执行sql对象</h4><p><strong>防止SQL注入</strong>（字符串拼接，登录验证的sql问题；<strong>将字符转义</strong>）、<strong>性能快（预编译）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> c <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 根据sql语句创建PreparedStatement</span>             <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 设置参数</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">313.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//executeQuery() executeUpdate();</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-CallableStatement-执行存储过程的对象"><a href="#3-CallableStatement-执行存储过程的对象" class="headerlink" title="3.CallableStatement 执行存储过程的对象"></a>3.CallableStatement 执行存储过程的对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-管理事务"><a href="#2-管理事务" class="headerlink" title="2.管理事务"></a>2.管理事务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//开启事务   true :自动  false:手动</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autCommit<span class="token punctuation">)</span>     <span class="token comment">//提交</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///test?serverTimezone=UTC"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//开启事务</span>               connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"update student set name = '修改sql' where id = 1"</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"update student set name = '修改sql' where id = 2"</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> i1 <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//提交事务</span>               connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接</span>      <span class="token comment">//Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?serverTimezone=UTC", "root", "admin");</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select count(*) from couse"</span><span class="token punctuation">;</span>        <span class="token comment">//获取执行的对象</span>       <span class="token comment">// Statement statement = connection.createStatement();</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3.数据库连接池"></a>3.数据库连接池</h1><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><p>1.容器。负责分配、管理数据库连接（Connection）</p><p>2.允许程序重复使用一个现有的数据库连接，而不是重新建立</p><p>3.释放空闲时间超过最大空闲事件的数据库连接，避免没有释放数据库连接而引起的数据库连接遗漏</p><h2 id="2-常见的连接池"><a href="#2-常见的连接池" class="headerlink" title="2.常见的连接池"></a>2.常见的连接池</h2><table><thead><tr><th>数据库连接池</th></tr></thead><tbody><tr><td>DBCP</td></tr><tr><td>C3PO</td></tr><tr><td>Druid</td></tr></tbody></table><h2 id="3-Druid连接池"><a href="#3-Druid连接池" class="headerlink" title="3.Druid连接池"></a>3.Druid连接池</h2><h3 id="1-常见配置"><a href="#1-常见配置" class="headerlink" title="1.常见配置"></a>1.常见配置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">driverClassName</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">url</span> <span class="token punctuation">=</span>  <span class="token value attr-value">jdbc:mysql:///test?serverTimezone=UTC</span><span class="token key attr-name">username</span> <span class="token punctuation">=</span> <span class="token value attr-value">username</span><span class="token key attr-name">password</span> <span class="token punctuation">=</span> <span class="token value attr-value">password</span><span class="token comment">#初始化连接数量</span><span class="token key attr-name">initialSize</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span><span class="token comment">#最大连接数量</span><span class="token key attr-name">maxActive</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token comment">#最大等待时间</span><span class="token key attr-name">maxWait</span> <span class="token punctuation">=</span> <span class="token value attr-value">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="/blog/2023/03/30/spring/"/>
      <url>/blog/2023/03/30/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>此为Spring框架总结，若要具体了解底层实现，请配合黑马的spring高级49讲食用（QaQ）。在BeanDefinition阶段，我自己也写了相关的简单实现（<a href="https://gitee.com/mr-poke/demo_-she-ji">Demo_SheJi: 设计模式入门 (gitee.com)</a>），其中包括PropertyValues、MutablePropertyValues、BeanDefinition、BeanFactory、BeanDefinitionReader、BeanDefinitionRegistry 、ApplicationContext等类。</p><p>在项目中，Spring_Defined模块中打包。并在Spring_Demo中导入测试。</p><h1 id="一、BeanFactory-与-ApplicationContext"><a href="#一、BeanFactory-与-ApplicationContext" class="headerlink" title="一、BeanFactory 与 ApplicationContext"></a>一、BeanFactory 与 ApplicationContext</h1><table><thead><tr><th></th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>默认实现</td><td>DefaultListableBeanFactory</td><td>四种分别对应                                                                                                                                                                                          xml（ClassPathXmlApplicationContext），                      配置类（AnnotationConfigApplicationContext），磁盘下的配置类，web容器。</td></tr><tr><td>加载方式</td><td>延迟加载（首次调用getBean（）加载），因为beanFactory不会自动注册BeanFactory后处理器和Bean后处理器</td><td>立即加载（耗时，耗资源）饿汉式</td></tr><tr><td>关系</td><td>AOP的核心</td><td>继承并引用BeanFactory</td></tr><tr><td>功能</td><td>控制反转、基本的依赖注入、声明周期的功能</td><td>多语言处理、资源匹配、事件发布、环境信息处理</td></tr></tbody></table><h1 id="二、-Bean"><a href="#二、-Bean" class="headerlink" title="二、 Bean"></a>二、 Bean</h1><h2 id="1-Bean注入"><a href="#1-Bean注入" class="headerlink" title="1.Bean注入"></a>1.Bean注入</h2><table><thead><tr><th>Bean注入方式</th><th></th></tr></thead><tbody><tr><td>xml</td><td></td></tr><tr><td>配置类（注解）</td><td></td></tr></tbody></table><h3 id="1-xml-配置Bean"><a href="#1-xml-配置Bean" class="headerlink" title="1. xml 配置Bean"></a>1. xml 配置Bean</h3><table><thead><tr><th>属性</th><th>功能</th></tr></thead><tbody><tr><td>id &#x3D; class&#x3D;</td><td>bean的id和全限定类名</td></tr><tr><td>name</td><td>bean的别名</td></tr><tr><td>scope</td><td>bean的作用域</td></tr><tr><td>lazy-int</td><td>加载时机（beanFactory容器无效）</td></tr><tr><td>init-method</td><td>初始化方法</td></tr><tr><td>destroy-method</td><td>销毁方法，（需要显式关闭容器才会执行）</td></tr><tr><td>autowire</td><td>自动注入方式，byType || byName</td></tr><tr><td>factory-bean&#x3D;  factory-method</td><td>指定工厂bean的方法完成bean的创建</td></tr></tbody></table><h2 id="2-Bean的实例化"><a href="#2-Bean的实例化" class="headerlink" title="2.Bean的实例化"></a>2.Bean的实例化</h2><table><thead><tr><th>方式</th><th></th></tr></thead><tbody><tr><td>构造方法（默认无参，使用构造方法注入属性时，变为有参）</td><td></td></tr><tr><td>工厂方法实例化Bean</td><td></td></tr></tbody></table><h3 id="2-1工厂实例化Bean"><a href="#2-1工厂实例化Bean" class="headerlink" title="2.1工厂实例化Bean"></a>2.1工厂实例化Bean</h3><table><thead><tr><th>工厂实例化Bean</th></tr></thead><tbody><tr><td>静态工厂实例化</td></tr><tr><td>实例工厂实例化</td></tr><tr><td>FactoryBean 延迟实例化</td></tr></tbody></table><p><strong>静态工厂</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserService</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//在xml中配置： &lt;bean id="userService" class="factory.MyFactory1" factory-method="userService"/></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例工厂</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">UserMapper</span> <span class="token function">userMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// &lt;bean id="myFactory2" class="factory.MyFactory2"/></span> <span class="token comment">//   &lt;bean id="mapper" factory-bean="myFactory2" factory-method="userMapper"/></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现FactoryBean接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FactoryBean接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token constant">OBJECT_TYPE_ATTRIBUTE</span> <span class="token operator">=</span> <span class="token string">"factoryBeanObjectType"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现---------------</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory3</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserMapper</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FactoryBean与普通Bean的区别？"><a href="#FactoryBean与普通Bean的区别？" class="headerlink" title="FactoryBean与普通Bean的区别？"></a>FactoryBean与普通Bean的区别？</h3><table><thead><tr><th></th><th>普通Bean</th><th>FactoryBean</th></tr></thead><tbody><tr><td>实现</td><td></td><td>实现FactoryBean接口</td></tr><tr><td>存放位置</td><td>SingletonObjects池中</td><td>factoryBeanObjectCache池中</td></tr><tr><td>加载</td><td>ApplicationContext中默认立即加载</td><td>延迟加载</td></tr></tbody></table><h2 id="3-Bean的依赖注入方式"><a href="#3-Bean的依赖注入方式" class="headerlink" title="3.Bean的依赖注入方式"></a>3.Bean的依赖注入方式</h2><table><thead><tr><th>方式</th><th></th></tr></thead><tbody><tr><td>set</td><td>&lt;property name&#x3D;”userMapper” ref&#x3D;”userMapper” || value &#x3D;””&#x2F;&gt;</td></tr><tr><td>构造方法</td><td>&lt;constructor-arg name&#x3D;”” ref&#x3D;”” ||value&gt;</td></tr></tbody></table><h2 id="4-Bean作用域"><a href="#4-Bean作用域" class="headerlink" title="4.Bean作用域"></a>4.Bean作用域</h2><table><thead><tr><th>作用域</th><th></th><th></th></tr></thead><tbody><tr><td>Single -单例</td><td>创建一个</td><td>在singleObjects（单例池）</td></tr><tr><td>prototype -多例（原型）</td><td>每次获取均创建一个(延迟加载)</td><td>俺也不清楚QAQ</td></tr><tr><td><strong>Web中</strong></td><td></td><td></td></tr><tr><td>request-一次请求</td><td>一次请求创建一个</td><td></td></tr><tr><td>session-会话</td><td>每次会话创建一个</td><td></td></tr><tr><td>global session-全局</td><td>全局</td><td></td></tr></tbody></table><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><table><thead><tr><th>配置</th><th></th></tr></thead><tbody><tr><td>xml</td><td>bean  id &#x3D; “”  scope&#x3D;””</td></tr><tr><td>注解（@Scope）</td><td>value &#x3D; “”</td></tr></tbody></table><h2 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="*5.生命周期"></a>*5.生命周期</h2><p>简单的：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR创建 <span class="token arrow operator">--></span> 依赖注入依赖注入 <span class="token arrow operator">--></span> 初始化初始化 <span class="token arrow operator">--></span> 可用可用 <span class="token arrow operator">--></span> 销毁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单的大概流程</strong>：</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E7%AE%80%E5%8D%95%E7%9A%84bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><p><strong>加入BeanFactoryPostProcesssor与BeanPostProcessor的流程：</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Spring%E5%AE%8C%E6%95%B4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><h3 id="1-创建（实例化）"><a href="#1-创建（实例化）" class="headerlink" title="1.创建（实例化）"></a>1.创建（实例化）</h3><p>取出BeanDefinition，并进行判断：<strong>是否为单例、是否延迟加载、是否FactoryBean等</strong>，最终将普通的单例Bean通过反射实例化。</p><h3 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2.依赖注入"></a>2.依赖注入</h3><p>属性在BeanDefinition中封装在PropertyValue中。</p><h4 id="2-1注入普通属性"><a href="#2-1注入普通属性" class="headerlink" title="2.1注入普通属性"></a>2.1注入普通属性</h4><p>set()方法注入</p><h4 id="2-2注入单向引用对象"><a href="#2-2注入单向引用对象" class="headerlink" title="2.2注入单向引用对象"></a>2.2注入单向引用对象</h4><p>从容器中通过getBean()获取，然后set()注入，若容器中没有，先创建，在注入</p><h4 id="2-3注入双向引用对象（循环依赖）"><a href="#2-3注入双向引用对象（循环依赖）" class="headerlink" title="2.3注入双向引用对象（循环依赖）"></a>2.3注入双向引用对象（循环依赖）</h4><p><strong>问题概述</strong>：对象A有属性B，对象B有属性A。</p><p><strong>解决方法</strong>：三级缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一级缓存  存储单例Bean成品，实例化与初始化完成</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二级缓存  缓存半成品对象且被引用</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//三级缓存  缓存半成品对象且未被引用，</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt=" "></p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>半成品，进行<strong>属性注入、Aware接口方法、Bean后处理器的before（）、InitializingBean接口的初始化方法、自定义的初始化方法init（），Bean后处理器的aftrer（）等</strong></p><table><thead><tr><th>方法</th><th>优先级</th></tr></thead><tbody><tr><td>bean标签中 init -method （或@Bean中的init-method属性）</td><td>3</td></tr><tr><td>@PreConstruct注解</td><td>1</td></tr><tr><td>InitializingBean接口重写afterPropertiesSet（）</td><td>2</td></tr></tbody></table><h3 id="4-销毁"><a href="#4-销毁" class="headerlink" title="4.销毁"></a>4.销毁</h3><table><thead><tr><th>方法</th><th>优先级</th></tr></thead><tbody><tr><td>bean标签中的（或@Bean中的destroy-method）</td><td>3</td></tr><tr><td>@PreDestory</td><td>1</td></tr><tr><td>实现DesposableBean接口，重写destroy（）</td><td>2</td></tr></tbody></table><h1 id="三、BeanFactoryPostProcessor（需要注入容器）"><a href="#三、BeanFactoryPostProcessor（需要注入容器）" class="headerlink" title="三、BeanFactoryPostProcessor（需要注入容器）"></a>三、BeanFactoryPostProcessor（需要注入容器）</h1><table><thead><tr><th>常见的bean工厂后处理器</th><th>区别</th><th>继承关系</th><th>作用</th><th>执行顺序</th></tr></thead><tbody><tr><td>BeanFactoryPostProcessor（接口）</td><td>不带注册功能</td><td>顶级接口</td><td>补充beanDefinition</td><td>2</td></tr><tr><td>BeanDefinitionRegistryPostProcessor（接口）</td><td>带注册功能</td><td>继承BeanFactoryPostProcessor（次顶级接口）</td><td>添加beanDefinition</td><td>1（带注册的方法、然后执行不带注册的方法）</td></tr></tbody></table><h2 id="1-两者源码"><a href="#1-两者源码" class="headerlink" title="1.两者源码"></a>1.两者源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//===========================</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Comment</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanDefinitionRegistryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lifeCycleBean"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"BeanDefinitionRegistryPostProcessor-->bean工厂后置处理器>>>>>>> bean定义之后，实例化之前执行,对bean做一些改变"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lifeCycleBean"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"BeanDefinitionRegistryPostProcessor-->bean工厂后置处理器>>>>>>> bean定义之后，实例化之前执行，注册更多的bean到容器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-常见的工厂后处理器"><a href="#2-常见的工厂后处理器" class="headerlink" title="2.常见的工厂后处理器"></a>2.常见的工厂后处理器</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR创建 <span class="token arrow operator">--></span> 依赖注入依赖注入 <span class="token arrow operator">--></span> 初始化初始化 <span class="token arrow operator">--></span> 可用可用 <span class="token arrow operator">--></span> 销毁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ConfigurationClassPostProcessor 可以解析<ul><li>@ComponentScan</li><li>@Bean</li><li>@Import</li><li>@ImportResource</li></ul></li><li>MapperScannerConfigurer 可以解析<ul><li>Mapper 接口</li></ul></li></ul><h1 id="四、BeanPostProcessor（需要注入容器）"><a href="#四、BeanPostProcessor（需要注入容器）" class="headerlink" title="四、BeanPostProcessor（需要注入容器）"></a>四、BeanPostProcessor（需要注入容器）</h1><h2 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先执行，在bean实例化后，属性注入前</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后执行，在bean初始化后</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-常见的Bean后处理器"><a href="#2-常见的Bean后处理器" class="headerlink" title="2.常见的Bean后处理器"></a>2.常见的Bean后处理器</h2><p>* </p><ul><li>AutowiredAnnotationBeanPostProcessor     解析 @Autowired 与 @Value</li><li>CommonAnnotationBeanPostProcessor         解析 @Resource、@PostConstruct、@PreDestroy</li><li>ConfigurationPropertiesBindingPostProcessor     解析 @ConfigurationProperties</li></ul><h1 id="五、Aware接口"><a href="#五、Aware接口" class="headerlink" title="五、Aware接口"></a>五、Aware接口</h1><table><thead><tr><th>常见的Aware接口</th><th>作用</th></tr></thead><tbody><tr><td>BeanNameAware</td><td>注入Bean名</td></tr><tr><td>BeanFactoryAware</td><td>注入BeanFactory容器</td></tr><tr><td>ApplicationContextAware</td><td>注入ApplicationContext容器</td></tr><tr><td>EmbeddedValueResolverAware</td><td>注入${}解析器</td></tr></tbody></table><h1 id="六、注解"><a href="#六、注解" class="headerlink" title="六、注解"></a>六、注解</h1><h2 id="Comment"><a href="#Comment" class="headerlink" title="@Comment"></a>@Comment</h2><table><thead><tr><th>注解</th><th>作用域</th><th></th></tr></thead><tbody><tr><td>@Comment</td><td></td><td></td></tr><tr><td><strong>衍生注解</strong></td><td></td><td></td></tr><tr><td>@Service</td><td>Service</td><td></td></tr><tr><td>@Mapper</td><td>Dao</td><td></td></tr><tr><td>@Controller</td><td>Controller</td><td></td></tr></tbody></table><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--注解需配合配置使用--</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poke<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 或者@CommentScan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h2><h3 id="CommpentScan"><a href="#CommpentScan" class="headerlink" title="@CommpentScan"></a>@CommpentScan</h3><p>ConfigurationClassPostProcessor：继承BeanDefinitionRegistryPostProcessor</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>作用：声明Bean作用范围</p><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h2><p>作用：是否延迟加载</p><p>参数：true 延时加载</p><p>​           false 立即加载</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>作用：声明初始化方法</p><h2 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h2><p>作用：声明销毁方法</p><h2 id="依赖注入注解"><a href="#依赖注入注解" class="headerlink" title="依赖注入注解"></a>依赖注入注解</h2><table><thead><tr><th>注解</th><th>作用</th><th></th><th>写在哪里</th><th></th><th></th></tr></thead><tbody><tr><td>@Value</td><td>注入普通数据</td><td></td><td>属性、方法、参数</td><td>在给静态变量注入会失败，需要在set（）上写才会成功</td><td>@Value（”${jdbc.driver}”）</td></tr><tr><td>@Autowired</td><td>类型-名称（添加@Qualifier）-报错</td><td>spring</td><td>属性和方法、参数</td><td></td><td></td></tr><tr><td>@Qualifier</td><td>指定名称</td><td></td><td></td><td></td><td></td></tr><tr><td>@Resource</td><td>名称-类型 -报错</td><td>JDK</td><td></td><td></td><td></td></tr></tbody></table><h2 id="Bean（类需要注入）"><a href="#Bean（类需要注入）" class="headerlink" title="@Bean（类需要注入）"></a>@Bean（类需要注入）</h2><p>使用：方法上</p><p>作用：获取工厂Bean（非自定义的Bean）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>作用：配置类</p><p>一般配合：@CommentScan 配合使用（完全注解开发），ApplicationContext需要使用类：AnnotationConfigApplicationContext</p><table><thead><tr><th>区别</th><th>@Comment</th><th>@Configuration</th></tr></thead><tbody><tr><td>是否单例</td><td>不是</td><td>通过动态代理来代理@Bean方法的调用的，因此调用该方法返回的都是同一个实例</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="PropertySource（“位置”）"><a href="#PropertySource（“位置”）" class="headerlink" title="@PropertySource（“位置”）"></a>@PropertySource（“位置”）</h2><p>作用：加载配置文件 </p><p>使用：类上</p><h2 id="Import（A-class）"><a href="#Import（A-class）" class="headerlink" title="@Import（A.class）"></a>@Import（A.class）</h2><p>作用：导入某个Class         加入BeanDefinition</p><h2 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h2><h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p>作用：多个同类型的Bean使用时，提高使用的优先级</p><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><p>作用：标识Bean所的环境，在此环境下才会使用</p><p>使用：类、方法</p><h1 id="七、AOP切面"><a href="#七、AOP切面" class="headerlink" title="七、AOP切面"></a>七、AOP切面</h1><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><table><thead><tr><th>概念</th><th>单词</th><th>解释</th><th>简述</th><th>注解</th></tr></thead><tbody><tr><td>目标对象</td><td>Target</td><td>要增强的对象</td><td>对象A</td><td></td></tr><tr><td>代理对象</td><td>Proxy</td><td>被增强的对象</td><td>生成的代理对象B</td><td></td></tr><tr><td>连接点</td><td>JoinPoint</td><td>可以被增强方法</td><td>对象A的所有可被增强方法</td><td></td></tr><tr><td>切入点</td><td>PointCut</td><td>实际被增强的方法</td><td>对象A的要增强的方法</td><td>@Pointcut:标识切入点</td></tr><tr><td>通知（增强）</td><td>Adive</td><td>增强方法</td><td>增强部分的代码逻辑</td><td>五个通知类型</td></tr><tr><td>*切面</td><td>Aspect</td><td>增强与切入点的组合</td><td>对象B的增强方法</td><td>@Aspect标识切面，同时也要注入容器（@Comment）</td></tr><tr><td>织入</td><td>Weaving</td><td>通知与切入点组合的过程</td><td>过程，即代理生成过程</td><td></td></tr></tbody></table><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>必须开启aop控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>名称</th><th>方式</th><th>执行实际</th></tr></thead><tbody><tr><td>前置通知</td><td>before</td><td>方法之前执行</td></tr><tr><td>后置通知</td><td>after-returning</td><td>方法之后执行，有异常不执行</td></tr><tr><td>环绕通知</td><td>around</td><td>方法前后执行，方法异常，后方法不执行</td></tr><tr><td>异常通知</td><td>after-throwing</td><td>有异常执行</td></tr><tr><td>最终通知</td><td>after</td><td>方法之后执行</td></tr></tbody></table><h2 id="顶级接口：AopProxy"><a href="#顶级接口：AopProxy" class="headerlink" title="顶级接口：AopProxy"></a>顶级接口：AopProxy</h2><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><table><thead><tr><th>代理</th><th>底层</th><th>使用条件</th><th>生成的代理对象</th></tr></thead><tbody><tr><td>JdkDynamicAopProxy</td><td>jdk代理</td><td>目标有接口</td><td>接口的实现类，与被代理对象平级</td></tr><tr><td>CglibAopProxy</td><td>CGlib代理</td><td>目标无接口且未用final修饰</td><td>子类，与被代理对象是继承的关系</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式1</span> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* poke.Service.impl.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//可以抽取到一个方法上</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* poke.Service.impl.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"Myadvice.method()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP底层实现"><a href="#AOP底层实现" class="headerlink" title="AOP底层实现"></a>AOP底层实现</h2><h3 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h3><p>JDK代理： 为实现接口，代理与被代理对象可以视为平级关系。</p><p>CGLib代理：为继承接口，代理与被代理对象视为继承关系。</p><h4 id="1-1-jdk代理"><a href="#1-1-jdk代理" class="headerlink" title="1.1 jdk代理"></a><strong>1.1 jdk代理</strong></h4><h5 id="1-1-1-jdk代理的简单实现"><a href="#1-1-1-jdk代理的简单实现" class="headerlink" title="1.1.1 jdk代理的简单实现"></a>1.1.1 jdk代理的简单实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">interface</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Foo</span> o <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">JdkProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//                new InvocationHandler(参数...) 的Lambda表达式写法</span>                 <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> o1 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> o1<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-1-2-JDK代理在spring中的模拟实现"><a href="#1-1-2-JDK代理在spring中的模拟实现" class="headerlink" title="1.1.2 JDK代理在spring中的模拟实现"></a><strong>1.1.2 JDK代理在spring中的模拟实现</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接口，被代理对象</span>    <span class="token keyword">interface</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//被代理对象</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token keyword">implements</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行mmmm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行ssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//接口，确定调用的方法</span>    <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argss<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        $<span class="token class-name">Proxy0</span> proxy0 <span class="token operator">=</span> <span class="token keyword">new</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-></span>  <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//反射</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy0<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy0<span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//模拟：代理对象        有点像装饰器模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Method</span> m<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Method</span> s<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             m <span class="token operator">=</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s <span class="token operator">=</span> <span class="token class-name">Main<span class="token punctuation">.</span>Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-CGLib代理"><a href="#1-2-CGLib代理" class="headerlink" title="1.2 CGLib代理"></a>1.2 CGLib代理</h4><h2 id="代理创建时机"><a href="#代理创建时机" class="headerlink" title="代理创建时机"></a>代理创建时机</h2><ol><li>代理的创建时机<ul><li>初始化之后 (无循环依赖时)</li><li>实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存</li></ul></li><li>依赖注入与初始化不应该被增强, 仍应被施加于原始对象</li></ol><h1 id="八、事务"><a href="#八、事务" class="headerlink" title="八、事务"></a>八、事务</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>事务传播行为用来描述由某<strong>一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播</strong>。</p><h2 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2.事务传播行为"></a>2.事务传播行为</h2><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>Required</td><td>如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。</td></tr><tr><td>Requied_new</td><td>重新创建一个新的事务，如果当前存在事务，延缓当前的事务。</td></tr><tr><td>supports</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</td></tr><tr><td>no_supported</td><td>以非事务的方式运行，如果当前存在事务，暂停当前的事务。</td></tr><tr><td>mandatory</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</td></tr><tr><td>Never</td><td>以非事务的方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>Nested</td><td>如果没有，就新建一个事务；如果有，就在当前事务中嵌套其他事务。</td></tr></tbody></table><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><h2 id="3-注解声明事务"><a href="#3-注解声明事务" class="headerlink" title="3.注解声明事务"></a>3.注解声明事务</h2><h3 id="EnableTransactionManagement：开始声明式事务"><a href="#EnableTransactionManagement：开始声明式事务" class="headerlink" title="@EnableTransactionManagement：开始声明式事务"></a>@EnableTransactionManagement：开始声明式事务</h3><h3 id="Transactional-开启事务控制"><a href="#Transactional-开启事务控制" class="headerlink" title="@Transactional: 开启事务控制"></a>@Transactional: 开启事务控制</h3><p>声明在方法上时，代表这个类的所有公共非静态方法都将启用事务。</p><table><thead><tr><th>参数</th><th>作用</th><th></th></tr></thead><tbody><tr><td>propagation</td><td>传播行为</td><td></td></tr><tr><td>ioslation</td><td>隔离级别</td><td></td></tr><tr><td>timeout</td><td>超时时间：指定超时时间，不提交则回滚</td><td></td></tr><tr><td>readOnly</td><td>只读</td><td></td></tr><tr><td>rollbackFor</td><td>出现异常回滚</td><td></td></tr><tr><td>notRollbackFor</td><td>出现异常不回滚</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高级</title>
      <link href="/blog/2023/03/25/mysql-shi-tu-cun-chu-guo-cheng-hong-fa-qi-yu-suo/"/>
      <url>/blog/2023/03/25/mysql-shi-tu-cun-chu-guo-cheng-hong-fa-qi-yu-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL视图-x2F-存储过程-x2F-触发器、InnoB引擎"><a href="#MYSQL视图-x2F-存储过程-x2F-触发器、InnoB引擎" class="headerlink" title="MYSQL视图&#x2F;存储过程&#x2F;触发器、InnoB引擎"></a>MYSQL视图&#x2F;存储过程&#x2F;触发器、InnoB引擎</h1><h1 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h1><p>视图（View）是一种虚拟存在的表。</p><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建或替换</span><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称（列名列表） <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询创建视图语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token comment">#查询视图数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 视图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建或替换     [WITH [CASCADED | LOCAL] CHECK OPTION]  用于检查插入的数据是否符合视图条件,不写任何插入均可插入</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">VIEW</span> 视图名称（列名列表） <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span class="token comment">#修改</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span>  <span class="token keyword">VIEW</span> 视图名称（列名列表） <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DROP VIEW [IF EXISTS] 视图名称 [,视图名称] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-检查选项（CASCADED-LOCAL）"><a href="#5-检查选项（CASCADED-LOCAL）" class="headerlink" title="5.检查选项（CASCADED|LOCAL）"></a>5.检查选项（CASCADED|LOCAL）</h2><h3 id="1-CASCADED-–级联"><a href="#1-CASCADED-–级联" class="headerlink" title="1.CASCADED –级联"></a>1.CASCADED –级联</h3><p>比如，<strong>v2视图是基于v1视图的</strong>，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图 创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">#视图1CREATE VIEW V1 AS SELECT * FROM STUDENT WHERE ID &gt;20 #视图2基于视图1创建CREATE VIEW V2 AS SELECT * FROM V1 WHERE ID &gt;10 WITH CASCADED CHECK OPTION插入数据id&#x3D; 15，无法插入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-LOCAL–本地"><a href="#2-LOCAL–本地" class="headerlink" title="2.LOCAL–本地"></a>2.LOCAL–本地</h3><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创 建时未指定检查选项。 则在执行检查时，知会检查v2，不会检查v2的关联视图v1</p><h2 id="6-视图更新"><a href="#6-视图更新" class="headerlink" title="6.视图更新"></a>6.视图更新</h2><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一 项，则该视图不可更新：</p><p> A. 聚合函数或窗口函数（SUM()、 MIN()、 MAX()、 COUNT()等） </p><p>B. DISTINCT </p><p>C. GROUP BY </p><p>D. HAVING </p><p>E. UNION 或者 UNION ALL</p><h1 id="二、存储过程"><a href="#二、存储过程" class="headerlink" title="二、存储过程"></a>二、存储过程</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><strong>存储过程是事先经过编译并存储在数据库中的一段 SQL 语句的集合</strong>，调用存储过程可以简化应用开发 人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。 存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h2><ol><li><p>封装，复用 ———————–&gt; 可以把某一业务SQL封装在存储过程中，需要用到 的时候直接调用即可。</p></li><li><p>可以接收参数，也可以返回数据 ——–&gt; 在存储过程中，可以传递参数，也可以接收返回 值。</p></li><li><p>减少网络交互，效率提升 ————-&gt; 如果涉及到多条SQL，每执行一次都是一次网络传 输。 而如果封装在存储过程中，我们只需要网络交互一次可能就可以了。</p></li></ol><h2 id="3-语法-procedure-破c这"><a href="#3-语法-procedure-破c这" class="headerlink" title="3.语法(procedure 破c这)"></a>3.语法(procedure 破c这)</h2><h3 id="1-创建-1"><a href="#1-创建-1" class="headerlink" title="1.创建"></a>1.创建</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE PROCEDURE 存储过程（参数列表）BEGIN   -- SQL语句END#在命令行中，执行创建存储过程的SQL时，需要通过关键字 delimiter 指定SQL语句的结束符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CALL</span> 名称（参数列表）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看"><a href="#3-查看" class="headerlink" title="3.查看"></a>3.查看</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">-- 查询指定数据库的存储过程及状态信息SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA &#x3D; &#39;数据库名&#39;; -- 查询某个存储过程的定义SHOW CREATE PROCEDURE 存储过程名称 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除-1"><a href="#4-删除-1" class="headerlink" title="4.删除"></a>4.删除</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> 存储过程名称 ；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h2><p>在MySQL中变量分为三种类型: <strong>系统变量、用户定义变量、局部变量</strong>。</p><h3 id="4-1系统变量"><a href="#4-1系统变量" class="headerlink" title="4.1系统变量"></a>4.1系统变量</h3><p><strong>mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 &#x2F;etc&#x2F;my.cnf 中配置</strong></p><p>1.查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> VARIABLES <span class="token punctuation">;</span> <span class="token comment">-- 查看所有系统变量</span><span class="token keyword">SHOW</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'......'</span><span class="token punctuation">;</span> <span class="token comment">-- 可以通过LIKE模糊匹配方式查找变量</span><span class="token keyword">SELECT</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> 系统变量名<span class="token punctuation">;</span> <span class="token comment">-- 查看指定变量的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.设置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> 系统变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span><span class="token keyword">SET</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> 系统变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2用户定义变量"><a href="#4-2用户定义变量" class="headerlink" title="4.2用户定义变量"></a>4.2用户定义变量</h3><p>用户定义变量 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 “@变量 名” 使用就可以。其作用域为当前连接（session）。</p><h4 id="4-2-1赋值"><a href="#4-2-1赋值" class="headerlink" title="4.2.1赋值"></a>4.2.1赋值</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span class="token comment">#查询表数据并赋值</span><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> <span class="token variable">@var_name</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2使用"><a href="#4-2-2使用" class="headerlink" title="4.2.2使用"></a>4.2.2使用</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token variable">@var_name</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意: 用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。</strong></p><h3 id="4-3局部变量"><a href="#4-3局部变量" class="headerlink" title="4.3局部变量"></a>4.3局部变量</h3><p>局部变量 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。<strong>可用作存储过程内的 局部变量和输入参数</strong>，局部变量的<strong>范围是在其内声明的BEGIN … END块。</strong></p><h4 id="1-声明"><a href="#1-声明" class="headerlink" title="1.声明"></a>1.声明</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> 变量名 变量类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token comment">#变量类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-赋值"><a href="#2-赋值" class="headerlink" title="2.赋值"></a>2.赋值</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> 变量名 <span class="token operator">=</span> 值；<span class="token keyword">SET</span> 变量名 ：<span class="token operator">=</span> 值；<span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> 变量名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-if"><a href="#4-4-if" class="headerlink" title="4.4 if"></a>4.4 if</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> 条件<span class="token number">1</span> <span class="token keyword">THEN</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ELSEIF</span> 条件<span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token comment">-- 可选</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ELSE</span> <span class="token comment">-- 可选</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5参数"><a href="#4-5参数" class="headerlink" title="4.5参数"></a>4.5参数</h3><h4 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h4><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><h3 id="4-6-case"><a href="#4-6-case" class="headerlink" title="4.6 case"></a>4.6 case</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 含义： 当case_value的值为 when_value1时，执行statement_list1，当值为 when_value2时，执行statement_list2， 否则就执行 statement_list</span><span class="token keyword">CASE</span> case_value<span class="token keyword">WHEN</span> when_value1 <span class="token keyword">THEN</span> statement_list1<span class="token punctuation">[</span> <span class="token keyword">WHEN</span> when_value2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span> <span class="token keyword">ELSE</span> statement_list <span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span class="token comment">-- 含义： 当条件search_condition1成立时，执行statement_list1，当条件search_condition2成立时，执行statement_list2， 否则就执行 statement_list</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> search_condition1 <span class="token keyword">THEN</span> statement_list1<span class="token punctuation">[</span><span class="token keyword">WHEN</span> search_condition2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-while循环（判断，符合执行）"><a href="#4-7-while循环（判断，符合执行）" class="headerlink" title="4.7 while循环（判断，符合执行）"></a>4.7 while循环（判断，符合执行）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span><span class="token keyword">WHILE</span> 条件 <span class="token keyword">DO</span><span class="token comment">-- SQL逻辑...</span><span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-repeat循环（执行判断。符合退出）"><a href="#4-8-repeat循环（执行判断。符合退出）" class="headerlink" title="4.8 repeat循环（执行判断。符合退出）"></a>4.8 repeat循环（执行判断。符合退出）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span><span class="token keyword">REPEAT</span><span class="token comment">-- SQL逻辑...</span>UNTIL 条件<span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-loop循环（配合if-，LEAVE）"><a href="#4-9-loop循环（配合if-，LEAVE）" class="headerlink" title="4.9 loop循环（配合if ，LEAVE）"></a>4.9 loop循环（配合if ，LEAVE）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#[label:] 名称</span>label: <span class="token keyword">LOOP</span>statement_list<span class="token keyword">IF</span> exit_condition <span class="token keyword">THEN</span><span class="token keyword">LEAVE</span> label<span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">LOOP</span> label<span class="token punctuation">;</span><span class="token comment">#配合循环使用，退出循环。</span><span class="token keyword">LEAVE</span> label<span class="token punctuation">;</span> <span class="token comment">-- 退出指定标记的循环体</span><span class="token comment">#必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</span><span class="token keyword">ITERATE</span> label<span class="token punctuation">;</span> <span class="token comment">-- 直接进入下一次循环 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-游标"><a href="#4-10-游标" class="headerlink" title="4.10 游标"></a>4.10 游标</h3><p>游标（CURSOR）是<strong>用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进 行循环的处理</strong></p><h4 id="1-创建-2"><a href="#1-创建-2" class="headerlink" title="1.创建"></a>1.创建</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"># 声明游标DECLARE 名称 CURSOR FOR 查询语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-打开"><a href="#2-打开" class="headerlink" title="2.打开"></a>2.打开</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">OPEN</span> 游标名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-获取游标记录"><a href="#3-获取游标记录" class="headerlink" title="3.获取游标记录"></a>3.获取游标记录</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">FETCH</span> 游标名称 <span class="token keyword">INTO</span> 变量 <span class="token punctuation">[</span><span class="token punctuation">,</span> 变量 <span class="token punctuation">]</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-关闭游标"><a href="#4-关闭游标" class="headerlink" title="4.关闭游标"></a>4.关闭游标</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CLOSE</span> 游标名称 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建</span><span class="token keyword">declare</span> u_cursor <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> name<span class="token punctuation">,</span>profession <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> age <span class="token operator">&lt;=</span>uage<span class="token punctuation">;</span><span class="token comment">#遇到游标问题的处理</span><span class="token keyword">declare</span> <span class="token keyword">exit</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> SQLSTATE <span class="token string">'02000'</span> <span class="token keyword">close</span> u_cursor<span class="token punctuation">;</span><span class="token comment">#打开</span><span class="token keyword">open</span> u_cursor<span class="token punctuation">;</span><span class="token comment">#创建</span><span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token keyword">do</span><span class="token keyword">fetch</span> u_cursor <span class="token keyword">into</span> uname<span class="token punctuation">,</span>upro<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user_pro <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> upro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token comment">#关闭</span><span class="token keyword">close</span> u_cursor<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、存储函数"><a href="#三、存储函数" class="headerlink" title="三、存储函数"></a>三、存储函数</h1><h2 id="1-创建-3"><a href="#1-创建-3" class="headerlink" title="1.创建"></a>1.创建</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 存储函数名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数列表 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">BEGIN</span><span class="token comment">-- SQL语句</span><span class="token keyword">RETURN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token punctuation">;</span><span class="token comment">#characteristic说明</span><span class="token comment">#DETERMINISTIC：相同的输入参数总是产生相同的结果</span><span class="token comment"># NO SQL ：不包含 SQL 语句。</span><span class="token comment">#READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h1><h2 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>触发器是与表有关的数据库对象，指在insert&#x2F;update&#x2F;delete之前(BEFORE)或之后(AFTER)，触 发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><table><thead><tr><th>类型</th><th>NEW 与 OLD</th></tr></thead><tbody><tr><td>INSERT 触发器</td><td>new 表示将要或已经增加的数据</td></tr><tr><td>UPDATE 触发器</td><td>old表示修改前的数据，new表示将要或已经修改的数据</td></tr><tr><td>DELETE 触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 触发器名称BEFORE<span class="token operator">/</span><span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token operator">/</span><span class="token keyword">UPDATE</span><span class="token operator">/</span><span class="token keyword">DELETE</span>  <span class="token comment">#触发时机 之前，之后，增删改</span><span class="token keyword">ON</span> 监控的表名 <span class="token keyword">FOR EACH ROW</span> <span class="token comment">-- 行级触发器</span><span class="token keyword">BEGIN</span>trigger_stmt <span class="token punctuation">;</span>           <span class="token comment">#触发器的逻辑实现</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-查看-1"><a href="#3-查看-1" class="headerlink" title="3.查看"></a>3.查看</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> TRIGGERS <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="五、锁"><a href="#五、锁" class="headerlink" title="五、锁"></a>五、锁</h1><table><thead><tr><th>锁类型</th><th>作用</th></tr></thead><tbody><tr><td>全局锁</td><td>锁定数据库整表</td></tr><tr><td>表级锁</td><td>每次操作锁住整张表</td></tr><tr><td>行级锁</td><td>每一次操作锁住对应数据</td></tr></tbody></table><h2 id="MySQL并发事务访问相同记录的情况"><a href="#MySQL并发事务访问相同记录的情况" class="headerlink" title="MySQL并发事务访问相同记录的情况"></a>MySQL并发事务访问相同记录的情况</h2><h3 id="1-1读-读情况"><a href="#1-1读-读情况" class="headerlink" title="1.1读-读情况"></a>1.1读-读情况</h3><p>读读情况（多个事务同时访问一条数据），不会对记录产生影响。<strong>允许发生</strong></p><h3 id="1-2写写情况"><a href="#1-2写写情况" class="headerlink" title="1.2写写情况"></a>1.2写写情况</h3><p>写写情况（多个事务同时修改一条记录），会发生<code>脏写</code>情况，不允许发生。多个未提交事务对同一数据修改时，<strong>排队执行</strong>，通过<strong>锁实现</strong>。<strong>锁其实是一种内存中的结构</strong></p><p><strong>当一个事务A向进行数据改动时，首先查看该数据是否有锁结构，若没有，则生成一个锁结构。此时若有其他事务B修改该数据，发现该数据有锁结构，事务B会获取锁失败，进入阻塞状态，直到A事务提交，B事务才会获得锁。</strong></p><h3 id="1-3读写、写读情况"><a href="#1-3读写、写读情况" class="headerlink" title="1.3读写、写读情况"></a>1.3读写、写读情况</h3><p>可能出现**<code>脏读、幻读、不可重复读</code>**的情况，MySQL在可重复读的情况下，解决了幻读问题。</p><h3 id="1-4问题的解决方案"><a href="#1-4问题的解决方案" class="headerlink" title="1.4问题的解决方案"></a>1.4问题的解决方案</h3><h4 id="方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁"><a href="#方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁" class="headerlink" title="方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁"></a>方案一：读操作利用多版本并发控制（<code>MVCC</code>），写操作进行<code>加锁</code></h4><p>MVCC：就是生成一个<code>ReadView</code>，通过ReadView找到符合条件的记录版本（历史版本由<code>undo日志</code>构建）。查询语句只能<code>读</code>到在生成ReadView之前<code>已提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，<code>读-写</code>操作并不冲突。</p><blockquote><p>普通的SELECT语句在<strong>READ COMMITTED和REPEATABLE READ</strong>隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code>隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code>，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code>隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作 </code>才会生成一个ReadView，之后的SELECT操作都<code>复用</code>这ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><h4 id="方案二：读、写操作都采用加锁的方式。"><a href="#方案二：读、写操作都采用加锁的方式。" class="headerlink" title="方案二：读、写操作都采用加锁的方式。"></a>方案二：读、写操作都采用<code>加锁</code>的方式。</h4><p>小结对比发现：</p><ul><li>采用<code>MVCC</code>方式的话，<code>读-写</code>操作彼此并不冲突，<code>性能更高</code>。</li><li>采用<code>加锁</code>方式的话，<code>读-写</code>操作彼此需要<code>排队执行</code>，影响性能。</li></ul><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/image-20230408153835088.png"></p><h2 id="1-全局锁"><a href="#1-全局锁" class="headerlink" title="1.全局锁"></a>1.全局锁</h2><p>全局锁就是对整个数据库实例加锁，<strong>加锁后整个实例就处于只读状态</strong></p><h3 id="1-使用场景："><a href="#1-使用场景：" class="headerlink" title="1.使用场景："></a>1.使用场景：</h3><p>典型的使用场景是做<strong>全库的逻辑备份</strong>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性。</p><p>eg：订单表和库存表有关联，但是不使用全局锁可能数据不一致</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><h4 id="1-添加锁"><a href="#1-添加锁" class="headerlink" title="1.添加锁"></a>1.添加锁</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span> <span class="token punctuation">;</span><span class="token comment">#数据备份</span>mysqldump <span class="token operator">-</span>uroot –p1234 备份数据库 <span class="token operator">></span> 存储的<span class="token keyword">sql</span>文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-释放锁"><a href="#2-释放锁" class="headerlink" title="2.释放锁"></a>2.释放锁</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-表级锁"><a href="#2-表级锁" class="headerlink" title="2.表级锁"></a>2.表级锁</h2><h3 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>每次操作锁住整张表。锁定粒度大<strong>，发生锁冲突的概率最高，并发度最低</strong>。应用在MyISAM、 InnoDB、BDB等存储引擎中。</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><table><thead><tr><th>表锁</th></tr></thead><tbody><tr><td>元数据锁</td></tr><tr><td>意向锁</td></tr></tbody></table><h4 id="2-1表锁"><a href="#2-1表锁" class="headerlink" title="2.1表锁"></a>2.1表锁</h4><p>分类： 读锁（read lock），写锁（write lock）</p><table><thead><tr><th>锁</th><th>区别</th></tr></thead><tbody><tr><td>读锁</td><td>多个用户均可读，但不可写</td></tr><tr><td>写锁</td><td>多个用户不可读，不可写</td></tr></tbody></table><p>加锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token operator">/</span> 客户端断开连接 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2元数据锁（MDL）"><a href="#2-2元数据锁（MDL）" class="headerlink" title="2.2元数据锁（MDL）"></a>2.2元数据锁（MDL）</h4><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是<strong>维护表元数据的数据一致性</strong>，在表上有活动事务的时候，不可以对元数据进行写入操作。为了<strong>避免DML与 DDL冲突，保证读写的正确性。</strong></p><table><thead><tr><th>元数据锁类型</th><th>添加时机</th><th></th></tr></thead><tbody><tr><td>元数据共享锁</td><td>DML（读锁）、DQL语句（SELECT、INSERT、UPDATE、DELETE）（写锁）</td><td>阻塞元数据排他锁</td></tr><tr><td>元数据排他锁</td><td>DDL语句（修改表结构）</td><td>阻塞元数据共享锁</td></tr></tbody></table><p>在MySQL5.5中引入了MDL，当<strong>对一张表进行增删改查的时候，加MDL读锁(共享)<strong>；当</strong>对表结构进行变更操作的时候，加MDL写锁(排他)。</strong></p><table><thead><tr><th>sql语句</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY （只读）&#x2F; SHARED_NO_READ_WRITE（写锁）</td><td></td></tr><tr><td>select 、select … lock in share mode</td><td>SHARED_READ（读锁）</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert 、update、 delete、select … for update</td><td>SHARED_WRITE（写锁）</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE（写锁：排他）</td><td>与其他的MDL都互斥</td></tr></tbody></table><h4 id="2-3意向锁"><a href="#2-3意向锁" class="headerlink" title="2.3意向锁"></a>2.3意向锁</h4><p><strong>执行DML时，会对涉及的行加锁，然后对表加上意向锁</strong>，其他客户端想要加锁时，需要判断意向锁的状态</p><table><thead><tr><th>意向锁</th><th>添加时机</th><th>意向锁不会互斥</th></tr></thead><tbody><tr><td>意向共享锁(IS)</td><td>select … lock in share mode</td><td>兼容表锁共享锁（read），互斥表锁排他锁（write）</td></tr><tr><td>意向排他锁(IX)</td><td>DML，select…for update</td><td>互斥表锁共享锁（read）与排他锁（write）</td></tr></tbody></table><h2 id="4-行级锁"><a href="#4-行级锁" class="headerlink" title="4.行级锁"></a>4.行级锁</h2><p><strong>每次操作锁住对应的行数据</strong>。<strong>锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在 InnoDB存储引擎中。</strong></p><p>InnoDB的数据是基于索引组织的，<strong>行锁是通过对索引上的索引项加锁来实现的</strong>，而不是对记录加的锁。</p><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h3><table><thead><tr><th>锁</th><th></th><th>RC（读已提交），RR（可重复读）</th><th>默认启用</th></tr></thead><tbody><tr><td>行锁（Record Lock）</td><td>锁定单个行记录的锁，防止其他事务对此行进行update和delete</td><td>RC、RR隔离级别下都支持。</td><td></td></tr><tr><td>间隙锁（GAP）</td><td>锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事 务在这个间隙进行insert，产生幻读</td><td>在RR隔离级别下都支持。</td><td></td></tr><tr><td>临键锁(NEXT-KEY)</td><td>行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。</td><td>在RR隔离级别下支持。</td><td>RR</td></tr></tbody></table><h3 id="1-1行锁（RC-RR）"><a href="#1-1行锁（RC-RR）" class="headerlink" title="1.1行锁（RC,RR）"></a>1.1行锁（RC,RR）</h3><h4 id="1-类型即使用情况"><a href="#1-类型即使用情况" class="headerlink" title="1.类型即使用情况"></a>1.类型即使用情况</h4><table><thead><tr><th>锁类型</th><th></th><th></th></tr></thead><tbody><tr><td>共享锁（S）</td><td>允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</td><td></td></tr><tr><td>排他锁（X）</td><td>允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他 锁。</td><td></td></tr></tbody></table><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT</td><td>不加锁</td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁S</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><h4 id="2-何时开启行锁"><a href="#2-何时开启行锁" class="headerlink" title="2.何时开启行锁"></a>2.何时开启行锁</h4><p>默认情况下，InnoDB在 REPEATABLE READ（可重复读）事务隔离级别运行，InnoDB<strong>使用 next-key （临键锁）锁进行搜索和索引扫描。</strong></p><p><strong>1.针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</strong></p><p><strong>2.InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时 就会升级为表锁。</strong></p><h3 id="1-2-间隙锁与临键锁"><a href="#1-2-间隙锁与临键锁" class="headerlink" title="1.2 间隙锁与临键锁"></a>1.2 间隙锁与临键锁</h3><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜 索和索引扫描，以<strong>防止幻读</strong>。 </p><ol><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。 </li><li>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。 </li><li>索引上的范围查询(唯一索引)–会访问到不满足条件的第一个值为止。</li></ol><p><strong>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会 阻止另一个事务在同一间隙上采用间隙锁。</strong></p><h1 id="六、InnoDB引擎"><a href="#六、InnoDB引擎" class="headerlink" title="六、InnoDB引擎"></a>六、InnoDB引擎</h1><h2 id="1-逻辑存储结构"><a href="#1-逻辑存储结构" class="headerlink" title="1.逻辑存储结构"></a>1.逻辑存储结构</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84mysql.png"></p><h3 id="1-表空间"><a href="#1-表空间" class="headerlink" title="1.表空间"></a>1.表空间</h3><p>表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在 8.0版本中默认开启) ，则每<strong>张表都会有一个表空间（xxx.ibd）</strong>，一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。</p><h3 id="2-段"><a href="#2-段" class="headerlink" title="2.段"></a>2.段</h3><table><thead><tr><th>段</th><th></th><th></th></tr></thead><tbody><tr><td>数据段</td><td>B+Tree的叶子节点</td><td></td></tr><tr><td>索引段</td><td>B+Tree的叶非子节点</td><td></td></tr><tr><td>回滚段</td><td></td><td></td></tr></tbody></table><p>管理区</p><h3 id="3-区"><a href="#3-区" class="headerlink" title="3.区"></a>3.区</h3><p>默认1M，一个页默认16K，所以一个区有64个连续的页</p><h3 id="4-页"><a href="#4-页" class="headerlink" title="4.页"></a>4.页</h3><p>是<strong>InnoDB 存储引擎磁盘管理的最小单元</strong>，每个页的大小默认为 16KB。</p><p>为了保证页的连续性， InnoDB 存储引擎每次从磁盘申请 4-5 个区。</p><h3 id="5-行"><a href="#5-行" class="headerlink" title="5.行"></a>5.行</h3><p>行，InnoDB 存储引擎数据是按行进行存放的</p><p>在行中，默认有两个隐藏字段：</p><ol><li><p>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</p></li><li><p>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个 隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p></li></ol><h2 id="2-架构"><a href="#2-架构" class="headerlink" title="2.架构"></a>2.架构</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/mysql%E6%9E%B6%E6%9E%84.png"></p><h3 id="1-内存结构"><a href="#1-内存结构" class="headerlink" title="1.内存结构"></a>1.内存结构</h3><h4 id="1-缓冲池（Buffer-Pool）"><a href="#1-缓冲池（Buffer-Pool）" class="headerlink" title="1.缓冲池（Buffer Pool）"></a>1.缓冲池（Buffer Pool）</h4><p>主内存中的一个区域，里面可以<strong>缓存磁盘上经常操作的真实数据</strong>，在执行增 删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频 率刷新到磁盘，从而<strong>减少磁盘IO</strong>，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型： </p><p>• free page：空闲page，未被使用。</p><p> • clean page：被使用page，数据没有被修改过。</p><p> • dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</p><h4 id="2-更改缓存区（Change-Buffer）-针对于非唯一二级索引页"><a href="#2-更改缓存区（Change-Buffer）-针对于非唯一二级索引页" class="headerlink" title="2.更改缓存区（Change Buffer）-针对于非唯一二级索引页"></a>2.更改缓存区（Change Buffer）-针对于非唯一二级索引页</h4><p>在执行DML语句时，如果这些数据Page 没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更 存在更改缓冲区 Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><h4 id="3-Adaptive-Hash-Index-自适应Hash"><a href="#3-Adaptive-Hash-Index-自适应Hash" class="headerlink" title="3.Adaptive Hash Index(自适应Hash)"></a>3.Adaptive Hash Index(自适应Hash)</h4><p>用于优化对Buffer Pool数据的查询</p><p>hash索引在进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需 要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。</p><p><strong>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</strong></p><h4 id="4-LogBuffer（日志缓存区）"><a href="#4-LogBuffer（日志缓存区）" class="headerlink" title="4.LogBuffer（日志缓存区）"></a>4.LogBuffer（日志缓存区）</h4><p>用来保存要写入到磁盘中的log日志数据（redo log 、undo log）， 默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事 务，增加日志缓冲区的大小可以节省磁盘 I&#x2F;O。</p><table><thead><tr><th>参数</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>innodb_log_buffer_size</td><td>缓冲区大小</td><td></td></tr><tr><td>innodb_flush_log_at_trx_commit</td><td>日志刷新到磁盘时机</td><td>1: 日志在每次事务提交时写入并刷新到磁盘，默认值。                                                                                       0: 每秒将日志写入并刷新到磁盘一次。                                                                                                                         2: 日志在每次事务提交后写入，并每秒刷新到磁盘一次。</td></tr></tbody></table><h3 id="2-磁盘结构"><a href="#2-磁盘结构" class="headerlink" title="2.磁盘结构"></a>2.磁盘结构</h3><h2 id="3-事务原理"><a href="#3-事务原理" class="headerlink" title="3.事务原理"></a>3.事务原理</h2><p>四大特性：ACID</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>redo_log,undo_log</td><td>原子性、一致性、持久性</td><td></td></tr><tr><td>锁、MVCC</td><td>隔离性</td><td></td></tr></tbody></table><h3 id="1-redo-log-重做日志-持久性"><a href="#1-redo-log-重做日志-持久性" class="headerlink" title="1. redo_log(重做日志) -持久性"></a>1. redo_log(重做日志) -持久性</h3><p>记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,</p><p>前者是在内存中，后者在磁盘中。</p><p>当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</p><h3 id="2-undo-log"><a href="#2-undo-log" class="headerlink" title="2.undo_log"></a>2.undo_log</h3><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制) 。</p><h2 id="4-MVCC"><a href="#4-MVCC" class="headerlink" title="4.MVCC"></a>4.MVCC</h2><table><thead><tr><th></th><th></th><th></th><th>备注</th></tr></thead><tbody><tr><td>当前读</td><td>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加 锁。</td><td>select … lock in share mode(共享锁)，select … for update、update、insert、delete</td><td>正常情况innodb为可重复读，无法读取到其他事务的提交数据，当使用这些语句时，变为当前读</td></tr><tr><td>快照读</td><td>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据， 不加锁，是非阻塞读。</td><td>简单的select</td><td>Read Committed：每次select，都生成一个快照读。            • Repeatable Read：开启事务后第一个select语句才是快照读的地方。            • Serializable：快照读会退化为当前读。</td></tr><tr><td>MVCC</td><td></td><td></td><td></td></tr></tbody></table><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>多版本并发控制。指维护一个数据的多个版本， 使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需 要依赖于数据库记录中的<strong>三个隐式字段、undo log日志、readView。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql进阶</title>
      <link href="/blog/2023/03/22/mysql-jin-jie/"/>
      <url>/blog/2023/03/22/mysql-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql进阶"><a href="#MySql进阶" class="headerlink" title="MySql进阶"></a>MySql进阶</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/Mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.png"></p><h1 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h1><ol><li><p>概念：</p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 <strong>。存储引擎是基于表的，而不是 基于库的，所以存储引擎也可被称为表类型。</strong></p></li><li><p>建表时设置存储引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释 <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 表注释 <span class="token punctuation">]</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>MySql默认引擎</p><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ol><li>DML支持事务，ACID</li><li>行级锁</li><li>支持外键约束</li></ol><h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2.文件"></a>2.文件</h3><table><thead><tr><th></th><th>存储</th><th></th></tr></thead><tbody><tr><td>xxx.ibd</td><td>表结构（<strong>frm</strong>（早期）、<strong>sdi</strong>（8.0））、索引、数据</td><td></td></tr></tbody></table><p>文件位置：F:\JAVA\MYSQL\mysql-8.0.28-winx64\Data</p><h3 id="3-逻辑存储结构"><a href="#3-逻辑存储结构" class="headerlink" title="3.逻辑存储结构"></a>3.逻辑存储结构</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84mysql.png"></p><p><strong>表空间</strong> : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以 包含多个Segment段。</p><p> <strong>段</strong> : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管 理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。 </p><p><strong>区</strong> : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为 16K， 即一个区中一共有64个连续的页。 </p><p><strong>页</strong> : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默 认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。 </p><p><strong>行</strong> : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时 所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>早期的mysql存储引擎</p><h3 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h3><ol><li>不支持事务</li><li>不支持外键</li><li>不支持表锁，行锁</li><li>访问快</li></ol><h3 id="2-文件-1"><a href="#2-文件-1" class="headerlink" title="2.文件"></a>2.文件</h3><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>xxx.sdi</td><td>存放表结构</td><td></td></tr><tr><td>xxx.MYD</td><td>存放数据</td><td></td></tr><tr><td>xxx.MYI</td><td>存放索引</td><td></td></tr></tbody></table><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>表数据存储在内存中，作为临时表或缓存使用</p><h3 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a>1.特点：</h3><ol><li>内存中存放</li><li>hash索引（默认）</li></ol><h3 id="2-文件-2"><a href="#2-文件-2" class="headerlink" title="2.文件"></a>2.文件</h3><p>xxx.sdi：存储表结构信息</p><h2 id="三者引擎区别"><a href="#三者引擎区别" class="headerlink" title="三者引擎区别"></a>三者引擎区别</h2><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td><strong>支持</strong></td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td><strong>行锁</strong>（适合高并发的操作）</td><td>表锁</td><td>表锁</td></tr><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高（缓存索引还要缓存真实数据）</td><td>低（缓存索引）</td><td>N&#x2F;A</td></tr><tr><td>性能</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><strong>支持</strong></td><td></td><td></td></tr></tbody></table><p><strong>InnoDB</strong>: 是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要 求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操 作，那么InnoDB存储引擎是比较合适的选择。</p><p> <strong>MyISAM</strong> ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完 整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。 </p><p><strong>MEMORY</strong>：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是 对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。（Redis替代）</p><h1 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>index（索引）是一种<strong>帮助MYSQL高效获取数据的数据结构（有序）</strong></p><p>无索引会进行全表扫描。</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h2><table><thead><tr><th align="left">优点</th><th>缺点</th></tr></thead><tbody><tr><td align="left">提高检索效率，降低数据库的IO成本</td><td>占用一定内存空间</td></tr><tr><td align="left">通过索引对数据排序，降低排序成本，降低CPU消耗</td><td>提高了查询效率，单降低了更新表的效率</td></tr></tbody></table><h2 id="3-常见索引结构"><a href="#3-常见索引结构" class="headerlink" title="3.常见索引结构"></a>3.常见索引结构</h2><table><thead><tr><th>索引</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>大部分引擎支持</td></tr><tr><td>Hash</td><td>底层哈希表，精确匹配效率高，不支持范围查询</td></tr><tr><td>R-Tree（空间索引）</td><td>MYISAM支持，主要用于地理空间数据类 型，通常使用较少</td></tr><tr><td>Full-test（全文索引）</td><td>通过建立倒排索引，快速匹配文档的方式</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MYISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Hash</td><td>0</td><td>0</td><td>1</td></tr><tr><td>R-Tree</td><td>0</td><td>1</td><td>0</td></tr><tr><td>Full-test</td><td>（5.6支持）</td><td>1</td><td>0</td></tr></tbody></table><h2 id="4-数据结构"><a href="#4-数据结构" class="headerlink" title="4.数据结构"></a>4.数据结构</h2><h3 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1.二叉树"></a>1.二叉树</h3><p>在进行数据顺序插入时，会形成一个链表，查询效率降低。</p><p>红黑树（自平衡树）：大数据量情况下，层级较深，检索速度慢。</p><h3 id="2-B-Tree（多路平衡查找树）"><a href="#2-B-Tree（多路平衡查找树）" class="headerlink" title="2.B-Tree（多路平衡查找树）"></a>2.B-Tree（多路平衡查找树）</h3><p>eg：以一个最大度数为5的B-Tree为例，每个节点最多存储4个Key，5个指针：</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/B%E6%A0%91.png"></p><p><strong>特点：</strong></p><ol><li><p>5阶的B树，每个节点最多存储4个key，5个指针</p></li><li><p>当节点存储的key数量达到5，中间元素向上裂变</p></li><li><p>叶子节点和非叶子节点都会存放数据</p></li></ol><h3 id="3-B-Tree（根节点常驻内存）"><a href="#3-B-Tree（根节点常驻内存）" class="headerlink" title="3.B+Tree（根节点常驻内存）"></a>3.B+Tree（根节点常驻内存）</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/B%E6%A0%91.png"></p><p><strong>特点：</strong></p><ol><li>所有数据存储在叶子节点。</li><li>叶子节点形成单向链表。</li><li>非叶子节点仅存储索引数据，具体数据存储在叶子节点</li></ol><h4 id="Mysql中的B-Tree"><a href="#Mysql中的B-Tree" class="headerlink" title="Mysql中的B+Tree"></a>Mysql中的B+Tree</h4><p>在B+Tree的基础上，每个相邻的叶子节点又增加了一个链表指针，叶子节点形成双向链表。提升了访问的性能，利于排序</p><h3 id="4-Hash"><a href="#4-Hash" class="headerlink" title="4.Hash"></a>4.Hash</h3><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在 hash表中。</p><p>若出现<strong>Hash冲突</strong>，则通过链表解决。</p><p><strong>特点</strong>：</p><ol><li>只能等值匹配，不能进行范围查询</li><li>无法排序</li><li>查询效率高（不存在Hash冲突的情况下）</li><li>不支持联合索引的最左侧原则</li></ol><p><strong>InnoDB中具有自适应hash功能，hash索引是 InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的。</strong></p><h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><h4 id="1-为什么InnoDB存储引擎选择使用B-tree索引结构"><a href="#1-为什么InnoDB存储引擎选择使用B-tree索引结构" class="headerlink" title="1.为什么InnoDB存储引擎选择使用B+tree索引结构?"></a>1.为什么InnoDB存储引擎选择使用B+tree索引结构?</h4><p><strong>一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I&#x2F;O操作次数</strong></p><ol><li><p>相对于二叉树，B+Tree的层级更少，搜索效率高。</p></li><li><p>B-Tree（时间复杂度不确定）在叶子和非叶子节点都存储数据，而一个页的存储大小是一定的（默认16KB），B-Tree非叶子节点存储数据，会导致可存储的键值减少，进而导致树的高度增加，提高了磁盘IO，降低了查询效率，而且由于非叶子节点存储数据，范围为查询效率低。</p></li><li><p>Hash只支持精确查找。</p></li></ol><h4 id="2-为了减少IO，索引树会一次性加载吗？"><a href="#2-为了减少IO，索引树会一次性加载吗？" class="headerlink" title="2.为了减少IO，索引树会一次性加载吗？"></a><strong>2.为了减少IO，索引树会一次性加载吗？</strong></h4><blockquote><p>1、数据库索引是存储在磁盘上的，如果数据量很大，必然导致索引的大小也会很大，超过几个G。</p><p>2、当我们利用索引查询时候，是不可能将全部几个G的索引都加载进内存的，我们能做的只能是：逐一加载每一个磁盘页，因为磁盘页对应着索引树的节点。</p></blockquote><h4 id="3-B-树的存储能力如何？为何说一般查找行记录，最多只需1-3次磁盘IO"><a href="#3-B-树的存储能力如何？为何说一般查找行记录，最多只需1-3次磁盘IO" class="headerlink" title="3.B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO"></a><strong>3.B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO</strong></h4><blockquote><p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT(占用4个字节)或BIGINT(占用8个字节)，指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB&#x2F;(8B+8B)&#x3D;1K个键值，因为是估算，为了方便计算，这里的K取值为10^3。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 &#x3D; 10亿条记录。（这里假定一个数据页也存储10^3条行记录数据了）</p><p>实际情况中每个节点可能不能填充满，因此在数据库中，<code>B+Tree的高度一般都在2~4层</code>。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I&#x2F;O操作</p></blockquote><h3 id="5-索引类型"><a href="#5-索引类型" class="headerlink" title="5.索引类型"></a>5.索引类型</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>主键创建的</td><td>自动创建，1个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免列的值重复</td><td>可多个</td><td>UNIQUE</td></tr><tr><td>普通索引</td><td>快速定位数据</td><td>可多个</td><td></td></tr><tr><td>全文索引</td><td>查找关键字</td><td>可多个</td><td>FULLTEXT</td></tr></tbody></table><h4 id="InnoDB索引存储形式分类"><a href="#InnoDB索引存储形式分类" class="headerlink" title="InnoDB索引存储形式分类"></a>InnoDB索引存储形式分类</h4><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚簇索引</td><td>将数据存储与索引放到了一块，索引结构的叶子 节点保存了行数据</td><td>必须有,而且只 有一个</td></tr><tr><td>非聚簇索引（二级索引）</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可多个</td></tr></tbody></table><h4 id="聚集索引选取规则"><a href="#聚集索引选取规则" class="headerlink" title="聚集索引选取规则:"></a>聚集索引选取规则:</h4><ol><li><p>存在主键，主键索引就是聚簇索引。</p></li><li><p>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</p></li><li><p>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引。</p></li></ol><h4 id="聚簇索引与非聚簇索引的区别？"><a href="#聚簇索引与非聚簇索引的区别？" class="headerlink" title="聚簇索引与非聚簇索引的区别？"></a>聚簇索引与非聚簇索引的区别？</h4><table><thead><tr><th></th><th>叶子节点</th><th>数量</th><th>查询效率</th></tr></thead><tbody><tr><td>聚簇索引</td><td>数据记录</td><td>一个</td><td>高</td></tr><tr><td>非聚簇索引</td><td>数据位置（即主键）</td><td>多个</td><td>不高，因为需要回表操作</td></tr></tbody></table><p><strong>回表查询</strong>： 先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询。</p><h4 id="B-Tree存储能力？"><a href="#B-Tree存储能力？" class="headerlink" title="B+Tree存储能力？"></a>B+Tree存储能力？</h4><p>eg： 一页默认大小16KB，假设一行数据为1K，指针占用6个字节，主键为BigInt，占8个字节。</p><p>根节点存储：n*8 + (n+1) *6 &#x3D; 16 *1024（B）       n &#x3D; 1170（key个数）</p><p> n+1 &#x3D; 指针个数 &#x3D; 1171</p><p>高度为2：叶子节点： 1171 * （16 &#x2F;1） &#x3D; 18000条记录</p><p>高度为3： 1171* 1171*16</p><h3 id="6-索引语法"><a href="#6-索引语法" class="headerlink" title="6.索引语法"></a>6.索引语法</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span>  表名<span class="token punctuation">(</span>字段，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-查看"><a href="#2-查看" class="headerlink" title="2.查看"></a>2.查看</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、SQL性能分析"><a href="#三、SQL性能分析" class="headerlink" title="三、SQL性能分析"></a>三、SQL性能分析</h2><h3 id="1-查看sql执行频率-查看语句执行次数"><a href="#1-查看sql执行频率-查看语句执行次数" class="headerlink" title="1.查看sql执行频率(查看语句执行次数)"></a>1.查看sql执行频率(查看语句执行次数)</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">-- session 是查看当前会话 ;-- global 是查询全局数据 ;SHOW GLOBAL&#x2F;SESSION  STATUS LIKE &#39;Com_______&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-慢查询日志（定位sql）"><a href="#2-慢查询日志（定位sql）" class="headerlink" title="2.慢查询日志（定位sql）"></a>2.慢查询日志（定位sql）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看慢查询日志</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'slow_query_log'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启慢查询日志，要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 开启MySQL慢日志查询开关</span><span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><span class="token keyword">set</span> long_query_time<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-profile（了解时间耗费）"><a href="#3-profile（了解时间耗费）" class="headerlink" title="3.profile（了解时间耗费）"></a>3.profile（了解时间耗费）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看：YES 支持</span><span class="token keyword">SELECT</span> @<span class="token variable">@have_profiling</span><span class="token comment">#查看是否开启 : 1 开启</span><span class="token keyword">SELECT</span> @<span class="token variable">@profiling</span><span class="token comment">#设置开启</span><span class="token keyword">SET</span> profiling<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#测试查询语句</span><span class="token comment">-- 查看每一条SQL的耗时基本情况</span><span class="token keyword">show</span> profiles<span class="token punctuation">;</span><span class="token comment">-- 查看指定query_id的SQL语句各个阶段的耗时情况</span><span class="token keyword">show</span> profile <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span><span class="token comment">-- 查看指定query_id的SQL语句CPU的使用情况</span><span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-explain（查看执行计划）"><a href="#4-explain（查看执行计划）" class="headerlink" title="*4.explain（查看执行计划）"></a>*4.explain（查看执行计划）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#使用</span><span class="token keyword">Explain</span> 查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字段：</p><table><thead><tr><th>字段</th><th>含义</th><th></th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，值越大，越先执行)</td><td>多表查询</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型</td><td></td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td><td><strong>SQL性能优化的目标：至少要达到 range级别，要求是ref级别，最好是consts级别。（阿里巴巴开发手册要求）</strong></td></tr><tr><td>possible_key</td><td>表示可能应用在这张表上的索引，一个或多个。</td><td>***</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td><td>***</td></tr><tr><td>key_len</td><td>实际使用到的索引长度， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</td><td>***</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的</td><td>*</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好</td><td>*</td></tr><tr><td>Extra</td><td>Using index condition  (查找用到索引，但是需要回表查询)      Using where；Using index （查找用到了索引，单所需数据均可在索引中找到，不需要回表）</td><td></td></tr></tbody></table><h2 id="四、索引使用"><a href="#四、索引使用" class="headerlink" title="四、索引使用"></a>四、索引使用</h2><p><strong>SQL语句是否使用索引，跟数据库版本、数据量、数据选择度都有关系。</strong></p><h3 id="1-最左前缀原则（联合索引）"><a href="#1-最左前缀原则（联合索引）" class="headerlink" title="1.最左前缀原则（联合索引）"></a>1.最左前缀原则（联合索引）</h3><p><strong>查询从索引的最左列开始， 并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。</strong></p><p>注意 ： 最左前缀法则中指的最左边的列，是指在查询时，联合索引的最左边的字段(即是 第一个字段)必须存在，与我们编写SQL时，条件编写的先后顺序无关。</p><h3 id="2-范围查询（联合索引）"><a href="#2-范围查询（联合索引）" class="headerlink" title="2.范围查询（联合索引）"></a>2.范围查询（联合索引）</h3><p><strong>出现范围查询(&gt;,&lt;)，范围查询右侧的列索引失效。</strong></p><p>注意 ：尽可能的使用类似于 &gt;&#x3D; 或 &lt;&#x3D; 这类的范围查询，而避免使用 &gt; 或 &lt;</p><p>​           尽量将范围查询的条件放到最后（创建的联合索引中，务必把范围涉及到的字段写在最后）</p><h3 id="3-索引失效情况"><a href="#3-索引失效情况" class="headerlink" title="3.索引失效情况"></a>3.索引失效情况</h3><table><thead><tr><th>情况</th><th></th></tr></thead><tbody><tr><td>计算、函数、类型转换(自动或手动）</td><td></td></tr><tr><td>字符串不加引号</td><td></td></tr><tr><td>like以通配符%开头索引失效、not like</td><td>‘’%word’</td></tr><tr><td>or前后存在非索引的列</td><td></td></tr><tr><td>数据分布影响(MySQL评估使用索引比全表更慢，则不使用索引。)</td><td>可能失效</td></tr><tr><td>不等于（用 &lt;&gt; 或者 !&#x3D;）</td><td></td></tr><tr><td>is null 与 is not null</td><td>可能失效（查询时MySQL会评估，走索引快，还是全表扫描快）</td></tr><tr><td>范围查询右边的列</td><td></td></tr><tr><td>数据库和表的字符集不统一</td><td>不同的<code>字符集</code>进行比较前需要进行<code>转换</code>会造成索引失效。</td></tr></tbody></table><h3 id="4-SQL提示"><a href="#4-SQL提示" class="headerlink" title="4.SQL提示"></a>4.SQL提示</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#语法</span><span class="token comment">#use index: 建议MySQL使用哪一个索引完成此次查询,Mysql会评估使用</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>索引名<span class="token punctuation">)</span> <span class="token comment">#ignore index ： 忽略指定的索引。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>索引名<span class="token punctuation">)</span><span class="token comment">#force index ： 强制使用索引。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>索引名<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-覆盖索引（不需要回表）"><a href="#5-覆盖索引（不需要回表）" class="headerlink" title="5.覆盖索引（不需要回表）"></a>5.覆盖索引（不需要回表）</h3><p><strong>查询使用了索引，并 且需要返回的列，在该索引中已经全部能够找到（查询字段尽量为索引字段） 。</strong></p><h3 id="6-前缀索引"><a href="#6-前缀索引" class="headerlink" title="6.前缀索引"></a>6.前缀索引</h3><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让 索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建 立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p><strong>拓展：Alibaba《Java开发手册》</strong></p><p>【<code>强制</code>】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>cloumn（n）<span class="token punctuation">)</span><span class="token comment">#如何计算n的值（截取）：n尽可能小，计算的值尽可能大</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> email<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> substring<span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、索引设计原则"><a href="#五、索引设计原则" class="headerlink" title="五、索引设计原则"></a>五、索引设计原则</h2><ol><li>针对于<strong>数据量较大，且查询比较频繁的表</strong>建立索引。</li><li>针对于常作为<strong>查询条件（where）、排序（order by）、分组（group by）操作</strong>的字段建立索 引。</li><li>尽量选择<strong>区分度高的列作为索引，尽量建立唯一索引，区分度越高</strong>，使用索引的效率越高。</li><li>如果是<strong>字符串类型的字段，</strong>字段的长度较长，可以针对于字段的特点，<strong>建立前缀索引。</strong></li><li><strong>尽量使用联合索引</strong>，减少单列索引，查询时，<strong>联合索引很多时候可以覆盖索引</strong>，节省存储空间， 避免回表，提高查询效率。</li><li>要<strong>控制索引的数量</strong>，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增 删改的效率。</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含 NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="六、SQL优化"><a href="#六、SQL优化" class="headerlink" title="六、SQL优化"></a>六、SQL优化</h2><h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h3><h4 id="1-1插入多条数据："><a href="#1-1插入多条数据：" class="headerlink" title="1.1插入多条数据："></a>1.1插入多条数据：</h4><p><strong>1.批量插入</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.手动控制事务提交</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.主键顺序插入</strong></p><p>尽量顺序插入数据。</p><h4 id="1-2-大批量插入数据"><a href="#1-2-大批量插入数据" class="headerlink" title="1.2 大批量插入数据"></a>1.2 大批量插入数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 客户端连接服务端时，加上参数 -–local-infile</span>mysql –<span class="token operator">-</span><span class="token keyword">local</span><span class="token operator">-</span><span class="token keyword">infile</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><span class="token keyword">set</span> <span class="token keyword">global</span> local_infile <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 执行load指令将准备好的数据，加载到表结构中</span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">'/root/sql1.log'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> tb_user <span class="token keyword">fields</span><span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">','</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\n'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-主键优化"><a href="#2-主键优化" class="headerlink" title="2.主键优化"></a>2.主键优化</h3><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表</p><h4 id="2-1页分裂"><a href="#2-1页分裂" class="headerlink" title="2.1页分裂"></a>2.1页分裂</h4><p>主键乱序插入：</p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E9%A1%B5%E5%88%86%E8%A3%82.png"></p><h4 id="2-2页合并"><a href="#2-2页合并" class="headerlink" title="2.2页合并"></a>2.2页合并</h4><p>当页中删除的记录达到 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前 或后）看看是否可以将两个页合并以优化空间使用。</p><h4 id="3-3优化"><a href="#3-3优化" class="headerlink" title="3.3优化"></a>3.3优化</h4><ol><li>满足业务需求的前提下，尽量减少主键长度</li><li>插入时，尽量顺序插入</li><li>尽量不要使用UUID（或其他自然字段）做主键，</li><li>尽量避免主键的修改。</li></ol><h3 id="3-Order-by优化"><a href="#3-Order-by优化" class="headerlink" title="3.Order by优化"></a>3.Order by优化</h3><table><thead><tr><th>MYSQL排序方式</th><th></th><th>效率</th></tr></thead><tbody><tr><td>Using filesort</td><td>表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作</td><td>低</td></tr><tr><td>Using index</td><td>通过有序索引顺序扫描直接返回有序数据</td><td>高</td></tr></tbody></table><p><strong>创建索引时默认升序，在降序时也会使用索引 Backward index scan，这个代表反向扫描索引</strong></p><p>指定索引排序：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age_phone_ad <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age <span class="token keyword">asc</span> <span class="token punctuation">,</span>phone <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol><li>根据排序字段创建合适的索引，多字段排序，遵循最左前缀原则</li><li>尽量使用覆盖索引</li><li><strong>多字段排序，一个升序，一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）。</strong></li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size(默认256k)。</li><li><strong>减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做</strong>。Order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li></ol><h3 id="4-Group-by"><a href="#4-Group-by" class="headerlink" title="4.Group by"></a>4.Group by</h3><p>Using temporary出现效率低</p><h4 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h4><ol><li>在分组操作时，可以通过索引来提高效率。</li><li>分组操作时，索引的使用也是满足最左前缀法则的。</li><li>where效率高于having，能写在where限定的条件就不要写在having中了</li></ol><h3 id="5-limit优化"><a href="#5-limit优化" class="headerlink" title="5.limit优化"></a>5.limit优化</h3><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。</p><h4 id="优化：-1"><a href="#优化：-1" class="headerlink" title="优化："></a>优化：</h4><p>一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引   加子查询形式进行优化</p><p><strong>优化思路二</strong></p><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM student WHERE id &gt; 2000000 LIMIT 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-count优化"><a href="#6-count优化" class="headerlink" title="6.count优化"></a>6.count优化</h3><p>InnoDB 引擎，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出 来，然后累积计数。</p><h4 id="优化：-2"><a href="#优化：-2" class="headerlink" title="优化："></a>优化：</h4><p>自己计数(可以借助于redis这样的数据库进行,但是如果是带条件的count又比较麻烦了)。</p><h4 id="6-1-count用法"><a href="#6-1-count用法" class="headerlink" title="6.1 count用法"></a>6.1 count用法</h4><table><thead><tr><th>用法</th><th>含义</th></tr></thead><tbody><tr><td>count(主 键)</td><td>InnoDB 引擎会遍历整张表，把每一行的 主键id 值都取出来，返回给服务层。 服务层拿到主键后，直接按行进行累加(主键不可能为null)</td></tr><tr><td>count(字 段）</td><td>没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出 来，返回给服务层，服务层判断是否为null，不为null，计数累加。     有not null 约束：InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返 回给服务层，直接按行进行累加。</td></tr><tr><td>count(数 字)</td><td>InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字“1” 进去，直接按行进行累加。</td></tr><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接 按行进行累加。</td></tr></tbody></table><p>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽 量使用 count(**)。</p><h3 id="7-update优化"><a href="#7-update优化" class="headerlink" title="7.update优化"></a>7.update优化</h3><p>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁 升级为表锁 。</p><h4 id="优化：-3"><a href="#优化：-3" class="headerlink" title="优化："></a>优化：</h4><p>根据索引字段进行更新（条件为索引）。</p><h3 id="8-关联查询优化"><a href="#8-关联查询优化" class="headerlink" title="8.关联查询优化"></a>8.关联查询优化</h3><blockquote><p>结论1：对于内连接来说，查询优化器可以决定谁来作为驱动表，谁作为被驱动表出现</p><p>结论2：对于内连接来讲，如果表的连接条件中只能有一个字段有索引，则有索引的字段所在的表会被作为被驱动表</p><p>结论3：对于内连接来说，在两个表的连接条件都存在索引的情况下，会选择小表作为驱动表。<code>小表驱动大表</code></p></blockquote><h5 id="9-子查询优化"><a href="#9-子查询优化" class="headerlink" title="9.子查询优化"></a>9.子查询优化</h5><p><strong>在MySQL中，可以使用连接（JOIN）查询来替代子查询。</strong>连接查询<code>不需要建立临时表</code>，其<code>速度比子查询要快</code>，如果查询中使用索引的话，性能就会更好。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础</title>
      <link href="/blog/2023/03/17/sql/"/>
      <url>/blog/2023/03/17/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，数据的增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，查询数据</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，创建用户、控制访问权限</td></tr></tbody></table><h2 id="DDL-数据库"><a href="#DDL-数据库" class="headerlink" title="DDL(数据库)"></a>DDL(数据库)</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>                   <span class="token comment">#查询所有数据库</span><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">#查询当前所处数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> 字符集<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> 排序规则<span class="token punctuation">]</span> <span class="token comment">#创建数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名；                             <span class="token comment">#删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> 数据库名；                     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="1-查询-1"><a href="#1-查询-1" class="headerlink" title="1.查询"></a>1.查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>                     <span class="token comment">#查询所有表</span><span class="token keyword">DESC</span> 表名；                       <span class="token comment">#查询表结构</span><span class="token keyword">SHOW</span> CAREATE <span class="token keyword">TABLE</span> 表名；         <span class="token comment">#查询建表语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建-1"><a href="#2-创建-1" class="headerlink" title="2.创建"></a>2.创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>   字段<span class="token number">1</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token keyword">UNSIGNED</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token comment">#id int(20) COMMENT '用户'，UNSIGNED表示不为负数，只能在整数类型使用</span>   字段<span class="token number">2</span> 类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   字段<span class="token number">3</span> 类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 表注释<span class="token punctuation">]</span>  eg: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>main<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户表'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据类型</strong></p><table><thead><tr><th>类型</th><th>字段类型</th></tr></thead><tbody><tr><td>整数</td><td>TINYINT、SMALLINT、MEDIUMINT、**INT(或INTEGER)**、BIGINT</td></tr><tr><td>浮点数</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数</td><td><strong>DECIMAL</strong></td></tr><tr><td>位</td><td>BIT</td></tr><tr><td>日期时间</td><td>YEAR、TIME、<strong>DATE</strong>、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串</td><td>CHAR、<strong>VARCHAR</strong>、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举</td><td>ENUM</td></tr><tr><td>集合</td><td>SET</td></tr><tr><td>二进制字符串</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON； 集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTIO</td></tr></tbody></table><h5 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h5><table><thead><tr><th>数据类型</th><th>描述</th><th></th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td><td></td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为1个字符，最大长度255</td><td></td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，<strong>必须指定长度</strong></td><td></td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用4个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30， 默认M+D&lt;&#x3D;6</td><td></td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用8个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td><td>（M,D）M精度（几位）、D标度（小数几位）</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE 相同。</td><td></td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td><td></td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td><td></td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td><td></td></tr></tbody></table><h4 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h4><h5 id="1-添加字段"><a href="#1-添加字段" class="headerlink" title="1.添加字段"></a>1.添加字段</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 类型（长度） <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-修改字段"><a href="#2-修改字段" class="headerlink" title="2.修改字段"></a>2.修改字段</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#修改字段类型</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 数据类型；<span class="token comment">#修改字段名和字段类型</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 <span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-删除字段"><a href="#3-删除字段" class="headerlink" title="3.删除字段"></a>3.删除字段</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">DROP</span> 字段名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-修改表名"><a href="#4-修改表名" class="headerlink" title="4.修改表名"></a>4.修改表名</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4.删除表"></a>4.删除表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token comment">#删除并重新创建表（清除数据）</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="DML（数据的增删改）"><a href="#DML（数据的增删改）" class="headerlink" title="DML（数据的增删改）"></a>DML（数据的增删改）</h2><h3 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h3><p><strong>日期和字符串应该在引号中</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#指定字段</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，值<span class="token number">3</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">#全部添加</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，值<span class="token number">3</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">#批量添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，值<span class="token number">3</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span>，值<span class="token number">2</span>，值<span class="token number">3</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token operator">=</span>值，字段<span class="token operator">=</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">#没有条件修改所有</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除-1"><a href="#3-删除-1" class="headerlink" title="3.删除"></a>3.删除</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名  <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span>    <span class="token comment">#没有条件修改所有</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DQL（数据查询）"><a href="#DQL（数据查询）" class="headerlink" title="DQL（数据查询）"></a>DQL（数据查询）</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELCT <span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> 字段名<span class="token punctuation">[</span><span class="token keyword">AS</span> 别名<span class="token punctuation">]</span> <span class="token comment">#DISTINCT 去重</span><span class="token keyword">FROM</span>  表名<span class="token keyword">WHERE</span> 条件列表                           <span class="token comment">#不可使用聚合函数</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段列表<span class="token keyword">HAVING</span>    分组条件列表<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>  排序字段列表               <span class="token comment">#ASC升序，DESC降序 可有多个字段排序规则</span><span class="token keyword">LIMIT</span>  分页参数                     <span class="token comment">#起始索引（默认0），查询记录数 或者  Limit 查询记录数   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-常用函数（用于查询字段上）"><a href="#1-常用函数（用于查询字段上）" class="headerlink" title="1.常用函数（用于查询字段上）"></a>1.常用函数（用于查询字段上）</h4><table><thead><tr><th>聚合函数</th><th>！！！！注意：null不参与运算</th><th>位置</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td><td>字段、HAVING条件</td></tr><tr><td>max</td><td>最大值</td><td></td></tr><tr><td>min</td><td>最小值</td><td></td></tr><tr><td>avg</td><td>平均数</td><td></td></tr><tr><td>sum</td><td>总和</td><td></td></tr></tbody></table><h4 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2.条件查询"></a>2.条件查询</h4><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&lt;&gt;    或  !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN…END…</td><td>在范围内</td></tr><tr><td>IN(…..)</td><td>在范围中</td></tr><tr><td>LIKE</td><td>模糊匹配</td></tr><tr><td>IS NULL</td><td>是null</td></tr><tr><td>AND 或 &amp;&amp;</td><td>且</td></tr><tr><td>OR 或    ||</td><td>或</td></tr><tr><td>NOT 或   !</td><td>非</td></tr></tbody></table><h4 id="3-SQL执行顺序"><a href="#3-SQL执行顺序" class="headerlink" title="3.SQL执行顺序"></a>3.SQL执行顺序</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELCT <span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> 字段名<span class="token punctuation">[</span><span class="token keyword">AS</span> 别名<span class="token punctuation">]</span>                  <span class="token comment"># 4</span><span class="token keyword">FROM</span>  表名                                       <span class="token comment"># 1</span><span class="token keyword">WHERE</span> 条件列表                                    <span class="token comment"># 2</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段列表                              <span class="token comment"># 3</span><span class="token keyword">HAVING</span>    分组条件列表                             <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>  排序字段列表                             <span class="token comment"># 5          </span><span class="token keyword">LIMIT</span>  分页参数                                   <span class="token comment"># 6</span><span class="token comment">##################################</span><span class="token keyword">FROM</span> <span class="token keyword">WHERE</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token keyword">HAVING</span><span class="token keyword">SELECT</span><span class="token keyword">DISTINCT</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token keyword">LIMIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="1-多表关系"><a href="#1-多表关系" class="headerlink" title="1.多表关系"></a>1.多表关系</h4><p>1.一对多（多对一）：外键约束</p><p><strong>2.多对多：需要建立中间表</strong></p><p>3.一对一：分表（使用外键，设置唯一约束）</p><h4 id="2-笛卡尔积（两个集合A-B-所有的组合情况）"><a href="#2-笛卡尔积（两个集合A-B-所有的组合情况）" class="headerlink" title="2. 笛卡尔积（两个集合A,B,所有的组合情况）"></a>2. 笛卡尔积（两个集合A,B,所有的组合情况）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">*</span> FORM emp<span class="token punctuation">,</span>dept<span class="token punctuation">;</span>  <span class="token comment">#emp17条数据，dept6条数据 返回数据17*6 = 102条数据</span><span class="token comment">#使用where语句查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-连接查询（内外自链接）与子查询"><a href="#3-连接查询（内外自链接）与子查询" class="headerlink" title="3.连接查询（内外自链接）与子查询"></a>3.连接查询（内外自链接）与子查询</h4><h5 id="3-1内连接（交集，无法查询null）"><a href="#3-1内连接（交集，无法查询null）" class="headerlink" title="3.1内连接（交集，无法查询null）"></a>3.1内连接（交集，无法查询null）</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#隐式连接</span><span class="token keyword">SELECT</span> 字段 <span class="token keyword">FROM</span> 表<span class="token number">1</span>，表<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">#显式连接</span><span class="token keyword">SELECT</span> 字段 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-外连接-可查null"><a href="#3-2-外连接-可查null" class="headerlink" title="3.2 外连接(可查null)"></a>3.2 外连接(可查null)</h5><h6 id="3-2-1左外连接"><a href="#3-2-1左外连接" class="headerlink" title="3.2.1左外连接"></a>3.2.1左外连接</h6><p>左表所有数据、公共数据</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-2-1右外连接"><a href="#3-2-1右外连接" class="headerlink" title="3.2.1右外连接"></a>3.2.1右外连接</h6><p>右表所有数据、公共数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">RIGHT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3自连接（可内外连接）"><a href="#3-3自连接（可内外连接）" class="headerlink" title="3.3自连接（可内外连接）"></a>3.3自连接（可内外连接）</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-4-联合查询（UNION，字段一致）"><a href="#3-4-联合查询（UNION，字段一致）" class="headerlink" title="3.4 联合查询（UNION，字段一致）"></a>3.4 联合查询（UNION，字段一致）</h5><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">#将多次查询结果合并  #UNION 合并并去重 #UNION ALL 合并不去重SELECT 字段 FROM 表1...;UNION [ALL]SELECT 字段 FROM 表2...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5子查询（嵌套查询）"><a href="#3-5子查询（嵌套查询）" class="headerlink" title="3.5子查询（嵌套查询）"></a>3.5子查询（嵌套查询）</h5><ol><li>分类</li></ol><table><thead><tr><th></th><th>子查询结果</th><th>操作符</th><th></th></tr></thead><tbody><tr><td>标量子查询</td><td>单值</td><td>&lt;,&gt;,&lt;&#x3D;,&gt;&#x3D;</td><td></td></tr><tr><td>列子查询</td><td>单列</td><td>IN,NOT IN,ANY（满足一个条件）,SOME（满足一个）ALL(满足所有)</td><td></td></tr><tr><td>行子查询</td><td>单行</td><td>&#x3D;，！&#x3D;，IN,NOT IN</td><td>SELECT * FROM EMP WHERE (salary,managerid) &#x3D; (select salary,managerid from emp where name &#x3D; ‘张无忌’)</td></tr><tr><td>表子查询</td><td>多行多列</td><td></td><td>IN</td></tr></tbody></table><table><thead><tr><th>子查询位置</th></tr></thead><tbody><tr><td>WHERE</td></tr><tr><td>FROM</td></tr><tr><td>SELECT</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DCL（数据访问控制）"><a href="#DCL（数据访问控制）" class="headerlink" title="DCL（数据访问控制）"></a>DCL（数据访问控制）</h2><h3 id="1-查询用户"><a href="#1-查询用户" class="headerlink" title="1.查询用户"></a>1.查询用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名@主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-修改用户密码"><a href="#3-修改用户密码" class="headerlink" title="3.修改用户密码"></a>3.修改用户密码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'用户名@主机名'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'新密码'</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-删除用户"><a href="#4-删除用户" class="headerlink" title="4.删除用户"></a>4.删除用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名@主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-权限控制"><a href="#5-权限控制" class="headerlink" title="5.权限控制"></a>5.权限控制</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/sql%E6%9D%83%E9%99%90.png"></p><h4 id="5-1查询权限"><a href="#5-1查询权限" class="headerlink" title="5.1查询权限"></a>5.1查询权限</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'用户名@主机名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-2授予权限"><a href="#5-2授予权限" class="headerlink" title="5.2授予权限"></a>5.2授予权限</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span>  数据库<span class="token punctuation">.</span>表名  <span class="token keyword">TO</span> <span class="token string">'用户名@主机名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3撤销权限"><a href="#5-3撤销权限" class="headerlink" title="5.3撤销权限"></a>5.3撤销权限</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">REMOVE 权限列表 <span class="token keyword">ON</span> 数据库<span class="token punctuation">.</span>表名  <span class="token keyword">FROM</span> <span class="token string">'用户@主机名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.png"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th></th><th>作用</th></tr></thead><tbody><tr><td>CEIL (X)</td><td>向上取整       &#x2F;&#x2F;1.1  2</td></tr><tr><td>FLOOR(X)</td><td>向下取整       &#x2F;&#x2F; 1.1   1</td></tr><tr><td>MOD(X,Y)</td><td>取 X &#x2F; Y 的模         &#x2F;&#x2F; 3,4         3%4</td></tr><tr><td>RAND()</td><td>返回0-1的随机数</td></tr><tr><td>ROUND(X,Y)</td><td>求X的四舍五入值。保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th></th><th>作用</th><th></th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回日期</td><td></td></tr><tr><td>CURTIME()</td><td>返回时间</td><td></td></tr><tr><td>NOW()</td><td>返回日期和时间</td><td></td></tr><tr><td>YEAR(date)</td><td>获取date的年</td><td></td></tr><tr><td>MONTH(date)</td><td>获取date的月</td><td></td></tr><tr><td>DAT(date)</td><td>获取date的日期</td><td></td></tr><tr><td>DATE_ADD(date,INTERVAL expr type)</td><td>返回一个日期&#x2F;时间 加上一个时间间隔expr的时间值</td><td>DATE_ADD(NOW(), INTERVAL 70 DAY)</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)</td><td></td><td></td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1,date2之间的天数</td><td></td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th></th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t , f)</td><td>value为true，返回  t ,否则返回 f</td></tr><tr><td>IFNULL(value1 ,value2 )</td><td>value1不为空，返回 value1，否则 value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1]…ELSE [default] END</td><td>如果val1为true,返回res1，否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [RES1]…. ELSE[default] END</td><td>如果expr值为va1，返回val1，否则返回default默认值</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">CASE</span>  <span class="token keyword">WHEN</span> scores <span class="token operator">>=</span> <span class="token number">85</span> <span class="token keyword">THEN</span> <span class="token string">'优秀'</span>  <span class="token keyword">WHEN</span> scores <span class="token operator">>=</span> <span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'及格'</span>  <span class="token keyword">ELSE</span> <span class="token string">'不及格'</span> <span class="token keyword">END</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'成绩'</span> <span class="token keyword">FROM</span>STUDENT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ol><li><p>作用在表中字段的规则，</p></li><li><p>目的：保证数据的正确性、一致性、完整性</p></li><li><p>常见约束</p></li></ol><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>不可为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>数据不重复</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>默认赋值</td><td>DEFAULT</td></tr><tr><td>检查约束</td><td>保证字段满足某个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>让两张表数据建立连接</td><td>FOREIGN KEY</td></tr></tbody></table><ol start="4"><li><p>外键约束</p><p>父表（主表）：某个字段被从表使用</p><p>子表（从表）：带父表字段的表</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#增加外键</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>字段 数据类型，<span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> REFERNCES 主表<span class="token punctuation">(</span>主表字段<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表<span class="token punctuation">(</span>主表字段<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>删除&#x2F;更新行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>检查是否有对应外键，若有则不允许更新、删除</td></tr><tr><td>RESTRICT</td><td>检查是否有对应外键，若有则不允许更新、删除</td></tr><tr><td>CASCADE</td><td>检查是否有对应外键，若有则删除、更新子表记录</td></tr><tr><td>SET NULL</td><td>检查是否有对应外键，若有则设置子表该外键为null（要求外键允许null）</td></tr></tbody></table><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系 统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>注意： <strong>默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐 式的提交事务。</strong></p><h2 id="2-修改事务"><a href="#2-修改事务" class="headerlink" title="2.修改事务"></a>2.修改事务</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看事务情况   0为手动提交，1为自动提交</span><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span> <span class="token comment">#修改事务</span><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span>（<span class="token number">1</span>）；<span class="token comment">#开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> 或 <span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment">#提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">#回滚</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-事务的四大特性"><a href="#3-事务的四大特性" class="headerlink" title="3.事务的四大特性"></a>3.事务的四大特性</h2><ol><li>原子性： 事务是一个基本的操作单位，一起成功，一起失败。</li><li>一致性：事务完成时，所有的数据保持一致。（转账失败，用户的账户余额综总和不变，守恒）</li><li>隔离性：一个事务的执行不被另一个事务的执行干扰。</li><li>持久性：事务提交或回滚，数据的改变是永久的。    （Read Log （重做日志）实现）</li></ol><h2 id="4-并发下的事务问题"><a href="#4-并发下的事务问题" class="headerlink" title="4.并发下的事务问题"></a>4.并发下的事务问题</h2><ol><li><p>脏读</p><p>概念：一个事务A读取到另一个事务B的未提交的数据。</p><p>解决：</p><p>1.事务B写操作加行锁X</p><p>2.MVCC</p></li><li><p>不可重复读</p><p>一个事务先后读取一条记录，但是两次读取不一致。</p><p>eg: A事务读取数据，然后B事务修改并提交，A事务再读数据，出现不一致</p><p>解决：</p><p>1.事务A读取时加读锁S</p><p>2.MVCC</p></li><li><p>幻读</p><p>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据 已经存在，好像出现了 “幻影”。</p><p>eg： A事务读取主键为1的数据，数据库没有，然后进行插入，在此期间，B事务插入主键为1的数据并提交，A事务提交不成功。</p><p>解决：</p><p>1.A事务加数据时加间隙锁</p><p>2.MVCC</p></li></ol><h2 id="5-事务隔离级别"><a href="#5-事务隔离级别" class="headerlink" title="5.事务隔离级别"></a>5.事务隔离级别</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th></th><th>锁</th></tr></thead><tbody><tr><td>读未提交</td><td>1</td><td>1</td><td>1</td><td></td><td>加读锁，</td></tr><tr><td>读已提交</td><td></td><td>1</td><td>1</td><td>Oracle</td><td></td></tr><tr><td>可重复读</td><td></td><td></td><td>1</td><td>Mysql</td><td></td></tr><tr><td>串行化度</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>数据安全性越高，性能越差</strong></p><p><strong>InnoDB引擎的MVCC解决了幻读问题。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM虚拟机</title>
      <link href="/blog/2023/03/14/jvm/"/>
      <url>/blog/2023/03/14/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/JVM%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><h2 id="1-JVM内存结构图"><a href="#1-JVM内存结构图" class="headerlink" title="1.JVM内存结构图"></a>1.JVM内存结构图</h2><h3 id="1-线程私有部分"><a href="#1-线程私有部分" class="headerlink" title="1.线程私有部分"></a>1.线程私有部分</h3><p><strong>程序计数器（无内存溢出）、虚拟机栈</strong></p><table><thead><tr><th></th><th>有无内存溢出</th><th>溢出报错</th><th>idea配置</th><th>GC</th></tr></thead><tbody><tr><td>程序计数器</td><td>无</td><td></td><td></td><td>无</td></tr><tr><td>虚拟机栈</td><td>有</td><td><strong>java.lang.StackOverflowError</strong></td><td>-Xss1m 每个线程的堆栈大小</td><td>无</td></tr></tbody></table><h3 id="2-线程公有部分"><a href="#2-线程公有部分" class="headerlink" title="2.线程公有部分"></a>2.线程公有部分</h3><p><strong>堆、方法区</strong></p><table><thead><tr><th></th><th>有无内存溢出</th><th>溢出报错</th><th>idea配置</th><th>GC</th></tr></thead><tbody><tr><td>堆</td><td>有</td><td><strong>java.lang.OutOfMemmoryError: Java heap space</strong></td><td>-Xmx  程序运行期间最大可占用的内存大小      -Xms  程序启动时占用内存大小 -Xmn2g ：设置年轻代大小</td><td>有</td></tr><tr><td>方法区（元空间）</td><td>有</td><td><strong>java.lang.OutOfMemoryError:PermGen space(1.8)</strong></td><td></td><td></td></tr></tbody></table><h2 id="2-JVM组成及其作用"><a href="#2-JVM组成及其作用" class="headerlink" title="2.JVM组成及其作用"></a>2.JVM组成及其作用</h2><h3 id="1-程序计数器（CPU寄存器实现）"><a href="#1-程序计数器（CPU寄存器实现）" class="headerlink" title="1.程序计数器（CPU寄存器实现）"></a>1.程序计数器（CPU寄存器实现）</h3><ol><li><p><strong>作用：</strong> 记住下一条JVM指令地址</p><p>执行流程： <strong>程序计数器</strong>：<strong>存储JVM指令地址</strong> —&gt; <strong>解释器</strong>：根据<strong>程序计数器的JVM地址找到下一条JVM指令</strong>，<strong>将其转变为字节码</strong>  —&gt; CPU执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span>： getstatic #<span class="token number">20</span>                                  <span class="token comment">//PrintStream out = System.out;</span><span class="token number">3</span><span class="token operator">:</span>astore_1                                        <span class="token comment">// -- </span><span class="token number">6</span><span class="token operator">:</span>aload_1                                         <span class="token comment">//out.println(1);</span><span class="token number">0</span> 代表<span class="token constant">JVM</span>指令地址   getstati  代表二进制字节码    #<span class="token number">20</span> 代表<span class="token constant">JVM</span>指令    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特点：</p><p><strong>线程私有</strong>： 在CPU时间片用完时，记录当前的下一条地址，便于下一次分配时间片使用</p><p><strong>不会内存溢出</strong></p></li></ol><h3 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2.虚拟机栈"></a>2.虚拟机栈</h3><ol><li><p><strong>作用</strong>： 每个线程运行时的内存空间</p></li><li><p><strong>组成</strong>：栈帧（一次方法的调用）：每个方法运行时需要的内存 。</p><p> <strong>栈帧组成</strong>：方法参数、局部变量、返回地址</p><p>​       <strong>活动栈帧</strong>：一个栈只能有一个活动栈帧</p></li></ol><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%A0%88%E5%B8%A7.png"></p><ol start="3"><li><p><strong>问题？</strong></p><ol><li><p>是否涉及垃圾回收？  否</p></li><li><p>栈内存越大越好吗？  不是，栈内存变大，会使可创建内存变小（eg ： 内存500M，栈为1M，可创建线程500个，栈为100M，可创建线程5个）</p></li><li><p>方法内的局部变量是否线程安全？（ 作为返回值和方法参数可能会有线程安全问题）</p><p><strong>如果方法内局部变量没有逃离方法的作用范围，则线程安全。（没有被方法返回）</strong></p><p><strong>如果局部变量引用了对象，并逃离了方法的作用范围，需要考虑线程安全（方法参数和返回值，可能被其他代码引用从而造成安全问题）</strong></p></li></ol></li><li><p><strong>栈内存溢出问题</strong></p><p>1.<strong>栈帧过多</strong>：（无限递归）</p><p>2.<strong>栈帧过大</strong>：（局部变量过多）</p></li></ol><h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h3><ol><li><strong>作用</strong>：为本地方法提供内存空间</li><li>本地方法： Object类中的：clone() ,hashCode(),wait().</li></ol><h3 id="4-堆"><a href="#4-堆" class="headerlink" title="4.堆"></a>4.堆</h3><ol><li><p>作用： 通过new 创建的对象存储在堆内存中</p></li><li><p>特点 ： 线程共享、有垃圾回收</p></li><li><p><strong>堆内存诊断</strong></p></li><li><p>jps工具查看当前Java进程</p><ol start="2"><li>jmap工具查看堆内存占用情况 </li><li>jconnsole工具图形化查看堆内存占用情况： jconsole</li></ol></li><li><p>jvisualvm  图形可视化工具</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//命令行输入：</span>jps                    <span class="token comment">//查看进程</span>jhsdb jmap <span class="token operator">--</span>heap <span class="token operator">--</span>pid <span class="token number">14764</span>                <span class="token comment">//查看进程ID的堆内存</span>jconsole                                      <span class="token comment">//图形化查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/%E6%96%B9%E6%B3%95%E5%8C%BA.png"></p><p><strong>常量池</strong>：一张表（存在*.Class文件中），虚拟机指令根据表找到类名，方法名，参数类型、字面量等</p><p><strong>运行时常量池</strong>：当类被加载时，常量池信息会放入运行时常量池，并将符号地址变为真实地址</p><p><strong>StringTable（串池）</strong></p><ol><li><p>底层：HashTable</p></li><li><p>程序流程：</p><p> 常量池中的信息，代码运行时，加入运行时常量池，此时只是常量池的符号，不是字符串对象</p><p>代码执行到达 String s &#x3D; “a”，将a变为字符串对象，并与SrtingTable中比较，无则加入，有则不加</p></li></ol><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">String s1 &#x3D;  &quot;a&quot;;  &#x2F;&#x2F;放入常量池String s2 &#x3D;  &quot;b&quot;;    &#x2F;&#x2F;放入常量池String s3 &#x3D; &quot;ab&quot;;String s4  &#x3D; s1 +s2;         &#x2F;&#x2F;new StringBuilder().append(&quot;a&quot;).append(&quot;b&quot;).toString() new String()System.out.println(s3 &#x3D;&#x3D; s4);  &#x2F;&#x2F;false s3在常量池中，s4在堆中String s5  &#x3D; &quot;a&quot; + &quot;b&quot;;System.out.println(s3 &#x3D;&#x3D; s4); &#x2F;&#x2F;true  javac 在编译器优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>String ss &#x3D; s.intern();</p><pre class="line-numbers language-none"><code class="language-none">String s &#x3D; new String(&quot;a&quot;) + new Strin(&quot;b&quot;);  &#x2F;&#x2F;new String(ab) ,a,b常量   new String(&quot;a&quot;) 对象   new String(&quot;b&quot;)对象 StringBuilder（）对象  .toString() 对象，ab不在串池中String ss &#x3D; s.intern(); &#x2F;&#x2F; 将字符串放入串池，若无则放，如有则不放，并返回串池中的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/blog/2023/01/09/linux-ming-ling-da-quan/"/>
      <url>/blog/2023/01/09/linux-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h1 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h1><ol><li>查看防火墙的状态：</li></ol><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-none"><code class="language-none">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>开启防火墙：</li></ol><pre class="line-numbers language-none"><code class="language-none">systemctl start firewalld1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>查看已开放的端口：</li></ol><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>开放单个端口：(开放后需要要重启防火墙才生效)</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;开启22端口firewall-cmd --zone&#x3D;public --add-port&#x3D;22&#x2F;tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><p>重启防火墙：</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="一、文件夹"><a href="#一、文件夹" class="headerlink" title="一、文件夹"></a>一、文件夹</h2><ol><li><pre><code class="c">cd  ~/文件             //从根目录查看文件    /文件              //从当前目录查看文件<pre class="line-numbers language-none"><code class="language-none">   ## 二、文件### 查找文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>whereis 文件/软件<pre class="line-numbers language-none"><code class="language-none">### 1.创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>touch [文件名]<pre class="line-numbers language-none"><code class="language-none">### 2.查看1. &#96;&#96;&#96;c   cat [文件名]            &#x2F;&#x2F;快速查看内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="c">tail [参数] [文件]         //查看文件的内容，有一个常用的参数 -f 常用于查阅正在改变的日志文件。   使用 ctrl+c退出参数：-f 循环读取-q 不显示处理信息-v 显示详细的处理信息-c&lt;数目&gt; 显示的字节数-n&lt;行数&gt; 显示文件的尾部 n 行内容--pid=PID 与-f合用,表示在进程ID,PID死掉之后结束-q, --quiet, --silent 从不输出给出文件名的首部-s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒<pre class="line-numbers language-none"><code class="language-none">3. &#96;&#96;&#96; c   more [-dlfpcsu] [-num] [+&#x2F;pattern] [+linenum] [fileNames..]        &#x2F;&#x2F;类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似）   参数：   -num 一次显示的行数   -d 提示使用者，在画面下方显示 [Press space to continue, &#39;q&#39; to quit.] ，如果使用者按错键，则会显示 [Press &#39;h&#39; for instructions.] 而不是 &#39;哔&#39; 声   -l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能   -f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）   -p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容   -c 跟 -p 相似，不同的是先显示内容再清除其他旧资料   -s 当遇到有连续两行以上的空白行，就代换为一行的空白行   -u 不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）   +&#x2F;pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示   +num 从第 num 行开始显示   fileNames 欲显示内容的文档，可为复数个数 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="三、进程"><a href="#三、进程" class="headerlink" title="三、进程"></a>三、进程</h2><ol><li><pre><code class="c"> ps -ef | grep 进程关键字         //查看进程<pre class="line-numbers language-none"><code class="language-none">   # 常用设置## 一、设置yum源yum用来下载软件，但是官方自带的连接不上，需要修改。此为设置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h1 id="CentOS-Base-repo"><a href="#CentOS-Base-repo" class="headerlink" title="CentOS-Base.repo"></a>CentOS-Base.repo</h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="The-mirror-system-uses-the-connecting-IP-address-of-the-client-and-the"><a href="#The-mirror-system-uses-the-connecting-IP-address-of-the-client-and-the" class="headerlink" title="The mirror system uses the connecting IP address of the client and the"></a>The mirror system uses the connecting IP address of the client and the</h1><h1 id="update-status-of-each-mirror-to-pick-mirrors-that-are-updated-to-and"><a href="#update-status-of-each-mirror-to-pick-mirrors-that-are-updated-to-and" class="headerlink" title="update status of each mirror to pick mirrors that are updated to and"></a>update status of each mirror to pick mirrors that are updated to and</h1><h1 id="geographically-close-to-the-client-You-should-use-this-for-CentOS-updates"><a href="#geographically-close-to-the-client-You-should-use-this-for-CentOS-updates" class="headerlink" title="geographically close to the client.  You should use this for CentOS updates"></a>geographically close to the client.  You should use this for CentOS updates</h1><h1 id="unless-you-are-manually-picking-other-mirrors"><a href="#unless-you-are-manually-picking-other-mirrors" class="headerlink" title="unless you are manually picking other mirrors."></a>unless you are manually picking other mirrors.</h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="If-the-mirrorlist-x3D-does-not-work-for-you-as-a-fall-back-you-can-try-the"><a href="#If-the-mirrorlist-x3D-does-not-work-for-you-as-a-fall-back-you-can-try-the" class="headerlink" title="If the mirrorlist&#x3D; does not work for you, as a fall back you can try the"></a>If the mirrorlist&#x3D; does not work for you, as a fall back you can try the</h1><h1 id="remarked-out-baseurl-x3D-line-instead"><a href="#remarked-out-baseurl-x3D-line-instead" class="headerlink" title="remarked out baseurl&#x3D; line instead."></a>remarked out baseurl&#x3D; line instead.</h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><p>[base]<br>name&#x3D;CentOS-8.5.2111 - Base - mirrors.aliyun.com<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/$basearch/os/">http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</a><br>        <a href="http://mirrors.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/">http://mirrors.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</a><br>        <a href="http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/">http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</a><br>gpgcheck&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</a></p><p>#additional packages that may be useful<br>[extras]<br>name&#x3D;CentOS-8.5.2111 - Extras - mirrors.aliyun.com<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/centos-vault/8.5.2111/extras/$basearch/os/">http://mirrors.aliyun.com/centos-vault/8.5.2111/extras/$basearch/os/</a><br>        <a href="http://mirrors.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/">http://mirrors.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/</a><br>        <a href="http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/">http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/</a><br>gpgcheck&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</a></p><p>#additional packages that extend functionality of existing packages<br>[centosplus]<br>name&#x3D;CentOS-8.5.2111 - Plus - mirrors.aliyun.com<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/centos-vault/8.5.2111/centosplus/$basearch/os/">http://mirrors.aliyun.com/centos-vault/8.5.2111/centosplus/$basearch/os/</a><br>        <a href="http://mirrors.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/">http://mirrors.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/</a><br>        <a href="http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/">http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/</a><br>gpgcheck&#x3D;0<br>enabled&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</a></p><p>[PowerTools]<br>name&#x3D;CentOS-8.5.2111 - PowerTools - mirrors.aliyun.com<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/centos-vault/8.5.2111/PowerTools/$basearch/os/">http://mirrors.aliyun.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</a><br>        <a href="http://mirrors.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/">http://mirrors.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</a><br>        <a href="http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/">http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</a><br>gpgcheck&#x3D;0<br>enabled&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</a></p><p>[AppStream]<br>name&#x3D;CentOS-8.5.2111 - AppStream - mirrors.aliyun.com<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/centos-vault/8.5.2111/AppStream/$basearch/os/">http://mirrors.aliyun.com/centos-vault/8.5.2111/AppStream/$basearch/os/</a><br>        <a href="http://mirrors.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/">http://mirrors.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/</a><br>        <a href="http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/">http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/</a><br>gpgcheck&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</a></p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/blog/2023/01/08/nginx/"/>
      <url>/blog/2023/01/08/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一-、优点"><a href="#一-、优点" class="headerlink" title="一 、优点"></a>一 、优点</h2><ol><li><p>并发性好</p><p>采用多进程和I&#x2F;O多路复用（epoll）</p></li><li><p>配置简单，扩展性强</p></li></ol><p>   由多模块组成，极具扩展性</p><ol start="3"><li><p>高可靠性</p><p>采用多线程模式进行，其中由一个master进程和多个worker进程，worker进程数量可手动设置，每个worker进程提供相互独立的服务，且master主进程可以在worker进程出错时，快速拉起信的worker进程提供服务。</p></li><li><p>热部署</p><p>可在不停止的情况下，对Nginx进行文件升级，更新配置和更换日志等。</p></li><li><p>成本低，BSD许可证</p></li></ol><h2 id="二、-功能"><a href="#二、-功能" class="headerlink" title="二、 功能"></a>二、 功能</h2><ol><li><p>基本HTTP服务</p><p>HTTP代理服务器与反向代理服务器，支持通过缓存加速访问，可完成简单的负载均衡和容错，支持包过滤功能，支持SSL等</p></li><li><p>高级HTTP服务</p></li></ol><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><ol><li><p>静态资源部署</p></li><li><p>Rewrite地址重写</p><p>正则表达式</p></li><li><p>反向代理</p></li><li><p>负载均衡</p><p>轮询、加权轮询、ip_hash、url_hash、fair</p></li><li><p>web缓存</p></li><li><p>环境部署</p><p>高可用环境</p></li><li><p>用户认证模块</p></li></ol><h3 id="核心组成"><a href="#核心组成" class="headerlink" title="核心组成"></a>核心组成</h3><ol><li>nginx二进制可执行文件</li><li>nginx.conf 配置文件</li><li>error.log 错误的日志记录</li><li>access.log 访问日志记录</li></ol><h2 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h2><h3 id="方法一：压缩包安装"><a href="#方法一：压缩包安装" class="headerlink" title="方法一：压缩包安装"></a>方法一：压缩包安装</h3><ol><li><p>找到下载地址 使用【 wegt 网址】  安装</p><pre class="line-numbers language-none"><code class="language-none">wegt 网址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压缩</p><pre class="line-numbers language-none"><code class="language-none">tar -xzf  文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入资源文件</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译</p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装</p><pre class="line-numbers language-none"><code class="language-none">make install         或者 4&#x2F;5一起运行 make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>默认安装路径&#x2F;usr&#x2F;local&#x2F;nginx </p></li><li><p>进入 &#x2F;sbin                   运行  .&#x2F;nginx</p></li><li><p>打开浏览器输入IP</p></li></ol><h3 id="方法二：yum安装-nginx：Linux-软件包"><a href="#方法二：yum安装-nginx：Linux-软件包" class="headerlink" title="方法二：yum安装 :nginx：Linux 软件包"></a>方法二：yum安装 :<a href="https://nginx.org/en/linux_packages.html#RHEL">nginx：Linux 软件包</a></h3><ol><li><pre><code>sudo yum install yum-utils           安装yum工具<pre class="line-numbers language-none"><code class="language-none">2. 要设置 yum 存储库，请创建具有以下内容的文件：&#96;&#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>&gt; [nginx-stable]&gt; name=nginx stable repo&gt; baseurl=http://nginx.org/packages/centos/$releasever/$basearch/&gt; gpgcheck=1&gt; enabled=1&gt; gpgkey=https://nginx.org/keys/nginx_signing.key&gt; module_hotfixes=true&gt; &gt; [nginx-mainline]&gt; name=nginx mainline repo&gt; baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/&gt; gpgcheck=1&gt; enabled=0&gt; gpgkey=https://nginx.org/keys/nginx_signing.key&gt; module_hotfixes=true&gt; <pre class="line-numbers language-none"><code class="language-none">3. 默认情况下，使用稳定 nginx 包的存储库。 如果你想使用主线nginx包， 运行以下命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>&gt; sudo yum-config-manager --enable nginx-mainline&gt; <pre class="line-numbers language-none"><code class="language-none">4. 要安装 nginx，请运行以下命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>sudo yum install nginx<pre class="line-numbers language-none"><code class="language-none">5. 进入 &#x2F;sbin                   运行  .&#x2F;nginx6. 打开浏览器输入IP  7. success！！！！！！！！！！！！！！## 方法三 ：方案三:Nginx的源码复杂安装这种方式和简单的安装配置不同的地方在第一步，通过&#96;.&#x2F;configure&#96;来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我  们进行一个详细的说明。PATH:是和路径相关的配置信息with:是启动模块，默认是关闭的without:是关闭模块，默认是开启的我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：--prefix&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>指向Nginx的安装目录，默认值为/usr/local/nginx   <pre class="line-numbers language-none"><code class="language-none">--sbin-path&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向(执行)程序文件(nginx)的路径,默认值为&lt;prefix&gt;/sbin/nginx<pre class="line-numbers language-none"><code class="language-none">--modules-path&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向Nginx动态模块安装目录，默认值为&lt;prefix&gt;/modules<pre class="line-numbers language-none"><code class="language-none">--conf-path&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向配置文件(nginx.conf)的路径,默认值为&lt;prefix&gt;/conf/nginx.conf<pre class="line-numbers language-none"><code class="language-none">--error-log-path&#x3D;PATH <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向错误日志文件的路径,默认值为&lt;prefix&gt;/logs/error.log<pre class="line-numbers language-none"><code class="language-none">--http-log-path&#x3D;PATH  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向访问日志文件的路径,默认值为&lt;prefix&gt;/logs/access.log<pre class="line-numbers language-none"><code class="language-none">--pid-path&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向Nginx启动后进行ID的文件路径，默认值为&lt;prefix&gt;/logs/nginx.pid<pre class="line-numbers language-none"><code class="language-none">--lock-path&#x3D;PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>指向Nginx锁文件的存放路径,默认值为&lt;prefix&gt;/logs/nginx.lock<pre class="line-numbers language-none"><code class="language-none">要想使用可以通过如下命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>./configure --prefix=/usr/local/nginx \--sbin-path=/usr/local/nginx/sbin/nginx \--modules-path=/usr/local/nginx/modules \--conf-path=/usr/local/nginx/conf/nginx.conf \--error-log-path=/usr/local/nginx/logs/error.log \--http-log-path=/usr/local/nginx/logs/access.log \--pid-path=/usr/local/nginx/logs/nginx.pid \--lock-path=/usr/local/nginx/logs/nginx.lock<pre class="line-numbers language-none"><code class="language-none">在使用上述命令之前，需要将之前服务器已经安装的nginx进行卸载，卸载的步骤分为三步骤：步骤一：需要将nginx的进程关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>./nginx -s stop<pre class="line-numbers language-none"><code class="language-none">步骤二:将安装的nginx进行删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>rm -rf /usr/local/nginx<pre class="line-numbers language-none"><code class="language-none">步骤三:将安装包之前编译的环境清除掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>make clean<pre class="line-numbers language-none"><code class="language-none">步骤四： <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>make &amp;&amp; make install<pre class="line-numbers language-none"><code class="language-none">## 四、目录结构### 1.整体概览&#96;&#96;&#96;c&#x2F;usr&#x2F;local&#x2F;nginx├── client_body_temp    &#x2F;&#x2F;配置文件目录├── conf      &#x2F;&#x2F;CGI网关协议│   ├── fastcgi.conf│   ├── fastcgi.conf.default                    &#x2F;&#x2F;备份数据│   ├── fastcgi_params          │   ├── fastcgi_params.default                  &#x2F;&#x2F;备份数据    │   ├── scgi_params│   ├── scgi_params.default    │   ├── uwsgi_params│   ├── uwsgi_params.default    &#x2F;&#x2F;编码转换│   ├── koi-utf           │   ├── koi-win│   └── win-utf       &#x2F;&#x2F;！！！！！！！│   ├── mime.types                             &#x2F;&#x2F;文件的mime类型以及后缀名之间的关系│   ├── mime.types.default│   ├── nginx.conf                            &#x2F;&#x2F;核心配置文件│   ├── nginx.conf.default    &#x2F;&#x2F;├── fastcgi_temp├── html│   ├── 50x.html│   └── index.html    &#x2F;&#x2F;日志记录├── logs│   ├── access.log                           &#x2F;&#x2F;访问日志│   ├── error.log                            &#x2F;&#x2F;错误日志│   └── nginx.pid                            &#x2F;&#x2F;nginx的进程PID├── proxy_temp├── sbin    &#x2F;&#x2F;二进制可执行文件│   └── nginx├── scgi_temp└── uwsgi_temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h3 id="2-什么是cgi-（CGI）"><a href="#2-什么是cgi-（CGI）" class="headerlink" title="2.什么是cgi （CGI）"></a>2.什么是cgi （CGI）</h3><p>CGI是通用网关（<strong>接口</strong>），主要解决从客户端发送一个请求和数据，服务端获取到请求和数据后可调用CGI（<strong>程序</strong>）处理以及相应结果给客户端的一种<strong>标准规范</strong>。</p><h2 id="五、Nginx-conf"><a href="#五、Nginx-conf" class="headerlink" title="五、Nginx.conf"></a>五、Nginx.conf</h2><ol><li><p>简单配置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个</span>events <span class="token punctuation">&#123;</span>    <span class="token comment">//单个进程最大连接数（最大连接数=连接数*进程数）</span>    <span class="token comment">//根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    <span class="token comment">//文件扩展名与文件类型映射表(是conf目录下的一个文件)</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    <span class="token comment">//默认文件类型，如果mime.types预先定义的类型没匹配上，默认使用二进制流的方式传输</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment">//sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度。</span>    sendfile        on<span class="token punctuation">;</span>         <span class="token comment">//长连接超时时间，单位是秒</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span> <span class="token comment">//虚拟主机的配置</span>    server <span class="token punctuation">&#123;</span>    <span class="token comment">//监听端口</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment">//域名，可以有多个，用空格隔开</span>        server_name  test80<span class="token punctuation">.</span>xzj520520<span class="token punctuation">.</span>cn<span class="token punctuation">;</span><span class="token comment">//配置根目录以及默认页面</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            root   <span class="token operator">/</span>www<span class="token operator">/</span>test80<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//出错页面配置</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token comment">//  /50x.html文件所在位置</span>        location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//虚拟主机的配置</span>    server <span class="token punctuation">&#123;</span>    <span class="token comment">//监听端口</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment">//域名，可以有多个，用空格隔开</span>        server_name  test81<span class="token punctuation">.</span>xzj520520<span class="token punctuation">.</span>cn<span class="token punctuation">;</span><span class="token comment">//配置根目录以及默认页面</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            root   <span class="token operator">/</span>www<span class="token operator">/</span>test81<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//出错页面配置</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token comment">///50x.html文件所在位置</span>        location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>完整配置</li></ol></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">user</span>  <span class="token expression">nobody<span class="token punctuation">;</span></span></span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span><span class="token expression">_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span><span class="token expression">_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log  notice<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span><span class="token expression">_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log  info<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pid</span>        <span class="token expression">logs<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid<span class="token punctuation">;</span></span></span>events <span class="token punctuation">&#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">log</span><span class="token expression">_format  main  '$remote_addr <span class="token operator">-</span> $remote_user <span class="token punctuation">[</span>$time_local<span class="token punctuation">]</span> </span><span class="token string">"$request"</span> <span class="token expression">'</span></span>    #                  '$status $body_bytes_sent <span class="token string">"$http_referer"</span> '    #                  '<span class="token string">"$http_user_agent"</span> <span class="token string">"$http_x_forwarded_for"</span>'<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">access</span><span class="token expression">_log  logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span></span></span>    sendfile        on<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">tcp</span><span class="token expression">_nopush     on<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">keepalive</span><span class="token expression">_timeout  <span class="token number">0</span><span class="token punctuation">;</span></span></span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">gzip</span>  <span class="token expression">on<span class="token punctuation">;</span></span></span>    server <span class="token punctuation">&#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">charset</span> <span class="token expression">koi8<span class="token operator">-</span>r<span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">access</span><span class="token expression">_log  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span></span></span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span><span class="token expression">_page  <span class="token number">404</span>              <span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">redirect</span> <span class="token expression">server error pages to the <span class="token keyword">static</span> page <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html</span></span>        <span class="token macro property"><span class="token directive-hash">#</span>        <span class="token directive keyword">error</span><span class="token expression">_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span></span></span>        location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">proxy</span> <span class="token expression">the PHP scripts to Apache listening on <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">80</span></span></span>        #        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">location</span> <span class="token expression"><span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">proxy</span><span class="token expression">_pass   http<span class="token operator">:</span></span><span class="token comment">//127.0.0.1;</span></span>        #<span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">pass</span> <span class="token expression">the PHP scripts to FastCGI server listening on <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9000</span></span></span>        #        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">location</span> <span class="token expression"><span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">root</span>           <span class="token expression">html<span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">fastcgi</span><span class="token expression">_pass   <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">fastcgi</span><span class="token expression">_index  index<span class="token punctuation">.</span>php<span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">fastcgi</span><span class="token expression">_param  SCRIPT_FILENAME  <span class="token operator">/</span>scripts$fastcgi_script_name<span class="token punctuation">;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">include</span>        <span class="token expression">fastcgi_params<span class="token punctuation">;</span></span></span>        #<span class="token punctuation">&#125;</span>        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">deny</span> <span class="token expression">access to <span class="token punctuation">.</span>htaccess files<span class="token punctuation">,</span> <span class="token keyword">if</span> Apache's document root</span></span>        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">concurs</span> <span class="token expression">with nginx's one</span></span>        #        <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">location</span> <span class="token expression"><span class="token operator">~</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ht <span class="token punctuation">&#123;</span></span></span>        <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">deny</span>  <span class="token expression">all<span class="token punctuation">;</span></span></span>        #<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">another</span> <span class="token expression">virtual host using mix of IP<span class="token operator">-</span><span class="token punctuation">,</span> name<span class="token operator">-</span><span class="token punctuation">,</span> and port<span class="token operator">-</span>based configuration</span></span>    #    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">server</span> <span class="token expression"><span class="token punctuation">&#123;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">listen</span>       <span class="token expression"><span class="token number">8000</span><span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">listen</span>       <span class="token expression">somename<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">server</span><span class="token expression">_name  somename  alias  another<span class="token punctuation">.</span>alias<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">location</span> <span class="token expression"><span class="token operator">/</span> <span class="token punctuation">&#123;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>        <span class="token directive keyword">root</span>   <span class="token expression">html<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>        <span class="token directive keyword">index</span>  <span class="token expression">index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span></span></span>    #    <span class="token punctuation">&#125;</span>    #<span class="token punctuation">&#125;</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">HTTPS server</span></span>    #    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">server</span> <span class="token expression"><span class="token punctuation">&#123;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">listen</span>       <span class="token expression"><span class="token number">443</span> ssl<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">server</span><span class="token expression">_name  localhost<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_certificate      cert<span class="token punctuation">.</span>pem<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_certificate_key  cert<span class="token punctuation">.</span>key<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_session_cache    shared<span class="token operator">:</span>SSL<span class="token operator">:</span><span class="token number">1</span>m<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_session_timeout  <span class="token number">5</span>m<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_ciphers  HIGH<span class="token operator">:</span><span class="token operator">!</span>aNULL<span class="token operator">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">ssl</span><span class="token expression">_prefer_server_ciphers  on<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>    <span class="token directive keyword">location</span> <span class="token expression"><span class="token operator">/</span> <span class="token punctuation">&#123;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>        <span class="token directive keyword">root</span>   <span class="token expression">html<span class="token punctuation">;</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span>        <span class="token directive keyword">index</span>  <span class="token expression">index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span></span></span>    #    <span class="token punctuation">&#125;</span>    #<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、常用命令"><a href="#六、常用命令" class="headerlink" title="六、常用命令"></a>六、常用命令</h2><h3 id="1-关闭nginx进程"><a href="#1-关闭nginx进程" class="headerlink" title="1. 关闭nginx进程"></a>1. 关闭nginx进程</h3><pre class="line-numbers language-none"><code class="language-none">.&#x2F;nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-清除编译环境"><a href="#2-清除编译环境" class="headerlink" title="2.清除编译环境"></a>2.清除编译环境</h3><pre class="line-numbers language-none"><code class="language-none">make clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-服务器启动与停止"><a href="#3-服务器启动与停止" class="headerlink" title="3. 服务器启动与停止"></a>3. 服务器启动与停止</h3><h4 id="3-1-信号控制"><a href="#3-1-信号控制" class="headerlink" title="3.1 信号控制"></a>3.1 信号控制</h4><ol><li><p>查看Nginx进程号：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep nginx     <span class="token comment">//或者  查看日志 nginx.pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>信号</p></li></ol><table><thead><tr><th>信号</th><th>作用</th></tr></thead><tbody><tr><td>TERM&#x2F;INT</td><td>立即关闭整个服务                             &#x2F;&#x2F;直接关闭</td></tr><tr><td>QUIT</td><td>“优雅”地关闭整个服务                    &#x2F;&#x2F;不再接收用户请求，处理完当前请求后关闭服务</td></tr><tr><td>HUP</td><td>重读配置文件并使用服务对新配置项生效                    &#x2F;&#x2F;！！！</td></tr><tr><td>USR1</td><td>重新打开日志文件，可以用来进行日志切割               &#x2F;&#x2F;！！！</td></tr><tr><td>USR2</td><td>平滑升级到最新版的nginx</td></tr><tr><td>WINCH</td><td>所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令</td></tr></tbody></table><p>调用命令： </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">kill <span class="token operator">-</span>singal  PID         <span class="token comment">//singal为信号，PID为进程ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p><strong>USR2命令</strong></p><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/2023-01-11%20110621.png"></p><p>在升级时，先复制一份进程，然后旧的进程pid记录在logs&#x2F;nginx.pid.lodbin中，然后使用QUIT信号（需主动输入），关闭服务。</p></li></ol><h4 id="3-2-命令行控制"><a href="#3-2-命令行控制" class="headerlink" title="3.2 命令行控制"></a>3.2 命令行控制</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token operator">/</span>nginx <span class="token operator">-</span>参数                   <span class="token comment">//在sbin目录下</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">Options<span class="token operator">:</span>  <span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">-</span>h         <span class="token operator">:</span> this help  <span class="token operator">-</span>v            <span class="token operator">:</span> show version and exit  <span class="token operator">-</span>V            <span class="token operator">:</span> show version and configure options then exit    <span class="token comment">//显示版本以及配置参数（大写V）</span>  <span class="token operator">-</span>t            <span class="token operator">:</span> test configuration and exit                     <span class="token comment">//检测Nginx.conf有无语法错误     </span>  <span class="token operator">-</span>T            <span class="token operator">:</span> test configuration<span class="token punctuation">,</span> dump it and exit            <span class="token comment">//检测Nginx.conf配置文件，在无错误时，显示配置文件内容</span>  <span class="token operator">-</span>q            <span class="token operator">:</span> suppress non<span class="token operator">-</span>error messages during configuration testing        <span class="token comment">//输出错误信息</span>  <span class="token operator">-</span>s signal     <span class="token operator">:</span> send signal to a master process<span class="token operator">:</span> stop<span class="token punctuation">,</span> quit<span class="token punctuation">,</span> reopen<span class="token punctuation">,</span> reload                     singal<span class="token operator">:</span>stop                                      <span class="token comment">//快速关闭，类似</span>                       quit                                      <span class="token comment">//优雅关闭，类似QUIT</span>                       reopen                                    <span class="token comment">//重新打开日志文件，类似USR1</span>                       reload                                    <span class="token comment">//类似HUP,重新加载配置文件</span>  <span class="token operator">-</span>p prefix     <span class="token operator">:</span> set prefix <span class="token function">path</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token punctuation">)</span>   <span class="token comment">//设置配置文件目录</span>  <span class="token operator">-</span>e filename   <span class="token operator">:</span> set error log <span class="token function">file</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token comment">//设置错误文件目录</span>  <span class="token operator">-</span>c filename   <span class="token operator">:</span> set configuration <span class="token function">file</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">)</span> <span class="token comment">//设置nginx.conf目录</span>  <span class="token operator">-</span>g directives <span class="token operator">:</span> set global directives out of configuration file             <span class="token comment">//补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置</span>                eg：一般在启动时使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nginx使用"><a href="#Nginx使用" class="headerlink" title="Nginx使用"></a>Nginx使用</h1><h2 id="一、虚拟主机与域名解析"><a href="#一、虚拟主机与域名解析" class="headerlink" title="一、虚拟主机与域名解析"></a>一、虚拟主机与域名解析</h2><p>​          虚拟主机使用特殊的软硬件技术，把<strong>一台运行在因特网上的服务器主机分成一台台“虚拟”的主机，每一台虚拟主机都具有独立的域名，具有完整的Internet服务器（WWW、FTP、Email等）功能</strong>，虚拟主机之间完全独立，并可由用户自行管理，在外界看来，每一台虚拟主机和一台独立的主机完全一样。</p><p>​         域名解析就是<strong>域名到IP地址的转换过程</strong>，IP地址是网路上标识站点的数字地址，为了简单好记，采用域名来代替ip地址标识站点地址，。域名的解析工作由DNS服务器完成。</p><h3 id="虚拟主机原理"><a href="#虚拟主机原理" class="headerlink" title="虚拟主机原理"></a><strong>虚拟主机原理</strong></h3><p>​       虚拟主机是为了在同一台物理机器上运行多个不同的网站，提高资源利用率引入的技术。</p><p>​    一般的web服务器一个ip地址的80端口只能正确对应一个网站。web服务器在不使用多个ip地址和端口的情况下，如果需要支持多个相对独立的网站就需要一种机制来分辨同一个ip地址上的不同网站的请求，这就出现了<strong>主机头绑定</strong>的方法。简单的说就是，将不同的网站空间对应不同的域名，以连接请求中的域名字段来分发和应答正确的对应空间的文件执行结果。举个例子来说，一台服务器ip地址为192.168.8.101，有两个域名和对应的空间在这台服务器上，使用的都是192.168.8.101的80端口来提供服务。如果只是简单的将两个域名A和B的域名记录解析到这个ip地址，那么web服务器在收到任何请求时反馈的都会是同一个网站的信息，这显然达不到要求。接下来我们使用主机头绑定域名A和B到他们对应的空间文件夹C和D。当含有域名A的web请求信息到达192.168.8.101时，web服务器将执行它对应的空间C中的首页文件，并返回给客户端，含有域名B的web请求信息同理，web服务器将执行它对应的空间D中的首页文件，并返回给客户端，所以在<strong>使用主机头绑定功能后就不能使用ip地址访问其上的任何网站了，因为请求信息中不存在域名信息，所以会出错。</strong></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ol><li>在域名中设置DNS解析</li></ol><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/2023-01-11%20200347.png"></p><p>​      若使用虚拟主机，可将前缀设为通配符（*，即www -&gt; *）,或者在配置文件中设置不同端口号</p><ol start="2"><li><p>配置Nginx.conf （简单）</p><p>2.1通过修改端口号访问：<a href="http://www.mrpoke.top/">www.mrpoke.top</a></p><p>​                                         <a href="http://www.mrpoke.top:88/">www.mrpoke.top:88</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">&#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span><span class="token comment">//服务1</span>    server <span class="token punctuation">&#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">/</span>www<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//服务2</span>    server <span class="token punctuation">&#123;</span>            listen       <span class="token number">88</span><span class="token punctuation">;</span>            server_name  localhost<span class="token punctuation">;</span>            location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>                root   <span class="token operator">/</span>vod<span class="token punctuation">;</span>                index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>            location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>                root   html<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 通过通配符访问 <a href="http://vod.mrpoke.top/">vod.mrpoke.top</a></p><p>​                                 <a href="http://waw.mrpoke.top/">waw.mrpoke.top</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">&#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http <span class="token punctuation">&#123;</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span><span class="token comment">//服务1</span>    server <span class="token punctuation">&#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  waw<span class="token punctuation">.</span>mrpoke<span class="token punctuation">.</span>top<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">/</span>www<span class="token punctuation">;</span>            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//服务2</span>    server <span class="token punctuation">&#123;</span>            listen       <span class="token number">80</span><span class="token punctuation">;</span>            server_name  vod<span class="token punctuation">.</span>mrpoke<span class="token punctuation">.</span>top<span class="token punctuation">;</span>            location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>                root   <span class="token operator">/</span>vod<span class="token punctuation">;</span>                index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>            location <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>                root   html<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二、负载均衡与反向代理"><a href="#二、负载均衡与反向代理" class="headerlink" title="二、负载均衡与反向代理"></a>二、负载均衡与反向代理</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/2023-01-13%20155312.png"></p><h3 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1.反向代理"></a>1.反向代理</h3><p><strong>为服务器做代理</strong>。用户发送请求，由Nginx做处理和转发，并将响应返回。（<strong>用户请求无法接通服务器</strong>）</p><p>问题：什么是正向代理？</p><p><strong>为客户端做代理，</strong>用户发送请求，代理服务器做处理并转发。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/blog/2022/12/31/docker-ming-ling/"/>
      <url>/blog/2022/12/31/docker-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ol><li><p>开启Docker： systemctl start docker</p></li><li><p>关闭Docker:    systemctl stop docker</p></li><li><p>查看状态：     systemctl status docker</p></li><li><p>重启：             systemctl restart docker</p></li></ol><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><ol><li><p>查看镜像：  docker images</p><h3 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h3><ol><li>搜索镜像 ： docker search （name）</li><li>下载镜像：  docker pull (name ： 版本号)</li></ol></li><li><p>删除镜像 ： docker rmi (Image ID)</p></li></ol><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><ol><li>查看所有容器 ： docker ps -a</li><li>查看运行容器： docker ps</li><li>运行容器 ： docker run  -   –name&#x3D; (name)      &#x2F; (参数)&#x2F;（参数）【表示进入容器命令】   i 【一直运行】  -t 【分配终端，直接进入容器】 ImageID</li></ol><p>​                                                                                                                                                                                     -d【后台运行】</p><ol start="4"><li><p>进入容器： docker exec -it  (name)  （command）【进入命令】</p></li><li><p>退出容器：  exit</p></li><li><p>启动容器： docker start (name || id)</p></li><li><p>停止容器： docker stop (name)</p></li><li><p>删除容器(运行中的必须停止)： docker rm (name || id)</p></li><li><p>查看容器信息： docker  inspect (name)</p></li></ol><h1 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h1><ol><li><p>概念： 是宿主机中的一个目录或文件（需将容器中的目录与宿主机的目录挂载起来）</p></li><li><p>作用：1.  修改同步<br>          2. 保存数据（容器删除，数据卷仍在）<br>          3. 与外界机器通信</p></li><li><p>一个数据卷可同时被多个容器挂载，一个容器可挂载多个数据卷</p></li></ol><h2 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h2><ol><li>创建容器时配置： docker run .. -v  (宿主机目录文件)： （容器内目录文件）</li></ol><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/mr-poke/picture/raw/master/img/2023-01-02%20124618.png"></h2><ol><li>配置数据卷容器：  docker run - –name （别名） -v &#x2F;volume  </li><li>配置其他容器： docker run –name (别名) –volumes-from (数据卷容器名)</li></ol><h1 id="安装MYSQL"><a href="#安装MYSQL" class="headerlink" title="安装MYSQL"></a>安装MYSQL</h1><ol><li><p>下载镜像： docker pull mysql</p></li><li><pre><code class="bash">docker run -v $PWD/conf:/etc/mysql/conf.d                                  //设置数据卷映射   **配置文件**                                  -v $PWD/logs:/logs                        //设置数据卷映射   **日志**                                  -v $PWD/data:/var/lib/mysql               //设置数据卷映射   **数据文件**                                  -e MYSQL_ROOT_PASSWORD=(密码)                                                   -p3306:3306                                                                 -id                                             --name(名字 )                                          mysql<pre class="line-numbers language-none"><code class="language-none">   运行：3. 进入MYSQL: docker exec -it mysql &#x2F;bin&#x2F;bash# 安装Nginx1. 下载镜像2. 运行：    &#96;&#96;&#96;bash   docker run -id --name&#x3D;c_nginx \   -p 80:80 \   -v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \   -v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \   -v $PWD&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \   nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><p>实例配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log warn</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token comment">#gzip  on;</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Docker镜像-1"><a href="#Docker镜像-1" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/2023-01-03%20112342.png"></p><ol><li>镜像本质： 一个分层文件系统</li></ol><h2 id="如何制作镜像？"><a href="#如何制作镜像？" class="headerlink" title="如何制作镜像？"></a>如何制作镜像？</h2><ol><li><p>容器转镜像</p><ol><li>docker commit  （容器ID）  （镜像名称）         容器转镜像</li><li>docker save -o  (压缩文件名称)   （镜像名称）  ： 压缩文件</li><li>docker load - i  （压缩文件名称）</li></ol></li><li><p><strong>DockerFile</strong></p><ol><li>是一个文本文件</li><li>参数</li></ol></li></ol><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name&#x3D;value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h2><ol><li>创建dockerfile文件并编辑</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM java:8MAINTAINER itheima <span class="token operator">&lt;</span>itheima@itcast.cn<span class="token operator">></span>ADD HelloDocker-0.0.1-SNAPSHOT.jar app.jarCMD <span class="token function">java</span> <span class="token parameter variable">-jar</span> app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>根据dockerfile制作镜像</p><pre class="line-numbers language-none"><code class="language-none">docker build -f .&#x2F;springboot_dockerfile  （文件位置 -f当前）               -t app                        （别名）                .                          （版本信息）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dcoker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/blog/2022/12/28/spring-mvc/"/>
      <url>/blog/2022/12/28/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring-MVC"></a>Spring-MVC</h1><h1 id="web基础组件复习"><a href="#web基础组件复习" class="headerlink" title="web基础组件复习"></a>web基础组件复习</h1><table><thead><tr><th>组件</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>Servlet</td><td>处理请求和响应</td><td>单例，默认懒汉式加载，创建完成执行init（），service（）</td></tr><tr><td>Filter</td><td>过滤请求</td><td>单例，服务器启动创建，创建完成执行init(),对请求过滤</td></tr><tr><td>Listener</td><td>负责域对象的创建和属性变化的监听</td><td>三个域：request\Session\ServletContext</td></tr></tbody></table><h2 id="一、入门配置"><a href="#一、入门配置" class="headerlink" title="一、入门配置"></a>一、入门配置</h2><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h3><ol><li><p>导入Spring-mvc包</p></li><li><p>在web.xml配置前端控制器DispatchaerServlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    配置springmvc的前端控制器，对浏览器发送的请求进行统一处理<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">></span></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">SpringMVC</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        配置springmvc文件的位置，让其起作用<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>springMVC<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        将前端控制器<span class="token class-name">DispatcherServlet</span>的初始化时间提前到服务器启动时，因为servlet在第一次启动时会初始化<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">SpringMVC</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        <span class="token operator">/</span> 表示浏览器发送的所有请求，不包括<span class="token punctuation">.</span>jsp后缀的请求<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置Controller层代码</p></li><li><p>在spring-mvc.xml 配置组件扫描  @ComponentScan</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    springmvc的配置文件<span class="token punctuation">,</span>包含网站跳转逻辑的控制和配置 use<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>filters禁用默认规则<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.rsk"</span> use<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>filters<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        只扫描控制器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>include<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）"><a href="#2-如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）" class="headerlink" title="2.如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）"></a>2.如何在Controller层中访问容器中的Bean（即如何实现注入bean的功能）</h3><ol><li><p>在ApplicationContext.xml中配置组件扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   <span class="token number">1.</span> spring配置文件，主要配置和业务逻辑有关的<span class="token operator">--</span><span class="token operator">></span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@SpringBootApplication</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.rsk"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        不扫描控制器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>exclude<span class="token operator">-</span>filter type<span class="token operator">=</span><span class="token string">"annotation"</span> expression<span class="token operator">=</span><span class="token string">"org.springframework.stereotype.Controller"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在web.xml配置 ServletContextListener监听器，让ApplocatinoContext容器注入到web中的applicationContext 域中（全局，所有用户共享）</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    监听器--&gt;&lt;listener&gt;  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;&lt;&#x2F;listener&gt;&lt;!--    1.启动spring容器，加载ApplicationContext--&gt;&lt;context-param&gt;  &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;  &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;&lt;&#x2F;context-param&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="二、-SpringMVC的关键组件"><a href="#二、-SpringMVC的关键组件" class="headerlink" title="二、 SpringMVC的关键组件"></a>二、 SpringMVC的关键组件</h2><h3 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1. 工作流程"></a>1. 工作流程</h3><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/springmvc.png"></p><h3 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h3><table><thead><tr><th align="center">组件</th><th>描述</th><th>常用组件</th></tr></thead><tbody><tr><td align="center">HandlerMapping（处理器映射器）</td><td>匹配映射路径对应的Handler，返回可执行的处理器链对象HandlerExecutionChain对象</td><td>RequestMappingHandlerMapping</td></tr><tr><td align="center">HandlerAdapter（处理器适配器）</td><td>匹配HandlerExecutionChain对应的适配器进去处理器调用，返回视图对象</td><td>RequestMappingHandlerAdapter</td></tr><tr><td align="center">ViewResolver（视图解析器）</td><td>对视图模型对象进行解析</td><td>InternalResourceViewResolver</td></tr></tbody></table><h2 id="三、将JSON数据转化为POJO实体类"><a href="#三、将JSON数据转化为POJO实体类" class="headerlink" title="三、将JSON数据转化为POJO实体类"></a>三、将JSON数据转化为POJO实体类</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.0</span><span class="token number">.16</span><span class="token punctuation">.</span>graal<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-在Controller层中进行转换"><a href="#2-1-在Controller层中进行转换" class="headerlink" title="2.1 在Controller层中进行转换"></a>2.1 在Controller层中进行转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/param1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">param1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"body=&#123;&#125;"</span><span class="token punctuation">,</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）"><a href="#2-2-注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）" class="headerlink" title="2.2 注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）"></a>2.2 注入bean进行统一的转换，无需在Controller层中转换（springboo自动配置）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扩展消息转换器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息转换器对象</span>        <span class="token class-name">MappingJackson2HttpMessageConverter</span> messageConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span>        messageConverter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>messageConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、静态资源"><a href="#四、静态资源" class="headerlink" title="四、静态资源"></a>四、静态资源</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 静态资源加载,核心控制器拦截的是所有请求,需要对静态资源请求进行放行,通过配置放行资源实现   下面这个配置是可以放行所有的普通资源调用   让springMVC不处理静态资源,如 .css  .js  .html  .MP3 等--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、mvc-annotation-driven"><a href="#五、mvc-annotation-driven" class="headerlink" title="五、mvc:annotation-driven"></a>五、mvc:annotation-driven</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置mvc注解驱动--&gt;&lt;mvc:annotation-driven&#x2F;&gt;自动配置RequestMappingHandlerMapping、RequestMappingHandlerAdapter并加入json转换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="拦截器（Interceptor）"><a href="#拦截器（Interceptor）" class="headerlink" title="拦截器（Interceptor）"></a>拦截器（Interceptor）</h1><p>简介： 对资源进行拦截，</p><h2 id="1-拦截器与过滤器的区别"><a href="#1-拦截器与过滤器的区别" class="headerlink" title="1.拦截器与过滤器的区别"></a>1.拦截器与过滤器的区别</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/mvc%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p><table><thead><tr><th></th><th>Filter</th><th>Interceptor</th></tr></thead><tbody><tr><td>技术范畴</td><td>javaWeb</td><td>springMvc</td></tr><tr><td>拦截、过滤资源</td><td>任何请求</td><td>进入springmvc管理的请求，主要拦截Controller</td></tr><tr><td>执行时机</td><td>早于Servlet</td><td>晚于DispatherServlet</td></tr></tbody></table><h2 id="2-源码"><a href="#2-源码" class="headerlink" title="2.源码"></a>2.源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Comment</span> <span class="token comment">// 需要配置到Mvc的配置类中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//访问到Controller方法前  true：可以访问，false ：无法访问</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//访问到Controller方法后执行，可对方法中的模型数据和视图修改</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在全部完成之后，视图渲染完毕后，可以进行异常处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebMvcConfitgurer"><a href="#WebMvcConfitgurer" class="headerlink" title="WebMvcConfitgurer"></a>WebMvcConfitgurer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MvcInterceptor</span> userInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*   静态资源映射，自定义资源的映射，默认为static        registry.addResourceHandler("/backend/**").addResourceLocations("classpath:/backend/");        */</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加拦截器注册到spring容器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>userInterceptor<span class="token punctuation">)</span>                <span class="token comment">//资源配置，什么资源需要被拦截</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">//什么资源不需要拦截</span>            <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/employee/login"</span><span class="token punctuation">,</span><span class="token string">"/employee/logout"</span><span class="token punctuation">,</span><span class="token string">"/backend/**"</span><span class="token punctuation">,</span><span class="token string">"/front/**"</span><span class="token punctuation">,</span><span class="token string">"/user/sendMsg"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-执行顺序"><a href="#3-执行顺序" class="headerlink" title="3.执行顺序"></a>3.执行顺序</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/interceptor%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></p><h1 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h1><h2 id="一、DispatcherServlet（本质Servlet）"><a href="#一、DispatcherServlet（本质Servlet）" class="headerlink" title="一、DispatcherServlet（本质Servlet）"></a>一、DispatcherServlet（本质Servlet）</h2><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/DispatcherServlet.png"></p><p><strong>servlet接口的源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>初始化springMvc的ApplicationContext容器，（有则获取，没有且父容器（Spring容器）也没有，则创建）</p><p>​      （！！！！spring获取Bean获取不到SpringMVC的Bean，SpringMVC可获取到Spring的Bean）</p></li><li><p>注册九大组件</p></li></ol><h3 id="1-init方法（）"><a href="#1-init方法（）" class="headerlink" title="1.init方法（）"></a>1.init方法（）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用模板方法模式（设计模式），init（）在HttpServletBean（抽象类）中声明。</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//init()在FrameworkServlet中</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Initializing Servlet '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//this.initWebApplicationContext();</span>            <span class="token comment">//初始化Spring容器，没有找到，找到父容器（spring的容器），也没有则创建。</span>                            <span class="token comment">//找到了，设置父容器       （！！！！spring获取Bean获取不到SpringMVC的Bean，SpringMVC可获取到Spring的Bean）</span>            <span class="token comment">//执行refresh（）方法：创建BeanFactory加载Bean工厂后处理器和Bean后处理器等等。。</span>            <span class="token comment">//发布事件监听器</span>            <span class="token comment">//FrameworkServlet中获取到监听器，并执行onfresh（）</span>            <span class="token comment">//onfresh（），注册SpringMvc九大组件，具体看2介绍</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span> <span class="token string">"shown which may lead to unsafe logging of potentially sensitive data"</span> <span class="token operator">:</span> <span class="token string">"masked to prevent unsafe logging of potentially sensitive data"</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"enableLoggingRequestDetails='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span> <span class="token string">"': request parameters and headers will be "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Completed initialization in "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-onfresh（）"><a href="#2-onfresh（）" class="headerlink" title="2.onfresh（）"></a>2.onfresh（）</h3><p>作用：注册九大组件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用于处理上传请求。处理方法是将普通的request包装成MultipartHttpServletRequest，后者可以直接调用getFile方法获取File，如果上传多个文件，还可以调用getFileMap得到FileName->File结构的Map。此组件中一共有三个方法，作用分别是判断是不是上传请求，将request包装成MultipartHttpServletRequest、处理完后清理上传过程中产生的临时资源。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//解析视图需要两个参数：一是视图名，另一个是Locale。视图名是处理器返回的，Locale是从哪里来的？这就是LocaleResolver要做的事情。LocaleResolver用于从request解析出Locale，Locale就是zh-cn之类，表示一个区域，有了这个就可以对不同区域的用户显示不同的结果。SpringMVC主要有两个地方用到了Locale：一是ViewResolver视图解析的时候；二是用到国际化资源或者主题的时候。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用于解析主题</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//是用来查找Handler的。在SpringMVC中会有很多请求，每个请求都需要一个Handler处理，具体接收到一个请求之后使用哪个Handler进行处理呢？这就是HandlerMapping需要做的事</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具，HandlerAdapter是使用工具干活的人。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 此组件的作用是根据异常设置ModelAndView，之后再交给render方法进行渲染。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ViewName是根据ViewName查找View，但有的Handler处理完后并没有设置View也没有设置ViewName，这时就需要从request获取ViewName了，如何从request中获取ViewName就是RequestToViewNameTranslator要做的事情了。RequestToViewNameTranslator在Spring MVC容器里只可以配置一个</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//ViewResolver用来将String类型的视图名和Locale解析为View类型的视图。ViewResolver需要找到渲染所用的模板和所用的技术（也就是视图的类型）进行渲染，具体的渲染过程则交由不同的视图自己完成。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用来管理FlashMap的，FlashMap主要用在redirect中传递参数。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-初始化时机："><a href="#2-初始化时机：" class="headerlink" title="2. 初始化时机："></a>2. 初始化时机：</h3><p>默认在使用时初始化（与Servlet一致），一般将其修改（Tomcat容器启动时：在yml中配置）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>      <span class="token key atrule">load-on-startup</span><span class="token punctuation">:</span> 1 （大于 0  即表示在启动时初始化）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Service（）"><a href="#3-Service（）" class="headerlink" title="3.Service（）"></a>3.Service（）</h3><p>核心doDispatch（）</p><h2 id="二、RequestMappingHandlerMapping"><a href="#二、RequestMappingHandlerMapping" class="headerlink" title="二、RequestMappingHandlerMapping"></a>二、RequestMappingHandlerMapping</h2><ol><li><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>解析@RequestMapping以及派生注解，并生成URL路径与控制器方法的映射关系，在初始化时生成</p></li><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>在使用时，需自定义配置，因为DispatcherServlet 初始化时默认添加，但是默认的不会作为bean，被容器扫描，所以自定义</p></li><li><p>获取映射结果</p></li></ol><pre class="line-numbers language-none"><code class="language-none">Map&lt;RequestMappingInfo, HandlerMethod&gt; methods &#x3D; requestMappingHandlerMapping.getHandlerMethods();结果：&#123;GET [&#x2F;test]&#125; &#x3D;&#x3D;&#x3D;&#x3D;com.poke.TestDisphtcher.a01.Controller#test()&#123;PUT [&#x2F;test1]&#125; &#x3D;&#x3D;&#x3D;&#x3D;com.poke.TestDisphtcher.a01.Controller#test1()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、RequestMappingHandlerAdapter"><a href="#三、RequestMappingHandlerAdapter" class="headerlink" title="三、RequestMappingHandlerAdapter"></a>三、RequestMappingHandlerAdapter</h2><ol><li><p>作用</p><p>调用控制器方法</p></li><li><p>测试</p></li></ol><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p><img src="https://gitee.com/mr-poke/picture/raw/master/img/springmvc.png"></p><p><strong>Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具；HandlerAdapter是使用工具干活的人。</strong></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><table><thead><tr><th>注解</th><th></th><th></th></tr></thead><tbody><tr><td>GetMapping</td><td></td><td></td></tr><tr><td>PostMapping</td><td></td><td></td></tr></tbody></table><h2 id="RequstParam"><a href="#RequstParam" class="headerlink" title="@RequstParam"></a>@RequstParam</h2><p><strong>作用</strong>：获取url中？后的参数（解决参数（形参）不一致问题）</p><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>作用：获取请求体中的数据</p><p>一般会有json与javaBean的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.导入jackson-databind包</span><span class="token comment">//2.将json格式字符串转化为Bean      不常用</span><span class="token class-name">ObjectMapper</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有异常抛出</span><span class="token comment">//常用的、、、、、、、、</span><span class="token comment">//springboot自动装配了json转换器jackson-databind</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>作用：获取Restful请求的数据 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">eg： localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>add<span class="token operator">/</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>作用：获取请求头</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>作用：获取Cookie中的jessionID</p><h2 id="RequestAttribute"><a href="#RequestAttribute" class="headerlink" title="@RequestAttribute"></a>@RequestAttribute</h2><p>作用：获取requst域中数据</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
